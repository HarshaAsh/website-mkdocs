{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"this is a sample page","title":"Home"},{"location":"changelog/","text":"Changelog \u00b6 Material for MkDocs \u00b6 7.2.4 _ August 11, 2021 \u00b6 Fixed #2926 : Version selector not working (7.2.3 regression) Fixed #2929 : Missing CSS class for banner (consistency with Insiders) 7.2.3 _ August 9, 2021 \u00b6 Slight facelift of data tables, now closer to Material Design Fixed instant loading not respecting clicks on search results Fixed #2881 : Invalid anchor offsets when using instant loading 7.2.2 _ July 31, 2021 \u00b6 Updated Korean translations Fixed #2879 : Search highlighting does not properly escape HTML 7.2.1 _ July 25, 2021 \u00b6 Fixed #2862 : Back-to-top button overlays active search bar 7.2.0 _ July 21, 2021 \u00b6 Added support for search suggestions to save keystrokes Added support for search highlighting Added support for search sharing (i.e. deep linking) 7.1.11 _ July 18, 2021 \u00b6 Updated Spanish and Galician translations 7.1.10 _ July 10, 2021 \u00b6 Refactored appearance of back-to-top button Fixed graceful handling of search when browsing locally 7.1.9 _ June 25, 2021 \u00b6 Improved search language support for Thai and Hindi Fixed #2761 : License comments lined up at end of file 7.1.8 _ June 12, 2021 \u00b6 Refactored analytics integration (because of MkDocs 1.2) Added support for Google Analytics 4 ( gtag.js ) Fixed missing escape for aria-label in footer links 7.1.7 _ June 6, 2021 \u00b6 Improved screen reader support 7.1.6 _ May 30, 2021 \u00b6 Deprecated seealso admonition qualifier Added Mongolian and updated Chinese translations Fixed #2429 : Version selector not touch-friendly on Android devices Fixed #2703 : Printed 'Initializing search' albeit ready on mobile 7.1.5 _ May 19, 2021 \u00b6 Fixed #2655 : Details breaking page margins on print 7.1.4 _ May 6, 2021 \u00b6 Added support for git-revision-date-localized plugin creation date Improved footnote styles on :target and :focus 7.1.3 _ April 24, 2021 \u00b6 Fixed #2586 : Empty table of contents shown (7.1.2 regression) 7.1.2 _ April 18, 2021 \u00b6 Fixed #2554 : List markers sometimes overlap floated elements Fixed #2563 : Adding a class to a h1 breaks the table of contents Fixed #2566 : Back-to-top button clickable when invisible 7.1.1 _ April 10, 2021 \u00b6 Fixed #2501 : Nested definition lists compound bottom margin Fixed #2508 : Switch extracopyright block to template variable Fixed #2533 : Search (and other parts) not working in Safari <14 Fixed #2538 : Visual quirk when opening language selector 7.1.0 _ March 29, 2021 \u00b6 Added support for back-to-top button Added support for color palette toggle Added latest release to repository info (GitHub) Slight facelift of repository info (lighter fonts, spacing and icons) 7.0.7 _ March 28, 2021 \u00b6 Updated Hungarian translations Fixed #2466 : Docker image not based on latest Python and Alpine Fixed #2488 : Inconsistent header shadow behavior Fixed #2492 : Inline code blocks in admonition titles missing background 7.0.6 _ March 14, 2021 \u00b6 Added trailing slash to version selector URL Added support for out-of-order anchors in table of contents Added extra.homepage option to link logo to arbitrary URL Improved security of Docker image (always update apk) Fixed horizontal spacing for nested inline admonitions Fixed text color of nested code blocks inside links Fixed version selector to always use version title Fixed logo link when using versioning with instant loading 7.0.5 _ March 7, 2021 \u00b6 Added extracopyright block to allow for custom copyright info Fixed evaluation of third-party scripts when using instant loading Fixed edge cases when using instant loading without directory URLs Fixed handling of version selector when using instant loading Fixed regression with header title not being updated correctly Fixed expanded sections not opening on first click (7.0.4 regression) 7.0.4 _ March 4, 2021 \u00b6 Added Icelandic translations Fixed #2386 : Section close requires two clicks (navigation expansion) Fixed console error when search is disabled (7.0.0 regression) Fixed localsearch integration (7.0.0 regression) 7.0.3 _ February 26, 2021 \u00b6 Fixed JavaScript errors in older browsers (target ES2020 -> ES2015) 7.0.2 _ February 25, 2021 \u00b6 Fixed #2343 : Invalid source map URLs for JS and CSS files Fixed #2347 : Version selector missing when using versioning 7.0.1 _ February 24, 2021 \u00b6 Fixed #2334 : Google Analytics triggers page view twice (7.0.0 regression) Fixed #2336 : Details bleed into inline admonitions Fixed #2337 : Images don't align correctly (7.0.0 regression) 7.0.0 _ February 22, 2021 \u00b6 Added support for deploying multiple versions Added support for integrating a language selector Added support for rendering admonitions as inline blocks Rewrite of the underlying reactive architecture Removed Webpack in favor of reactive build strategy (-480 dependencies) Fixed keyboard navigation for code blocks after content tabs switch 6.2.8 _ February 4, 2021 \u00b6 Updated Japanese and Polish translations Fixed #2261 : Print dialog auto-closing when using instant loading 6.2.7 _ January 31, 2021 \u00b6 Fixed #2251 : Updated Docker image to latest Alpine Linux 6.2.6 _ January 26, 2021 \u00b6 Added Bulgarian translations Fixed #2233 : Search not shown when using header autohiding 6.2.5 _ January 17, 2021 \u00b6 Fixed syntax error in Swedish translations Optimized navigation partials to improve build speed for huge docs 6.2.4 _ January 9, 2021 \u00b6 Fixed #2156 : Missing syntax highlighting for binary numbers Fixed #2186 : Disqus showing on 404 page 6.2.3 _ December 27, 2020 \u00b6 Added back hidden overflow on root container Fixed #2142 : MathJax formulas sometimes have vertical scrollbars 6.2.2 _ December 22, 2020 \u00b6 Removed Markdown version range limit (6.2.0 regression) 6.2.1 _ December 22, 2020 \u00b6 Fixed all import and asset paths in templates (6.2.0 regression) Downgraded webpack-asset-manifest-plugin - broke all asset paths 6.2.0 _ December 22, 2020 \u00b6 Added support for navigation sections Added support for navigation expansion Added support for integrating table of contents into navigation Added support for autohiding header on scroll Added support for hiding navigation and table of contents per page Added support for arbitrary items in navigation tabs Refactored navigation tabs to simplify grouping behavior Fixed anchor offset for permalinks in Safari (partial revert) Fixed #2098 : Active tab sometimes not highlighted correctly Improved appearance for horizontal rulers Improved Spanish and Swedish translations 6.1.7 _ December 6, 2020 \u00b6 Fixed #2081 : Fixed stats for private GitHub repositories Fixed alignment for admonition icon alignment for right-to-left languages 6.1.6 _ November 22, 2020 \u00b6 Fixed #2048 : Math formulas show scrollbars (Windows) 6.1.5 _ November 15, 2020 \u00b6 Fixed search reset button not showing/hiding correctly 6.1.4 _ November 7, 2020 \u00b6 Fixed sidebar jitter when scrolling footer into view 6.1.3 _ November 5, 2020 \u00b6 Added support for keywords meta tag Fixed #2027 : Line numbers don't scale with smaller font size Fixed link colors for black and white on slate color scheme Removed focus outline on scrolling code blocks for pointer devices 6.1.2 _ October 31, 2020 \u00b6 Fixed sizing of icons in admonitions, task lists, etc. (6.1.1 regression) 6.1.1 _ October 31, 2020 \u00b6 Fixed #2019 : Page title not correctly updated when using instant loading 6.1.0 _ October 17, 2020 \u00b6 Fixed #1973 : Added support for printing in dark mode Fixed #1974 : Added support for printing content tabs Fixed #1995 : Improved customizability of details extension 6.0.2 _ October 4, 2020 \u00b6 Added Georgian translations Added escaping for link title attributes where necessary Fixed #1956 : Pages with whitespace in names have invalid links in search Removed unnecessary (duplicated) link title attributes 6.0.1 _ September 26, 2020 \u00b6 Fixed stemmer support for file:// protocol through iframe-worker Fixed details marker showing for search result in Firefox Fixed tabbing behavior when search query is not empty Switched TypeScript compilation target to ES2015 Reduced size of JavaScript by 30% ( 176kb \u2192 124kb ) Removed mkdocs and readthedocs themes from Docker image 6.0.0 _ September 25, 2020 \u00b6 Improved search result look and feel Improved search result stability while typing Improved search result grouping (pages + headings) Improved search result relevance and scoring Added display of missing query terms to search results Reduced size of vendor bundle by 25% ( 84kb \u2192 67kb ) Reduced size of the Docker image to improve CI build performance Removed hero partial in favor of custom implementation Removed deprecated front matter features 5.5.14 _ September 23, 2020 \u00b6 Improved spacing around image captions Fixed #1939 : Long tables cause header overlap in print view 5.5.13 _ September 19, 2020 \u00b6 Improved abbreviations on touch devices 5.5.12 _ August 31, 2020 \u00b6 Fixed #1638 : occasional 404 for images when using instant loading 5.5.11 _ August 28, 2020 \u00b6 Fixed Disqus integration, as the minifier killed the config 5.5.10 _ August 28, 2020 \u00b6 Improved rendering by moving Disqus integration after page load Fixed #1887 : Moved navigation icons to CSS to reduce size of HTML 5.5.9 _ August 26, 2020 \u00b6 Added Esperanto translations Fixed #1884 : External links not included in navigation tabs 5.5.8 _ August 23, 2020 \u00b6 Removed focus outline on details and content tabs for pointer devices Improved accessibility of content tabs (now navigable via arrow keys) Fixed #1877 : 404 on search index when search is disabled Fixed some memleaks in observable subscriptions Fixed color definitions for theme-color meta tag 5.5.7 _ August 16, 2020 \u00b6 Improved contrast ratio to 4.5:1 for syntax highlighting Improved contrast ratio to 4.5:1 for table of contents 5.5.6 _ August 12, 2020 \u00b6 Switched base template for 404.html to main.html Fixed #1864 : GitHub organisation stats not loading 5.5.5 _ August 11, 2020 \u00b6 Fixed missing vendor and worker distribution files 5.5.4 _ August 11, 2020 \u00b6 Added support for sortable data tables 5.5.3 _ August 4, 2020 \u00b6 Fixed search for languages other than English (5.5.1 regression) 5.5.2 _ August 3, 2020 \u00b6 Improved highlight colors and spacing for ins , del and mark Changed some keyboard symbols for better equivalents Removed focus outline for details and code blocks on touch devices Fixed margins for admonitions (5.5.1 regression) Fixed too small content tab labels (5.5.1 regression) Fixed icon repeating for custom admonition icons 5.5.1 _ August 1, 2020 \u00b6 Improved typesetting by basing font-size and spacings on em Improved print view by slightly scaling down font-size Changed custom site title (metadata) to be suffixed with site name Fixed top- and bottom spacing of paragraphs inside table cells 5.5.0 _ July 24, 2020 \u00b6 Rewrite of entire documentation Rewrite of syntax highlighting to be customizable with CSS variables Improved syntax highlighting to work with light and dark theme Improved slate color scheme to be more customizable and easier on the eyes Added licenses of icon sets to distribution files Fixed stale document titles in Google Analytics when using instant loading Fixed width of previous and next footer links for tablet and above Fixed issues with top scroll margin for footnotes Fixed top margin for tabbed content when using a JavaScript highlighter Deprecated metadata-based redirects, source links and heroes 5.4.0 _ June 29, 2020 \u00b6 Added support to wrap searches in quotes to switch from OR to AND Fixed highlighting of numbers in search results 5.3.3 _ June 24, 2020 \u00b6 Added Bengali translations Fixed #1773 : Search for numbers does not return any result (regression) 5.3.2 _ June 21, 2020 \u00b6 Improved search typeahead experience with non-Latin characters Fixed #1753 : Japanese search doesn't work anymore 5.3.1 _ June 20, 2020 \u00b6 Fixed #1761 : Duplication of search worker when subscribing to observable 5.3.0 _ June 15, 2020 \u00b6 Added support for color schemes based on user preference Fixed #1755 : Tokenizer separator setting ignored 5.2.3 _ June 6, 2020 \u00b6 Improved search typeahead behavior for some languages ( de , fr , ...) Improved styles for scrollbars on Firefox Fixed #1741 : Removed preconnect hint for Google Analytics 5.2.2 _ May 26, 2020 \u00b6 Fixed #1728 : Legacy Edge doesn't support deg values in hsla colors 5.2.1 _ May 22, 2020 \u00b6 Fixed color of links in table headers, e.g. footnotes Fixed color scheme not being applied without primary or accent color Fixed hover delay for links inside code blocks 5.2.0 _ May 18, 2020 \u00b6 Added color schemes implementation + dark mode Fixed #1583 : Missing option for separate link colors 5.1.7 _ May 16, 2020 \u00b6 Added keyboard focus support for overflowing code blocks Fixed #1696 : Infinite loop in some cases when using instant loading 5.1.6 _ May 9, 2020 \u00b6 Added Burmese translations Added general anchor offset solution using scroll-margin-top Fixed #1653 : Instant loading shouldn't intercept links to *.html files 5.1.5 _ May 3, 2020 \u00b6 Added name attribute for social links to set link title Fixed #1623 : Allow arbitrary links in social links Fixed #1664 : Height of iframe is not adjustable Fixed #1667 : Sidebars are scrolled to bottom on load (bug in Chrome 81+) 5.1.4 _ April 30, 2020 \u00b6 Switched to @mdi/svg Material Design icon package Fixed #1655 : Navigation may disappear after switching viewports Fixed #1659 : Unnecessary scrollbar for search results on Windows Fixed occasional distortions for images with explicit dimensions Fixed errors in German translations 5.1.3 _ April 26, 2020 \u00b6 Fixed overflowing content area after switch to flexbox 5.1.2 _ April 26, 2020 \u00b6 Added status information to search observable Added status information to search modal Removed announcement bar from print media Removed media query packing logic due to race conditions Fixed #1520 : Gracefully disable search on file:// if Worker fails Fixed re-submission of query after search is initialized Fixed jitter of sidebars on all browsers by switching to sticky 5.1.1 _ April 17, 2020 \u00b6 Added new FontAwesome icons Fixed #1609 : Instant loading doesn't honor target=_blank Fixed GitHub stars count rounding errors Fixed GitLab stars count retrieval 5.1.0 _ April 12, 2020 \u00b6 Added support for icons from Markdown through mkdocs-material-extensions 5.0.2 _ April 10, 2020 \u00b6 Added CSS source maps to distribution files Fixed errors in Chinese (Traditional) translations Fixed creation of stale directory on installation from git Improved overflow scrolling behavior on iOS (reduced bundle size by 4kb ) 5.0.1 _ April 7, 2020 \u00b6 Fixed syntax error in Spanish translation 5.0.0 _ April 7, 2020 \u00b6 Reactive architecture \u2013 try app.dialog$.next(\"Hi!\") in the console Instant loading \u2013 make Material behave like a Single Page Application Improved CSS customization with CSS variables \u2013 set your brand's colors Improved CSS resilience, e.g. proper sidebar locking for customized headers Improved icon integration and configuration \u2013 now including over 5k icons Added possibility to use any icon for logo, repository and social links Search UI does not freeze anymore (moved to web worker) Search index built only once when using instant loading Improved extensible keyboard handling Support for prebuilt search indexes Support for displaying stars and forks for GitLab repositories Support for scroll snapping of sidebars and search results Reduced HTML and CSS footprint due to deprecation of Internet Explorer support Slight facelifting of some UI elements (admonitions, tables, ...) 4.6.3 _ February 14, 2020 \u00b6 Removed optional third-party plugins from requirements.txt Updated Docker image to contain all supported third-party plugins 4.6.2 _ February 8, 2020 \u00b6 Added Romanian translations Fixed #1451 : Inconsistent spacing for fenced code blocks 4.6.1 _ February 8, 2020 \u00b6 Fixed #1324 : Metadata author only rendering first character Fixed #1393 : Set tabindex to 0 for skip to content link Fixed code blocks after Markdown 3.2 release Fixed errors in Japanese translations Improved Google Lighthouse score 4.6.0 _ December 11, 2019 \u00b6 Added support for mkdocs-git-revision-date-localized-plugin Fixed invalid character in Google Fonts URL 4.5.1 _ December 2, 2019 \u00b6 Added Thai translations Fixed missing assets in GitHub release .zip and .tar.gz 4.5.0 _ November 16, 2019 \u00b6 Fixed #1330 : Upgraded EmojiOne to Tweomji due to licensing issues Fixed #1339 : Temporarily pinned PyMdown and Markdown due to Fixed errors in Greek translations Improved GitHub statistics retrieval 4.4.3 _ October 3, 2019 \u00b6 Added Estonian translations Fixed removal of copyright banners in minified JavaScript Removed unnecessary title attributes from links in table of contents 4.4.2 _ August 27, 2019 \u00b6 Added Afrikaans translations Fixed broken page title when h1 contained HTML tags Improved accessibility for IE users Removed unnecessary title attributes from links in navigation 4.4.1 _ August 22, 2019 \u00b6 Added support for black as a primary color Fixed broken footer bar when h1 contained HTML tags 4.4.0 _ June 15, 2019 \u00b6 Added Slovenian translations Reverted template minification in favor of mkdocs-minify-plugin Fixed #1114 : Tabs don't reappear when default font-size is smaller than 16 4.3.1 _ May 23, 2019 \u00b6 Fixed spelling error in Danish translations 4.3.0 _ May 17, 2019 \u00b6 Added support for changing header through metadata title property Added font-display: swap to Google Font loading logic Removed whitespace from templates, saving 4kb ( .7kb gzipped) per request Fixed alignment of repository icons on tablet and desktop 4.2.0 _ April 28, 2019 \u00b6 Added Norwegian (Nynorsk) translations Fixed loss of focus in non-form input elements due to search hotkeys Fixed #1067 : Search hotkeys not working for mobile/tablet screensize Fixed #1068 : Search not correctly aligned for tablet screensize 4.1.2 _ April 16, 2019 \u00b6 Fixed #1072 : HTML tags appearing in navigation link titles 4.1.1 _ March 28, 2019 \u00b6 Fixed minor CSS errors detected during validation 4.1.0 _ March 22, 2019 \u00b6 Fixed #1023 : Search for Asian languages broken after Lunr.js update Fixed #1026 : contenteditable elements loose focus on hotkeys 4.0.2 _ March 1, 2019 \u00b6 Fixed #1012 : HTML character entities appear in search result titles 4.0.1 _ February 13, 2019 \u00b6 Fixed #762 , #816 : Glitch in sidebar when collapsing items Fixed #869 : Automatically expand details before printing 4.0.0 _ February 13, 2019 \u00b6 Added background on hover for table rows Removed Google Tag Manager and reverted to Google Analytics Removed blocks in partials - Jinja doesn't support them Fixed #911 : Chrome breaks layout if system language is Chinese ( BREAKING ) Fixed #976 : Removed FastClick 3.3.0 _ January 29, 2019 \u00b6 Moved Google Analytics integration into head using Google Tag Manager Fixed #972 : Unicode slugifier breaks table of contents blur on scroll Fixed #974 : Additional links in table of contents break blur on scroll 3.2.0 _ December 28, 2018 \u00b6 Added support for redirects using metadata refresh Fixed #921 : Load Google Analytics snippet asynchronously 3.1.0 _ November 17, 2018 \u00b6 Added support for Progressive Web App Manifest Fixed #915 : Search bug in Safari (upgraded Lunr.js) 3.0.6 _ October 26, 2018 \u00b6 Added Taiwanese translations Fixed #906 : JavaScript code blocks evaluated in search results 3.0.5 _ October 23, 2018 \u00b6 Added Croatian and Indonesian translations Fixed #899 : Skip-to-content link invalid from 2 nd level on Fixed #902 : Missing URL filter in footer for FontAwesome link 3.0.4 _ September 3, 2018 \u00b6 Updated Dutch translations Fixed #856 : Removed preconnect meta tag if Google Fonts are disabled 3.0.3 _ August 7, 2018 \u00b6 Fixed #841 : Additional path levels for extra CSS and JS 3.0.2 _ August 6, 2018 \u00b6 Fixed #839 : Lunr.js stemmer imports incorrect 3.0.1 _ August 5, 2018 \u00b6 Fixed #838 : Search result links incorrect 3.0.0 _ August 5, 2018 \u00b6 Upgraded MkDocs to 1.0 ( BREAKING ) Upgraded Python in official Docker image to 3.6 Added Serbian and Serbo-Croatian translations 2.9.4 _ July 29, 2018 \u00b6 Fixed build error after MkDocs upgrade 2.9.3 _ July 29, 2018 \u00b6 Added link to home for logo in drawer Fixed dependency problems between MkDocs and Tornado 2.9.2 _ June 29, 2018 \u00b6 Added Hindi and Czech translations 2.9.1 _ June 18, 2018 \u00b6 Added support for different spellings for theme color Fixed #799 : Added support for webfont minification in production Fixed #800 : Added .highlighttable as an alias for .codehilitetable 2.9.0 _ June 13, 2018 \u00b6 Added support for theme color on Android Fixed #796 : Rendering of nested tabbed code blocks 2.8.0 _ June 10, 2018 \u00b6 Added support for grouping code blocks with tabs Added Material and FontAwesome icon fonts to distribution files (GDPR) Added note on compliance with GDPR Added Slovak translations Fixed #790 : Prefixed id attributes with __ to avoid name clashes 2.7.3 _ April 26, 2018 \u00b6 Added Finnish translations 2.7.2 _ April 9, 2018 \u00b6 Fixed rendering issue for details on Edge 2.7.1 _ March 21, 2018 \u00b6 Added Galician translations Fixed #730 : Scroll chasing error on home page if Disqus is enabled Fixed #736 : Reset drawer and search upon back button invocation 2.7.0 _ March 6, 2018 \u00b6 Added ability to set absolute URL for logo Added Hebrew translations 2.6.6 _ February 22, 2018 \u00b6 Added preconnect for Google Fonts for faster loading Fixed #710 : With tabs sidebar disappears if JavaScript is not available 2.6.5 _ February 22, 2018 \u00b6 Reverted --dev-addr flag removal from Dockerfile 2.6.4 _ February 21, 2018 \u00b6 Added Catalan translations Fixed incorrect margins for buttons in Firefox and Safari Replaced package manager yarn with npm 5.6 Reverted GitHub stars rounding method Removed --dev-addr flag from Dockerfile for Windows compatibility 2.6.3 _ February 18, 2018 \u00b6 Added Vietnamese translations 2.6.2 _ February 12, 2018 \u00b6 Added Arabic translations Fixed incorrect rounding of amount of GitHub stars Fixed double-layered borders for tables 2.6.1 _ February 11, 2018 \u00b6 Added ability to override Disqus integration using metadata Fixed #690 : Duplicate slashes in source file URLs Fixed #696 : Active page highlight not working with default palette Adjusted German translations 2.6.0 _ February 2, 2018 \u00b6 Moved default search configuration to default translation (English) Added support to automatically set text direction from translation Added support to disable search stop word filter in translation Added support to disable search trimmer in translation Added Persian translations Fixed support for Polish search Fixed disappearing GitHub, GitLab and Bitbucket repository icons 2.5.5 _ January 31, 2018 \u00b6 Added Hungarian translations 2.5.4 _ January 29, 2018 \u00b6 Fixed #683 : gh-deploy fails inside Docker 2.5.3 _ January 25, 2018 \u00b6 Added Ukrainian translations 2.5.2 _ January 22, 2018 \u00b6 Added default search language mappings for all localizations Fixed #673 : Error loading non-existent search language Fixed #675 : Uncaught reference error when search plugin disabled 2.5.1 _ January 20, 2018 \u00b6 Fixed permalink for main headline Improved missing translation handling with English as a fallback Improved accessibility with skip-to-content link 2.5.0 _ January 13, 2018 \u00b6 Added support for right-to-left languages 2.4.0 _ January 11, 2018 \u00b6 Added focus state for clipboard buttons Fixed #400 : Search bar steals tab focus Fixed search not closing on Enter when result is selected Fixed search not closing when losing focus due to Tab Fixed collapsed navigation links getting focus Fixed outline being cut off on Tab focus of navigation links Fixed bug with first search result navigation being ignored Removed search result navigation via Tab (use Up and Down ) Removed outline resets for links Improved general tabbing behavior on desktop 2.3.0 _ January 9, 2018 \u00b6 Added example (synonym: snippet ) style for admonitions Added synonym abstract for summary style for admonitions 2.2.6 _ December 27, 2017 \u00b6 Added Turkish translations Fixed unclickable area below header in case JavaScript is not available 2.2.5 _ December 18, 2017 \u00b6 Fixed #639 : Broken default favicon 2.2.4 _ December 18, 2017 \u00b6 Fixed #638 : Build breaks with Jinja < 2.9 2.2.3 _ December 13, 2017 \u00b6 Fixed #630 : Admonition sets padding on any last child Adjusted Chinese (Traditional) translations 2.2.2 _ December 8, 2017 \u00b6 Added Dutch translations Adjusted targeted link and footnote offsets Simplified admonition styles and fixed padding bug 2.2.1 _ December 2, 2017 \u00b6 Fixed #616 : Minor styling error with title-only admonitions Removed border for table of contents and improved spacing 2.2.0 _ November 22, 2017 \u00b6 Added support for hero teaser Added Portuguese translations Fixed #586 : Footnote backref target offset regression Fixed #605 : Search stemmers not correctly loaded 2.1.1 _ November 21, 2017 \u00b6 Replaced deprecated babel-preset-es2015 with babel-preset-env Refactored Gulp build pipeline with Webpack Removed right border on sidebars Fixed broken color transition on header 2.1.0 _ November 19, 2017 \u00b6 Added support for white as a primary color Added support for sliding site name and title Fixed redundant clipboard button when using line numbers on code blocks Improved header appearance by making it taller Improved tabs appearance Improved CSS customizability by leveraging inheritance Removed scroll shadows via background-attachment 2.0.4 _ November 5, 2017 \u00b6 Fixed details not opening with footnote reference 2.0.3 _ November 5, 2017 \u00b6 Added Japanese translations Fixed #540 : Jumping to anchor inside details doesn't open it Fixed active link colors in footer 2.0.2 _ November 1, 2017 \u00b6 Added Russian translations Fixed #542 : Horizontal scrollbar between 1220px and 1234px Fixed #553 : Metadata values only rendering first character Fixed #558 : Flash of unstyled content Fixed favicon regression caused by deprecation upstream 2.0.1 _ October 31, 2017 \u00b6 Fixed error when initializing search Fixed styles for link to edit the current page Fixed styles on nested admonition in details 2.0.0 _ October 31, 2017 \u00b6 Upgraded MkDocs to 0.17.1 ( BREAKING ) Added support for easier configuration of search tokenizer Added support to disable search Added Korean translations 1.12.2 _ October 26, 2017 \u00b6 Added Italian, Norwegian, French and Chinese translations 1.12.1 _ October 22, 2017 \u00b6 Added Polish, Swedish and Spanish translations Improved downward compatibility with custom partials Temporarily pinned MkDocs version within Docker image to 0.16.3 Fixed #519 : Missing theme configuration file 1.12.0 _ October 20, 2017 \u00b6 Added support for setting language(s) via mkdocs.yml Added support for default localization Added German and Danish translations Fixed #374 : Search bar misalignment on big screens 1.11.0 _ October 19, 2017 \u00b6 Added localization to clipboard Refactored localization logic 1.10.4 _ October 18, 2017 \u00b6 Improved print styles of code blocks Improved search UX (don't close on enter if no selection) Fixed #495 : Vertical scrollbar on short pages 1.10.3 _ October 11, 2017 \u00b6 Fixed #484 : Vertical scrollbar on some MathJax formulas Fixed #483 : Footnote backref target offset regression 1.10.2 _ October 6, 2017 \u00b6 Fixed #468 : Sidebar shows scrollbar if content is shorter (in Safari) 1.10.1 _ September 14, 2017 \u00b6 Fixed #455 : Bold code blocks rendered with normal font weight 1.10.0 _ September 1, 2017 \u00b6 Added support to make logo default icon configurable Fixed uninitialized overflow scrolling on main pane for iOS Fixed error in mobile navigation in case JavaScript is not available Fixed incorrect color transition for nested panes in mobile navigation Improved checkbox styles for Tasklist from PyMdown Extension package 1.9.0 _ August 29, 2017 \u00b6 Added info (synonym: todo ) style for admonitions Added question (synonym: help , faq ) style for admonitions Added support for Details from PyMdown Extensions package Improved admonition styles to match details Improved styles for social links in footer Replaced ligatures with Unicode code points to avoid broken layout Upgraded PyMdown Extensions package dependency to >= 3.4 1.8.1 _ August 7, 2017 \u00b6 Fixed #421 : Missing pagination for GitHub API 1.8.0 _ August 2, 2017 \u00b6 Added support for lazy-loading of search results for better performance Added support for customization of search tokenizer/separator Fixed #424 : Search doesn't handle capital letters anymore Fixed #419 : Search doesn't work on whole words 1.7.5 _ July 25, 2017 \u00b6 Fixed #398 : Forms broken due to search shortcuts Improved search overall user experience Improved search matching and highlighting Improved search accessibility 1.7.4 _ June 21, 2017 \u00b6 Fixed functional link colors in table of contents for active palette Fixed #368 : Compatibility issues with IE11 1.7.3 _ June 7, 2017 \u00b6 Fixed error when setting language to Japanese for site search 1.7.2 _ June 6, 2017 \u00b6 Fixed offset of search box when repo_url is not set Fixed non-disappearing tooltip 1.7.1 _ June 1, 2017 \u00b6 Fixed wrong z-index order of header, overlay and drawer Fixed wrong offset of targeted footnote back references 1.7.0 _ June 1, 2017 \u00b6 Added \"copy to clipboard\" buttons to code blocks Added support for multilingual site search Fixed search term highlighting for non-latin languages 1.6.4 _ May 24, 2017 \u00b6 Fixed #337 : JavaScript error for GitHub organization URLs 1.6.3 _ May 16, 2017 \u00b6 Fixed #329 : Broken source stats for private or unknown GitHub repos 1.6.2 _ May 15, 2017 \u00b6 Fixed #316 : Fatal error for git clone on Windows Fixed #320 : Chrome 58 creates double underline for abbr tags Fixed #323 : Ligatures rendered inside code blocks Fixed miscalculated sidebar height due to missing margin collapse Changed deprecated MathJax CDN to Cloudflare 1.6.1 _ April 23, 2017 \u00b6 Fixed following of active/focused element if search input is focused Fixed layer order of search component elements 1.6.0 _ April 22, 2017 \u00b6 Added build test for Docker image on Travis Added search overlay for better user experience (focus) Added language from localizations to html tag Fixed #270 : source links broken for absolute URLs Fixed missing top spacing for first targeted element in content Fixed too small footnote divider when using larger font sizes 1.5.5 _ April 20, 2017 \u00b6 Fixed #282 : Browser search ( Meta + F ) is hijacked 1.5.4 _ April 8, 2017 \u00b6 Fixed broken highlighting for two or more search terms Fixed missing search results when only a h1 is present Fixed unresponsive overlay on Android 1.5.3 _ April 7, 2017 \u00b6 Fixed deprecated calls for template variables Fixed wrong palette color for focused search result Fixed JavaScript errors on 404 page Fixed missing top spacing on 404 page Fixed missing right spacing on overflow of source container 1.5.2 _ April 5, 2017 \u00b6 Added requirements as explicit dependencies in setup.py Fixed non-synchronized transitions in search form 1.5.1 _ March 30, 2017 \u00b6 Fixed rendering and offset of targeted footnotes Fixed #238 : Link on logo is not set to site_url 1.5.0 _ March 24, 2017 \u00b6 Added support for localization of search placeholder Added keyboard events for quick access of search Added keyboard events for search control Added opacity on hover for search buttons Added git hook to skip CI build on non-src changes Fixed non-resetting search placeholder when input is cleared Fixed error for unescaped parentheses in search term Fixed #229 : Button to clear search missing Fixed #231 : Escape key doesn't exit search Removed old-style figures from font feature settings 1.4.1 _ March 16, 2017 \u00b6 Fixed invalid destructuring attempt on NodeList (in Safari, Edge, IE) 1.4.0 _ March 16, 2017 \u00b6 Added support for grouping searched sections by documents Added support for highlighting of search terms Added support for localization of search results Fixed #216 : table of contents icon doesn't show if h1 is not present Reworked style and layout of search results for better usability 1.3.0 _ March 11, 2017 \u00b6 Added support for page-specific title and description using metadata Added support for linking source files to documentation Fixed jitter and offset of sidebar when zooming browser Fixed incorrectly initialized tablet sidebar height Fixed regression for #1 : GitHub stars break if repo_url ends with a / Fixed undesired white line below copyright footer due to base font scaling Fixed issue with whitespace in path for scripts Fixed #205 : support non-fixed (static) header Refactored footnote references for better visibility Reduced repaints to a minimum for non-tabs configuration Reduced contrast of edit button (slightly) 1.2.0 _ March 3, 2017 \u00b6 Added quote (synonym: cite ) style for admonitions Added help message to build pipeline Fixed wrong navigation link colors when applying palette Fixed #197 : Link missing in tabs navigation on deeply nested items Removed unnecessary dev dependencies 1.1.1 _ February 26, 2017 \u00b6 Fixed incorrectly displayed nested lists when using tabs 1.1.0 _ February 26, 2017 \u00b6 Added tabs navigation feature (optional) Added Disqus integration (optional) Added a high resolution Favicon with the new logo Added static type checking using Facebook's Flow Fixed #173 : Dictionary elements have no bottom spacing Fixed #175 : Tables cannot be set to 100% width Fixed race conditions in build related to asset revisioning Fixed accidentally re-introduced Permalink on top-level headline Fixed alignment of logo in drawer on IE11 Refactored styles related to tables Refactored and automated Docker build and PyPI release Refactored build scripts 1.0.5 _ February 18, 2017 \u00b6 Fixed #153 : Sidebar flows out of constrained area in Chrome 56 Fixed #159 : Footer jitter due to JavaScript if content is short 1.0.4 _ February 16, 2017 \u00b6 Fixed #142 : Documentation build errors if h1 is defined as raw HTML Fixed #164 : PyPI release does not build and install Fixed offsets of targeted headlines Increased sidebar font size by 0.12rem 1.0.3 _ January 22, 2017 \u00b6 Fixed #117 : Table of contents items don't blur on fast scrolling Refactored sidebar positioning logic Further reduction of repaints 1.0.2 _ January 15, 2017 \u00b6 Fixed #108 : Horizontal scrollbar in content area 1.0.1 _ January 14, 2017 \u00b6 Fixed massive repaints happening when scrolling Fixed footer back reference positions in case of overflow Fixed header logo from showing when the menu icon is rendered Changed scrollbar behavior to only show when content overflows 1.0.0 _ January 13, 2017 \u00b6 Introduced Webpack for more sophisticated JavaScript bundling Introduced ESLint and Stylelint for code style checks Introduced more accurate Material Design colors and shadows Introduced modular scales for harmonic font sizing Introduced git-hooks for better development workflow Rewrite of CSS using the BEM methodology and SassDoc guidelines Rewrite of JavaScript using ES6 and Babel as a transpiler Rewrite of Admonition, Permalinks and CodeHilite integration Rewrite of the complete typographical system Rewrite of Gulp asset pipeline in ES6 and separation of tasks Removed Bower as a dependency in favor of NPM Removed custom icon build in favor of the Material Design icon set Removed _blank targets on links due to vulnerability: http://bit.ly/1Mk2Rtw Removed unversioned assets from build directory Restructured templates into base templates and partials Added build and watch scripts in package.json Added support for Metadata and Footnotes Markdown extensions Added support for PyMdown Extensions package Added support for collapsible sections in navigation Added support for separate table of contents Added support for better accessibility through REM-based layout Added icons for GitHub, GitLab and BitBucket integrations Added more detailed documentation on specimen, extensions etc. Added a 404.html error page for deployment on GitHub Pages Fixed live reload chain in watch mode when saving a template Fixed variable references to work with MkDocs 0.16 0.2.4 _ June 26, 2016 \u00b6 Fixed improperly set default favicon Fixed #33 : Protocol relative URL for webfonts doesn't work with file:// Fixed #34 : IE11 on Windows 7 doesn't honor max-width on main tag Fixed #35 : Add styling for blockquotes 0.2.3 _ May 16, 2016 \u00b6 Fixed #25 : Highlight inline fenced blocks Fixed #26 : Better highlighting for keystrokes Fixed #30 : Suboptimal syntax highlighting for PHP 0.2.2 _ March 20, 2016 \u00b6 Fixed #15 : Document Pygments dependency for CodeHilite Fixed #16 : Favicon could not be set through mkdocs.yml Fixed #17 : Put version into own container for styling Fixed #20 : Fix rounded borders for tables 0.2.1 _ March 12, 2016 \u00b6 Fixed #10 : Invisible header after closing search bar with ESC key Fixed #13 : Table cells don't wrap Fixed empty list in table of contents when no headline is defined Corrected wrong path for static asset monitoring in Gulpfile.js Set up tracking of site search for Google Analytics 0.2.0 _ February 24, 2016 \u00b6 Fixed #6 : Include multiple color palettes via mkdocs.yml Fixed #7 : Better colors for links inside admonition notes and warnings Fixed #9 : Text for prev/next footer navigation should be customizable Refactored templates (replaced if / else with modifiers where possible) 0.1.3 _ February 21, 2016 \u00b6 Fixed #3 : Ordered lists within an unordered list have ::before content Fixed #4 : Click on Logo/Title without Github-Repository: \"None\" Fixed #5 : Page without headlines renders empty list in table of contents Moved Modernizr to top to ensure basic usability in IE8 0.1.2 _ February 16, 2016 \u00b6 Fixed styles for deep navigational hierarchies Fixed webfont delivery problem when hosted in subdirectories Fixed print styles in mobile/tablet configuration Added option to configure fonts in mkdocs.yml with fallbacks Changed styles for admonition notes and warnings Set download link to latest version if available Set up tracking of outgoing links and actions for Google Analytics 0.1.1 _ February 11, 2016 \u00b6 Fixed #1 : GitHub stars don't work if the repo_url ends with a / Updated NPM and Bower dependencies to most recent versions Changed footer/copyright link to Material theme to GitHub pages Made MkDocs building/serving in build process optional Set up continuous integration with Travis 0.1.0 _ February 9, 2016 \u00b6 Initial release","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#material-for-mkdocs","text":"","title":"Material for MkDocs"},{"location":"changelog/#724-_-august-11-2021","text":"Fixed #2926 : Version selector not working (7.2.3 regression) Fixed #2929 : Missing CSS class for banner (consistency with Insiders)","title":"7.2.4 _ August 11, 2021"},{"location":"changelog/#723-_-august-9-2021","text":"Slight facelift of data tables, now closer to Material Design Fixed instant loading not respecting clicks on search results Fixed #2881 : Invalid anchor offsets when using instant loading","title":"7.2.3 _ August 9, 2021"},{"location":"changelog/#722-_-july-31-2021","text":"Updated Korean translations Fixed #2879 : Search highlighting does not properly escape HTML","title":"7.2.2 _ July 31, 2021"},{"location":"changelog/#721-_-july-25-2021","text":"Fixed #2862 : Back-to-top button overlays active search bar","title":"7.2.1 _ July 25, 2021"},{"location":"changelog/#720-_-july-21-2021","text":"Added support for search suggestions to save keystrokes Added support for search highlighting Added support for search sharing (i.e. deep linking)","title":"7.2.0 _ July 21, 2021"},{"location":"changelog/#7111-_-july-18-2021","text":"Updated Spanish and Galician translations","title":"7.1.11 _ July 18, 2021"},{"location":"changelog/#7110-_-july-10-2021","text":"Refactored appearance of back-to-top button Fixed graceful handling of search when browsing locally","title":"7.1.10 _ July 10, 2021"},{"location":"changelog/#719-_-june-25-2021","text":"Improved search language support for Thai and Hindi Fixed #2761 : License comments lined up at end of file","title":"7.1.9 _ June 25, 2021"},{"location":"changelog/#718-_-june-12-2021","text":"Refactored analytics integration (because of MkDocs 1.2) Added support for Google Analytics 4 ( gtag.js ) Fixed missing escape for aria-label in footer links","title":"7.1.8 _ June 12, 2021"},{"location":"changelog/#717-_-june-6-2021","text":"Improved screen reader support","title":"7.1.7 _ June 6, 2021"},{"location":"changelog/#716-_-may-30-2021","text":"Deprecated seealso admonition qualifier Added Mongolian and updated Chinese translations Fixed #2429 : Version selector not touch-friendly on Android devices Fixed #2703 : Printed 'Initializing search' albeit ready on mobile","title":"7.1.6 _ May 30, 2021"},{"location":"changelog/#715-_-may-19-2021","text":"Fixed #2655 : Details breaking page margins on print","title":"7.1.5 _ May 19, 2021"},{"location":"changelog/#714-_-may-6-2021","text":"Added support for git-revision-date-localized plugin creation date Improved footnote styles on :target and :focus","title":"7.1.4 _ May 6, 2021"},{"location":"changelog/#713-_-april-24-2021","text":"Fixed #2586 : Empty table of contents shown (7.1.2 regression)","title":"7.1.3 _ April 24, 2021"},{"location":"changelog/#712-_-april-18-2021","text":"Fixed #2554 : List markers sometimes overlap floated elements Fixed #2563 : Adding a class to a h1 breaks the table of contents Fixed #2566 : Back-to-top button clickable when invisible","title":"7.1.2 _ April 18, 2021"},{"location":"changelog/#711-_-april-10-2021","text":"Fixed #2501 : Nested definition lists compound bottom margin Fixed #2508 : Switch extracopyright block to template variable Fixed #2533 : Search (and other parts) not working in Safari <14 Fixed #2538 : Visual quirk when opening language selector","title":"7.1.1 _ April 10, 2021"},{"location":"changelog/#710-_-march-29-2021","text":"Added support for back-to-top button Added support for color palette toggle Added latest release to repository info (GitHub) Slight facelift of repository info (lighter fonts, spacing and icons)","title":"7.1.0 _ March 29, 2021"},{"location":"changelog/#707-_-march-28-2021","text":"Updated Hungarian translations Fixed #2466 : Docker image not based on latest Python and Alpine Fixed #2488 : Inconsistent header shadow behavior Fixed #2492 : Inline code blocks in admonition titles missing background","title":"7.0.7 _ March 28, 2021"},{"location":"changelog/#706-_-march-14-2021","text":"Added trailing slash to version selector URL Added support for out-of-order anchors in table of contents Added extra.homepage option to link logo to arbitrary URL Improved security of Docker image (always update apk) Fixed horizontal spacing for nested inline admonitions Fixed text color of nested code blocks inside links Fixed version selector to always use version title Fixed logo link when using versioning with instant loading","title":"7.0.6 _ March 14, 2021"},{"location":"changelog/#705-_-march-7-2021","text":"Added extracopyright block to allow for custom copyright info Fixed evaluation of third-party scripts when using instant loading Fixed edge cases when using instant loading without directory URLs Fixed handling of version selector when using instant loading Fixed regression with header title not being updated correctly Fixed expanded sections not opening on first click (7.0.4 regression)","title":"7.0.5 _ March 7, 2021"},{"location":"changelog/#704-_-march-4-2021","text":"Added Icelandic translations Fixed #2386 : Section close requires two clicks (navigation expansion) Fixed console error when search is disabled (7.0.0 regression) Fixed localsearch integration (7.0.0 regression)","title":"7.0.4 _ March 4, 2021"},{"location":"changelog/#703-_-february-26-2021","text":"Fixed JavaScript errors in older browsers (target ES2020 -> ES2015)","title":"7.0.3 _ February 26, 2021"},{"location":"changelog/#702-_-february-25-2021","text":"Fixed #2343 : Invalid source map URLs for JS and CSS files Fixed #2347 : Version selector missing when using versioning","title":"7.0.2 _ February 25, 2021"},{"location":"changelog/#701-_-february-24-2021","text":"Fixed #2334 : Google Analytics triggers page view twice (7.0.0 regression) Fixed #2336 : Details bleed into inline admonitions Fixed #2337 : Images don't align correctly (7.0.0 regression)","title":"7.0.1 _ February 24, 2021"},{"location":"changelog/#700-_-february-22-2021","text":"Added support for deploying multiple versions Added support for integrating a language selector Added support for rendering admonitions as inline blocks Rewrite of the underlying reactive architecture Removed Webpack in favor of reactive build strategy (-480 dependencies) Fixed keyboard navigation for code blocks after content tabs switch","title":"7.0.0 _ February 22, 2021"},{"location":"changelog/#628-_-february-4-2021","text":"Updated Japanese and Polish translations Fixed #2261 : Print dialog auto-closing when using instant loading","title":"6.2.8 _ February 4, 2021"},{"location":"changelog/#627-_-january-31-2021","text":"Fixed #2251 : Updated Docker image to latest Alpine Linux","title":"6.2.7 _ January 31, 2021"},{"location":"changelog/#626-_-january-26-2021","text":"Added Bulgarian translations Fixed #2233 : Search not shown when using header autohiding","title":"6.2.6 _ January 26, 2021"},{"location":"changelog/#625-_-january-17-2021","text":"Fixed syntax error in Swedish translations Optimized navigation partials to improve build speed for huge docs","title":"6.2.5 _ January 17, 2021"},{"location":"changelog/#624-_-january-9-2021","text":"Fixed #2156 : Missing syntax highlighting for binary numbers Fixed #2186 : Disqus showing on 404 page","title":"6.2.4 _ January 9, 2021"},{"location":"changelog/#623-_-december-27-2020","text":"Added back hidden overflow on root container Fixed #2142 : MathJax formulas sometimes have vertical scrollbars","title":"6.2.3 _ December 27, 2020"},{"location":"changelog/#622-_-december-22-2020","text":"Removed Markdown version range limit (6.2.0 regression)","title":"6.2.2 _ December 22, 2020"},{"location":"changelog/#621-_-december-22-2020","text":"Fixed all import and asset paths in templates (6.2.0 regression) Downgraded webpack-asset-manifest-plugin - broke all asset paths","title":"6.2.1 _ December 22, 2020"},{"location":"changelog/#620-_-december-22-2020","text":"Added support for navigation sections Added support for navigation expansion Added support for integrating table of contents into navigation Added support for autohiding header on scroll Added support for hiding navigation and table of contents per page Added support for arbitrary items in navigation tabs Refactored navigation tabs to simplify grouping behavior Fixed anchor offset for permalinks in Safari (partial revert) Fixed #2098 : Active tab sometimes not highlighted correctly Improved appearance for horizontal rulers Improved Spanish and Swedish translations","title":"6.2.0 _ December 22, 2020"},{"location":"changelog/#617-_-december-6-2020","text":"Fixed #2081 : Fixed stats for private GitHub repositories Fixed alignment for admonition icon alignment for right-to-left languages","title":"6.1.7 _ December 6, 2020"},{"location":"changelog/#616-_-november-22-2020","text":"Fixed #2048 : Math formulas show scrollbars (Windows)","title":"6.1.6 _ November 22, 2020"},{"location":"changelog/#615-_-november-15-2020","text":"Fixed search reset button not showing/hiding correctly","title":"6.1.5 _ November 15, 2020"},{"location":"changelog/#614-_-november-7-2020","text":"Fixed sidebar jitter when scrolling footer into view","title":"6.1.4 _ November 7, 2020"},{"location":"changelog/#613-_-november-5-2020","text":"Added support for keywords meta tag Fixed #2027 : Line numbers don't scale with smaller font size Fixed link colors for black and white on slate color scheme Removed focus outline on scrolling code blocks for pointer devices","title":"6.1.3 _ November 5, 2020"},{"location":"changelog/#612-_-october-31-2020","text":"Fixed sizing of icons in admonitions, task lists, etc. (6.1.1 regression)","title":"6.1.2 _ October 31, 2020"},{"location":"changelog/#611-_-october-31-2020","text":"Fixed #2019 : Page title not correctly updated when using instant loading","title":"6.1.1 _ October 31, 2020"},{"location":"changelog/#610-_-october-17-2020","text":"Fixed #1973 : Added support for printing in dark mode Fixed #1974 : Added support for printing content tabs Fixed #1995 : Improved customizability of details extension","title":"6.1.0 _ October 17, 2020"},{"location":"changelog/#602-_-october-4-2020","text":"Added Georgian translations Added escaping for link title attributes where necessary Fixed #1956 : Pages with whitespace in names have invalid links in search Removed unnecessary (duplicated) link title attributes","title":"6.0.2 _ October 4, 2020"},{"location":"changelog/#601-_-september-26-2020","text":"Fixed stemmer support for file:// protocol through iframe-worker Fixed details marker showing for search result in Firefox Fixed tabbing behavior when search query is not empty Switched TypeScript compilation target to ES2015 Reduced size of JavaScript by 30% ( 176kb \u2192 124kb ) Removed mkdocs and readthedocs themes from Docker image","title":"6.0.1 _ September 26, 2020"},{"location":"changelog/#600-_-september-25-2020","text":"Improved search result look and feel Improved search result stability while typing Improved search result grouping (pages + headings) Improved search result relevance and scoring Added display of missing query terms to search results Reduced size of vendor bundle by 25% ( 84kb \u2192 67kb ) Reduced size of the Docker image to improve CI build performance Removed hero partial in favor of custom implementation Removed deprecated front matter features","title":"6.0.0 _ September 25, 2020"},{"location":"changelog/#5514-_-september-23-2020","text":"Improved spacing around image captions Fixed #1939 : Long tables cause header overlap in print view","title":"5.5.14 _ September 23, 2020"},{"location":"changelog/#5513-_-september-19-2020","text":"Improved abbreviations on touch devices","title":"5.5.13 _ September 19, 2020"},{"location":"changelog/#5512-_-august-31-2020","text":"Fixed #1638 : occasional 404 for images when using instant loading","title":"5.5.12 _ August 31, 2020"},{"location":"changelog/#5511-_-august-28-2020","text":"Fixed Disqus integration, as the minifier killed the config","title":"5.5.11 _ August 28, 2020"},{"location":"changelog/#5510-_-august-28-2020","text":"Improved rendering by moving Disqus integration after page load Fixed #1887 : Moved navigation icons to CSS to reduce size of HTML","title":"5.5.10 _ August 28, 2020"},{"location":"changelog/#559-_-august-26-2020","text":"Added Esperanto translations Fixed #1884 : External links not included in navigation tabs","title":"5.5.9 _ August 26, 2020"},{"location":"changelog/#558-_-august-23-2020","text":"Removed focus outline on details and content tabs for pointer devices Improved accessibility of content tabs (now navigable via arrow keys) Fixed #1877 : 404 on search index when search is disabled Fixed some memleaks in observable subscriptions Fixed color definitions for theme-color meta tag","title":"5.5.8 _ August 23, 2020"},{"location":"changelog/#557-_-august-16-2020","text":"Improved contrast ratio to 4.5:1 for syntax highlighting Improved contrast ratio to 4.5:1 for table of contents","title":"5.5.7 _ August 16, 2020"},{"location":"changelog/#556-_-august-12-2020","text":"Switched base template for 404.html to main.html Fixed #1864 : GitHub organisation stats not loading","title":"5.5.6 _ August 12, 2020"},{"location":"changelog/#555-_-august-11-2020","text":"Fixed missing vendor and worker distribution files","title":"5.5.5 _ August 11, 2020"},{"location":"changelog/#554-_-august-11-2020","text":"Added support for sortable data tables","title":"5.5.4 _ August 11, 2020"},{"location":"changelog/#553-_-august-4-2020","text":"Fixed search for languages other than English (5.5.1 regression)","title":"5.5.3 _ August 4, 2020"},{"location":"changelog/#552-_-august-3-2020","text":"Improved highlight colors and spacing for ins , del and mark Changed some keyboard symbols for better equivalents Removed focus outline for details and code blocks on touch devices Fixed margins for admonitions (5.5.1 regression) Fixed too small content tab labels (5.5.1 regression) Fixed icon repeating for custom admonition icons","title":"5.5.2 _ August 3, 2020"},{"location":"changelog/#551-_-august-1-2020","text":"Improved typesetting by basing font-size and spacings on em Improved print view by slightly scaling down font-size Changed custom site title (metadata) to be suffixed with site name Fixed top- and bottom spacing of paragraphs inside table cells","title":"5.5.1 _ August 1, 2020"},{"location":"changelog/#550-_-july-24-2020","text":"Rewrite of entire documentation Rewrite of syntax highlighting to be customizable with CSS variables Improved syntax highlighting to work with light and dark theme Improved slate color scheme to be more customizable and easier on the eyes Added licenses of icon sets to distribution files Fixed stale document titles in Google Analytics when using instant loading Fixed width of previous and next footer links for tablet and above Fixed issues with top scroll margin for footnotes Fixed top margin for tabbed content when using a JavaScript highlighter Deprecated metadata-based redirects, source links and heroes","title":"5.5.0 _ July 24, 2020"},{"location":"changelog/#540-_-june-29-2020","text":"Added support to wrap searches in quotes to switch from OR to AND Fixed highlighting of numbers in search results","title":"5.4.0 _ June 29, 2020"},{"location":"changelog/#533-_-june-24-2020","text":"Added Bengali translations Fixed #1773 : Search for numbers does not return any result (regression)","title":"5.3.3 _ June 24, 2020"},{"location":"changelog/#532-_-june-21-2020","text":"Improved search typeahead experience with non-Latin characters Fixed #1753 : Japanese search doesn't work anymore","title":"5.3.2 _ June 21, 2020"},{"location":"changelog/#531-_-june-20-2020","text":"Fixed #1761 : Duplication of search worker when subscribing to observable","title":"5.3.1 _ June 20, 2020"},{"location":"changelog/#530-_-june-15-2020","text":"Added support for color schemes based on user preference Fixed #1755 : Tokenizer separator setting ignored","title":"5.3.0 _ June 15, 2020"},{"location":"changelog/#523-_-june-6-2020","text":"Improved search typeahead behavior for some languages ( de , fr , ...) Improved styles for scrollbars on Firefox Fixed #1741 : Removed preconnect hint for Google Analytics","title":"5.2.3 _ June 6, 2020"},{"location":"changelog/#522-_-may-26-2020","text":"Fixed #1728 : Legacy Edge doesn't support deg values in hsla colors","title":"5.2.2 _ May 26, 2020"},{"location":"changelog/#521-_-may-22-2020","text":"Fixed color of links in table headers, e.g. footnotes Fixed color scheme not being applied without primary or accent color Fixed hover delay for links inside code blocks","title":"5.2.1 _ May 22, 2020"},{"location":"changelog/#520-_-may-18-2020","text":"Added color schemes implementation + dark mode Fixed #1583 : Missing option for separate link colors","title":"5.2.0 _ May 18, 2020"},{"location":"changelog/#517-_-may-16-2020","text":"Added keyboard focus support for overflowing code blocks Fixed #1696 : Infinite loop in some cases when using instant loading","title":"5.1.7 _ May 16, 2020"},{"location":"changelog/#516-_-may-9-2020","text":"Added Burmese translations Added general anchor offset solution using scroll-margin-top Fixed #1653 : Instant loading shouldn't intercept links to *.html files","title":"5.1.6 _ May 9, 2020"},{"location":"changelog/#515-_-may-3-2020","text":"Added name attribute for social links to set link title Fixed #1623 : Allow arbitrary links in social links Fixed #1664 : Height of iframe is not adjustable Fixed #1667 : Sidebars are scrolled to bottom on load (bug in Chrome 81+)","title":"5.1.5 _ May 3, 2020"},{"location":"changelog/#514-_-april-30-2020","text":"Switched to @mdi/svg Material Design icon package Fixed #1655 : Navigation may disappear after switching viewports Fixed #1659 : Unnecessary scrollbar for search results on Windows Fixed occasional distortions for images with explicit dimensions Fixed errors in German translations","title":"5.1.4 _ April 30, 2020"},{"location":"changelog/#513-_-april-26-2020","text":"Fixed overflowing content area after switch to flexbox","title":"5.1.3 _ April 26, 2020"},{"location":"changelog/#512-_-april-26-2020","text":"Added status information to search observable Added status information to search modal Removed announcement bar from print media Removed media query packing logic due to race conditions Fixed #1520 : Gracefully disable search on file:// if Worker fails Fixed re-submission of query after search is initialized Fixed jitter of sidebars on all browsers by switching to sticky","title":"5.1.2 _ April 26, 2020"},{"location":"changelog/#511-_-april-17-2020","text":"Added new FontAwesome icons Fixed #1609 : Instant loading doesn't honor target=_blank Fixed GitHub stars count rounding errors Fixed GitLab stars count retrieval","title":"5.1.1 _ April 17, 2020"},{"location":"changelog/#510-_-april-12-2020","text":"Added support for icons from Markdown through mkdocs-material-extensions","title":"5.1.0 _ April 12, 2020"},{"location":"changelog/#502-_-april-10-2020","text":"Added CSS source maps to distribution files Fixed errors in Chinese (Traditional) translations Fixed creation of stale directory on installation from git Improved overflow scrolling behavior on iOS (reduced bundle size by 4kb )","title":"5.0.2 _ April 10, 2020"},{"location":"changelog/#501-_-april-7-2020","text":"Fixed syntax error in Spanish translation","title":"5.0.1 _ April 7, 2020"},{"location":"changelog/#500-_-april-7-2020","text":"Reactive architecture \u2013 try app.dialog$.next(\"Hi!\") in the console Instant loading \u2013 make Material behave like a Single Page Application Improved CSS customization with CSS variables \u2013 set your brand's colors Improved CSS resilience, e.g. proper sidebar locking for customized headers Improved icon integration and configuration \u2013 now including over 5k icons Added possibility to use any icon for logo, repository and social links Search UI does not freeze anymore (moved to web worker) Search index built only once when using instant loading Improved extensible keyboard handling Support for prebuilt search indexes Support for displaying stars and forks for GitLab repositories Support for scroll snapping of sidebars and search results Reduced HTML and CSS footprint due to deprecation of Internet Explorer support Slight facelifting of some UI elements (admonitions, tables, ...)","title":"5.0.0 _ April 7, 2020"},{"location":"changelog/#463-_-february-14-2020","text":"Removed optional third-party plugins from requirements.txt Updated Docker image to contain all supported third-party plugins","title":"4.6.3 _ February 14, 2020"},{"location":"changelog/#462-_-february-8-2020","text":"Added Romanian translations Fixed #1451 : Inconsistent spacing for fenced code blocks","title":"4.6.2 _ February 8, 2020"},{"location":"changelog/#461-_-february-8-2020","text":"Fixed #1324 : Metadata author only rendering first character Fixed #1393 : Set tabindex to 0 for skip to content link Fixed code blocks after Markdown 3.2 release Fixed errors in Japanese translations Improved Google Lighthouse score","title":"4.6.1 _ February 8, 2020"},{"location":"changelog/#460-_-december-11-2019","text":"Added support for mkdocs-git-revision-date-localized-plugin Fixed invalid character in Google Fonts URL","title":"4.6.0 _ December 11, 2019"},{"location":"changelog/#451-_-december-2-2019","text":"Added Thai translations Fixed missing assets in GitHub release .zip and .tar.gz","title":"4.5.1 _ December 2, 2019"},{"location":"changelog/#450-_-november-16-2019","text":"Fixed #1330 : Upgraded EmojiOne to Tweomji due to licensing issues Fixed #1339 : Temporarily pinned PyMdown and Markdown due to Fixed errors in Greek translations Improved GitHub statistics retrieval","title":"4.5.0 _ November 16, 2019"},{"location":"changelog/#443-_-october-3-2019","text":"Added Estonian translations Fixed removal of copyright banners in minified JavaScript Removed unnecessary title attributes from links in table of contents","title":"4.4.3 _ October 3, 2019"},{"location":"changelog/#442-_-august-27-2019","text":"Added Afrikaans translations Fixed broken page title when h1 contained HTML tags Improved accessibility for IE users Removed unnecessary title attributes from links in navigation","title":"4.4.2 _ August 27, 2019"},{"location":"changelog/#441-_-august-22-2019","text":"Added support for black as a primary color Fixed broken footer bar when h1 contained HTML tags","title":"4.4.1 _ August 22, 2019"},{"location":"changelog/#440-_-june-15-2019","text":"Added Slovenian translations Reverted template minification in favor of mkdocs-minify-plugin Fixed #1114 : Tabs don't reappear when default font-size is smaller than 16","title":"4.4.0 _ June 15, 2019"},{"location":"changelog/#431-_-may-23-2019","text":"Fixed spelling error in Danish translations","title":"4.3.1 _ May 23, 2019"},{"location":"changelog/#430-_-may-17-2019","text":"Added support for changing header through metadata title property Added font-display: swap to Google Font loading logic Removed whitespace from templates, saving 4kb ( .7kb gzipped) per request Fixed alignment of repository icons on tablet and desktop","title":"4.3.0 _ May 17, 2019"},{"location":"changelog/#420-_-april-28-2019","text":"Added Norwegian (Nynorsk) translations Fixed loss of focus in non-form input elements due to search hotkeys Fixed #1067 : Search hotkeys not working for mobile/tablet screensize Fixed #1068 : Search not correctly aligned for tablet screensize","title":"4.2.0 _ April 28, 2019"},{"location":"changelog/#412-_-april-16-2019","text":"Fixed #1072 : HTML tags appearing in navigation link titles","title":"4.1.2 _ April 16, 2019"},{"location":"changelog/#411-_-march-28-2019","text":"Fixed minor CSS errors detected during validation","title":"4.1.1 _ March 28, 2019"},{"location":"changelog/#410-_-march-22-2019","text":"Fixed #1023 : Search for Asian languages broken after Lunr.js update Fixed #1026 : contenteditable elements loose focus on hotkeys","title":"4.1.0 _ March 22, 2019"},{"location":"changelog/#402-_-march-1-2019","text":"Fixed #1012 : HTML character entities appear in search result titles","title":"4.0.2 _ March 1, 2019"},{"location":"changelog/#401-_-february-13-2019","text":"Fixed #762 , #816 : Glitch in sidebar when collapsing items Fixed #869 : Automatically expand details before printing","title":"4.0.1 _ February 13, 2019"},{"location":"changelog/#400-_-february-13-2019","text":"Added background on hover for table rows Removed Google Tag Manager and reverted to Google Analytics Removed blocks in partials - Jinja doesn't support them Fixed #911 : Chrome breaks layout if system language is Chinese ( BREAKING ) Fixed #976 : Removed FastClick","title":"4.0.0 _ February 13, 2019"},{"location":"changelog/#330-_-january-29-2019","text":"Moved Google Analytics integration into head using Google Tag Manager Fixed #972 : Unicode slugifier breaks table of contents blur on scroll Fixed #974 : Additional links in table of contents break blur on scroll","title":"3.3.0 _ January 29, 2019"},{"location":"changelog/#320-_-december-28-2018","text":"Added support for redirects using metadata refresh Fixed #921 : Load Google Analytics snippet asynchronously","title":"3.2.0 _ December 28, 2018"},{"location":"changelog/#310-_-november-17-2018","text":"Added support for Progressive Web App Manifest Fixed #915 : Search bug in Safari (upgraded Lunr.js)","title":"3.1.0 _ November 17, 2018"},{"location":"changelog/#306-_-october-26-2018","text":"Added Taiwanese translations Fixed #906 : JavaScript code blocks evaluated in search results","title":"3.0.6 _ October 26, 2018"},{"location":"changelog/#305-_-october-23-2018","text":"Added Croatian and Indonesian translations Fixed #899 : Skip-to-content link invalid from 2 nd level on Fixed #902 : Missing URL filter in footer for FontAwesome link","title":"3.0.5 _ October 23, 2018"},{"location":"changelog/#304-_-september-3-2018","text":"Updated Dutch translations Fixed #856 : Removed preconnect meta tag if Google Fonts are disabled","title":"3.0.4 _ September 3, 2018"},{"location":"changelog/#303-_-august-7-2018","text":"Fixed #841 : Additional path levels for extra CSS and JS","title":"3.0.3 _ August 7, 2018"},{"location":"changelog/#302-_-august-6-2018","text":"Fixed #839 : Lunr.js stemmer imports incorrect","title":"3.0.2 _ August 6, 2018"},{"location":"changelog/#301-_-august-5-2018","text":"Fixed #838 : Search result links incorrect","title":"3.0.1 _ August 5, 2018"},{"location":"changelog/#300-_-august-5-2018","text":"Upgraded MkDocs to 1.0 ( BREAKING ) Upgraded Python in official Docker image to 3.6 Added Serbian and Serbo-Croatian translations","title":"3.0.0 _ August 5, 2018"},{"location":"changelog/#294-_-july-29-2018","text":"Fixed build error after MkDocs upgrade","title":"2.9.4 _ July 29, 2018"},{"location":"changelog/#293-_-july-29-2018","text":"Added link to home for logo in drawer Fixed dependency problems between MkDocs and Tornado","title":"2.9.3 _ July 29, 2018"},{"location":"changelog/#292-_-june-29-2018","text":"Added Hindi and Czech translations","title":"2.9.2 _ June 29, 2018"},{"location":"changelog/#291-_-june-18-2018","text":"Added support for different spellings for theme color Fixed #799 : Added support for webfont minification in production Fixed #800 : Added .highlighttable as an alias for .codehilitetable","title":"2.9.1 _ June 18, 2018"},{"location":"changelog/#290-_-june-13-2018","text":"Added support for theme color on Android Fixed #796 : Rendering of nested tabbed code blocks","title":"2.9.0 _ June 13, 2018"},{"location":"changelog/#280-_-june-10-2018","text":"Added support for grouping code blocks with tabs Added Material and FontAwesome icon fonts to distribution files (GDPR) Added note on compliance with GDPR Added Slovak translations Fixed #790 : Prefixed id attributes with __ to avoid name clashes","title":"2.8.0 _ June 10, 2018"},{"location":"changelog/#273-_-april-26-2018","text":"Added Finnish translations","title":"2.7.3 _ April 26, 2018"},{"location":"changelog/#272-_-april-9-2018","text":"Fixed rendering issue for details on Edge","title":"2.7.2 _ April 9, 2018"},{"location":"changelog/#271-_-march-21-2018","text":"Added Galician translations Fixed #730 : Scroll chasing error on home page if Disqus is enabled Fixed #736 : Reset drawer and search upon back button invocation","title":"2.7.1 _ March 21, 2018"},{"location":"changelog/#270-_-march-6-2018","text":"Added ability to set absolute URL for logo Added Hebrew translations","title":"2.7.0 _ March 6, 2018"},{"location":"changelog/#266-_-february-22-2018","text":"Added preconnect for Google Fonts for faster loading Fixed #710 : With tabs sidebar disappears if JavaScript is not available","title":"2.6.6 _ February 22, 2018"},{"location":"changelog/#265-_-february-22-2018","text":"Reverted --dev-addr flag removal from Dockerfile","title":"2.6.5 _ February 22, 2018"},{"location":"changelog/#264-_-february-21-2018","text":"Added Catalan translations Fixed incorrect margins for buttons in Firefox and Safari Replaced package manager yarn with npm 5.6 Reverted GitHub stars rounding method Removed --dev-addr flag from Dockerfile for Windows compatibility","title":"2.6.4 _ February 21, 2018"},{"location":"changelog/#263-_-february-18-2018","text":"Added Vietnamese translations","title":"2.6.3 _ February 18, 2018"},{"location":"changelog/#262-_-february-12-2018","text":"Added Arabic translations Fixed incorrect rounding of amount of GitHub stars Fixed double-layered borders for tables","title":"2.6.2 _ February 12, 2018"},{"location":"changelog/#261-_-february-11-2018","text":"Added ability to override Disqus integration using metadata Fixed #690 : Duplicate slashes in source file URLs Fixed #696 : Active page highlight not working with default palette Adjusted German translations","title":"2.6.1 _ February 11, 2018"},{"location":"changelog/#260-_-february-2-2018","text":"Moved default search configuration to default translation (English) Added support to automatically set text direction from translation Added support to disable search stop word filter in translation Added support to disable search trimmer in translation Added Persian translations Fixed support for Polish search Fixed disappearing GitHub, GitLab and Bitbucket repository icons","title":"2.6.0 _ February 2, 2018"},{"location":"changelog/#255-_-january-31-2018","text":"Added Hungarian translations","title":"2.5.5 _ January 31, 2018"},{"location":"changelog/#254-_-january-29-2018","text":"Fixed #683 : gh-deploy fails inside Docker","title":"2.5.4 _ January 29, 2018"},{"location":"changelog/#253-_-january-25-2018","text":"Added Ukrainian translations","title":"2.5.3 _ January 25, 2018"},{"location":"changelog/#252-_-january-22-2018","text":"Added default search language mappings for all localizations Fixed #673 : Error loading non-existent search language Fixed #675 : Uncaught reference error when search plugin disabled","title":"2.5.2 _ January 22, 2018"},{"location":"changelog/#251-_-january-20-2018","text":"Fixed permalink for main headline Improved missing translation handling with English as a fallback Improved accessibility with skip-to-content link","title":"2.5.1 _ January 20, 2018"},{"location":"changelog/#250-_-january-13-2018","text":"Added support for right-to-left languages","title":"2.5.0 _ January 13, 2018"},{"location":"changelog/#240-_-january-11-2018","text":"Added focus state for clipboard buttons Fixed #400 : Search bar steals tab focus Fixed search not closing on Enter when result is selected Fixed search not closing when losing focus due to Tab Fixed collapsed navigation links getting focus Fixed outline being cut off on Tab focus of navigation links Fixed bug with first search result navigation being ignored Removed search result navigation via Tab (use Up and Down ) Removed outline resets for links Improved general tabbing behavior on desktop","title":"2.4.0 _ January 11, 2018"},{"location":"changelog/#230-_-january-9-2018","text":"Added example (synonym: snippet ) style for admonitions Added synonym abstract for summary style for admonitions","title":"2.3.0 _ January 9, 2018"},{"location":"changelog/#226-_-december-27-2017","text":"Added Turkish translations Fixed unclickable area below header in case JavaScript is not available","title":"2.2.6 _ December 27, 2017"},{"location":"changelog/#225-_-december-18-2017","text":"Fixed #639 : Broken default favicon","title":"2.2.5 _ December 18, 2017"},{"location":"changelog/#224-_-december-18-2017","text":"Fixed #638 : Build breaks with Jinja < 2.9","title":"2.2.4 _ December 18, 2017"},{"location":"changelog/#223-_-december-13-2017","text":"Fixed #630 : Admonition sets padding on any last child Adjusted Chinese (Traditional) translations","title":"2.2.3 _ December 13, 2017"},{"location":"changelog/#222-_-december-8-2017","text":"Added Dutch translations Adjusted targeted link and footnote offsets Simplified admonition styles and fixed padding bug","title":"2.2.2 _ December 8, 2017"},{"location":"changelog/#221-_-december-2-2017","text":"Fixed #616 : Minor styling error with title-only admonitions Removed border for table of contents and improved spacing","title":"2.2.1 _ December 2, 2017"},{"location":"changelog/#220-_-november-22-2017","text":"Added support for hero teaser Added Portuguese translations Fixed #586 : Footnote backref target offset regression Fixed #605 : Search stemmers not correctly loaded","title":"2.2.0 _ November 22, 2017"},{"location":"changelog/#211-_-november-21-2017","text":"Replaced deprecated babel-preset-es2015 with babel-preset-env Refactored Gulp build pipeline with Webpack Removed right border on sidebars Fixed broken color transition on header","title":"2.1.1 _ November 21, 2017"},{"location":"changelog/#210-_-november-19-2017","text":"Added support for white as a primary color Added support for sliding site name and title Fixed redundant clipboard button when using line numbers on code blocks Improved header appearance by making it taller Improved tabs appearance Improved CSS customizability by leveraging inheritance Removed scroll shadows via background-attachment","title":"2.1.0 _ November 19, 2017"},{"location":"changelog/#204-_-november-5-2017","text":"Fixed details not opening with footnote reference","title":"2.0.4 _ November 5, 2017"},{"location":"changelog/#203-_-november-5-2017","text":"Added Japanese translations Fixed #540 : Jumping to anchor inside details doesn't open it Fixed active link colors in footer","title":"2.0.3 _ November 5, 2017"},{"location":"changelog/#202-_-november-1-2017","text":"Added Russian translations Fixed #542 : Horizontal scrollbar between 1220px and 1234px Fixed #553 : Metadata values only rendering first character Fixed #558 : Flash of unstyled content Fixed favicon regression caused by deprecation upstream","title":"2.0.2 _ November 1, 2017"},{"location":"changelog/#201-_-october-31-2017","text":"Fixed error when initializing search Fixed styles for link to edit the current page Fixed styles on nested admonition in details","title":"2.0.1 _ October 31, 2017"},{"location":"changelog/#200-_-october-31-2017","text":"Upgraded MkDocs to 0.17.1 ( BREAKING ) Added support for easier configuration of search tokenizer Added support to disable search Added Korean translations","title":"2.0.0 _ October 31, 2017"},{"location":"changelog/#1122-_-october-26-2017","text":"Added Italian, Norwegian, French and Chinese translations","title":"1.12.2 _ October 26, 2017"},{"location":"changelog/#1121-_-october-22-2017","text":"Added Polish, Swedish and Spanish translations Improved downward compatibility with custom partials Temporarily pinned MkDocs version within Docker image to 0.16.3 Fixed #519 : Missing theme configuration file","title":"1.12.1 _ October 22, 2017"},{"location":"changelog/#1120-_-october-20-2017","text":"Added support for setting language(s) via mkdocs.yml Added support for default localization Added German and Danish translations Fixed #374 : Search bar misalignment on big screens","title":"1.12.0 _ October 20, 2017"},{"location":"changelog/#1110-_-october-19-2017","text":"Added localization to clipboard Refactored localization logic","title":"1.11.0 _ October 19, 2017"},{"location":"changelog/#1104-_-october-18-2017","text":"Improved print styles of code blocks Improved search UX (don't close on enter if no selection) Fixed #495 : Vertical scrollbar on short pages","title":"1.10.4 _ October 18, 2017"},{"location":"changelog/#1103-_-october-11-2017","text":"Fixed #484 : Vertical scrollbar on some MathJax formulas Fixed #483 : Footnote backref target offset regression","title":"1.10.3 _ October 11, 2017"},{"location":"changelog/#1102-_-october-6-2017","text":"Fixed #468 : Sidebar shows scrollbar if content is shorter (in Safari)","title":"1.10.2 _ October 6, 2017"},{"location":"changelog/#1101-_-september-14-2017","text":"Fixed #455 : Bold code blocks rendered with normal font weight","title":"1.10.1 _ September 14, 2017"},{"location":"changelog/#1100-_-september-1-2017","text":"Added support to make logo default icon configurable Fixed uninitialized overflow scrolling on main pane for iOS Fixed error in mobile navigation in case JavaScript is not available Fixed incorrect color transition for nested panes in mobile navigation Improved checkbox styles for Tasklist from PyMdown Extension package","title":"1.10.0 _ September 1, 2017"},{"location":"changelog/#190-_-august-29-2017","text":"Added info (synonym: todo ) style for admonitions Added question (synonym: help , faq ) style for admonitions Added support for Details from PyMdown Extensions package Improved admonition styles to match details Improved styles for social links in footer Replaced ligatures with Unicode code points to avoid broken layout Upgraded PyMdown Extensions package dependency to >= 3.4","title":"1.9.0 _ August 29, 2017"},{"location":"changelog/#181-_-august-7-2017","text":"Fixed #421 : Missing pagination for GitHub API","title":"1.8.1 _ August 7, 2017"},{"location":"changelog/#180-_-august-2-2017","text":"Added support for lazy-loading of search results for better performance Added support for customization of search tokenizer/separator Fixed #424 : Search doesn't handle capital letters anymore Fixed #419 : Search doesn't work on whole words","title":"1.8.0 _ August 2, 2017"},{"location":"changelog/#175-_-july-25-2017","text":"Fixed #398 : Forms broken due to search shortcuts Improved search overall user experience Improved search matching and highlighting Improved search accessibility","title":"1.7.5 _ July 25, 2017"},{"location":"changelog/#174-_-june-21-2017","text":"Fixed functional link colors in table of contents for active palette Fixed #368 : Compatibility issues with IE11","title":"1.7.4 _ June 21, 2017"},{"location":"changelog/#173-_-june-7-2017","text":"Fixed error when setting language to Japanese for site search","title":"1.7.3 _ June 7, 2017"},{"location":"changelog/#172-_-june-6-2017","text":"Fixed offset of search box when repo_url is not set Fixed non-disappearing tooltip","title":"1.7.2 _ June 6, 2017"},{"location":"changelog/#171-_-june-1-2017","text":"Fixed wrong z-index order of header, overlay and drawer Fixed wrong offset of targeted footnote back references","title":"1.7.1 _ June 1, 2017"},{"location":"changelog/#170-_-june-1-2017","text":"Added \"copy to clipboard\" buttons to code blocks Added support for multilingual site search Fixed search term highlighting for non-latin languages","title":"1.7.0 _ June 1, 2017"},{"location":"changelog/#164-_-may-24-2017","text":"Fixed #337 : JavaScript error for GitHub organization URLs","title":"1.6.4 _ May 24, 2017"},{"location":"changelog/#163-_-may-16-2017","text":"Fixed #329 : Broken source stats for private or unknown GitHub repos","title":"1.6.3 _ May 16, 2017"},{"location":"changelog/#162-_-may-15-2017","text":"Fixed #316 : Fatal error for git clone on Windows Fixed #320 : Chrome 58 creates double underline for abbr tags Fixed #323 : Ligatures rendered inside code blocks Fixed miscalculated sidebar height due to missing margin collapse Changed deprecated MathJax CDN to Cloudflare","title":"1.6.2 _ May 15, 2017"},{"location":"changelog/#161-_-april-23-2017","text":"Fixed following of active/focused element if search input is focused Fixed layer order of search component elements","title":"1.6.1 _ April 23, 2017"},{"location":"changelog/#160-_-april-22-2017","text":"Added build test for Docker image on Travis Added search overlay for better user experience (focus) Added language from localizations to html tag Fixed #270 : source links broken for absolute URLs Fixed missing top spacing for first targeted element in content Fixed too small footnote divider when using larger font sizes","title":"1.6.0 _ April 22, 2017"},{"location":"changelog/#155-_-april-20-2017","text":"Fixed #282 : Browser search ( Meta + F ) is hijacked","title":"1.5.5 _ April 20, 2017"},{"location":"changelog/#154-_-april-8-2017","text":"Fixed broken highlighting for two or more search terms Fixed missing search results when only a h1 is present Fixed unresponsive overlay on Android","title":"1.5.4 _ April 8, 2017"},{"location":"changelog/#153-_-april-7-2017","text":"Fixed deprecated calls for template variables Fixed wrong palette color for focused search result Fixed JavaScript errors on 404 page Fixed missing top spacing on 404 page Fixed missing right spacing on overflow of source container","title":"1.5.3 _ April 7, 2017"},{"location":"changelog/#152-_-april-5-2017","text":"Added requirements as explicit dependencies in setup.py Fixed non-synchronized transitions in search form","title":"1.5.2 _ April 5, 2017"},{"location":"changelog/#151-_-march-30-2017","text":"Fixed rendering and offset of targeted footnotes Fixed #238 : Link on logo is not set to site_url","title":"1.5.1 _ March 30, 2017"},{"location":"changelog/#150-_-march-24-2017","text":"Added support for localization of search placeholder Added keyboard events for quick access of search Added keyboard events for search control Added opacity on hover for search buttons Added git hook to skip CI build on non-src changes Fixed non-resetting search placeholder when input is cleared Fixed error for unescaped parentheses in search term Fixed #229 : Button to clear search missing Fixed #231 : Escape key doesn't exit search Removed old-style figures from font feature settings","title":"1.5.0 _ March 24, 2017"},{"location":"changelog/#141-_-march-16-2017","text":"Fixed invalid destructuring attempt on NodeList (in Safari, Edge, IE)","title":"1.4.1 _ March 16, 2017"},{"location":"changelog/#140-_-march-16-2017","text":"Added support for grouping searched sections by documents Added support for highlighting of search terms Added support for localization of search results Fixed #216 : table of contents icon doesn't show if h1 is not present Reworked style and layout of search results for better usability","title":"1.4.0 _ March 16, 2017"},{"location":"changelog/#130-_-march-11-2017","text":"Added support for page-specific title and description using metadata Added support for linking source files to documentation Fixed jitter and offset of sidebar when zooming browser Fixed incorrectly initialized tablet sidebar height Fixed regression for #1 : GitHub stars break if repo_url ends with a / Fixed undesired white line below copyright footer due to base font scaling Fixed issue with whitespace in path for scripts Fixed #205 : support non-fixed (static) header Refactored footnote references for better visibility Reduced repaints to a minimum for non-tabs configuration Reduced contrast of edit button (slightly)","title":"1.3.0 _ March 11, 2017"},{"location":"changelog/#120-_-march-3-2017","text":"Added quote (synonym: cite ) style for admonitions Added help message to build pipeline Fixed wrong navigation link colors when applying palette Fixed #197 : Link missing in tabs navigation on deeply nested items Removed unnecessary dev dependencies","title":"1.2.0 _ March 3, 2017"},{"location":"changelog/#111-_-february-26-2017","text":"Fixed incorrectly displayed nested lists when using tabs","title":"1.1.1 _ February 26, 2017"},{"location":"changelog/#110-_-february-26-2017","text":"Added tabs navigation feature (optional) Added Disqus integration (optional) Added a high resolution Favicon with the new logo Added static type checking using Facebook's Flow Fixed #173 : Dictionary elements have no bottom spacing Fixed #175 : Tables cannot be set to 100% width Fixed race conditions in build related to asset revisioning Fixed accidentally re-introduced Permalink on top-level headline Fixed alignment of logo in drawer on IE11 Refactored styles related to tables Refactored and automated Docker build and PyPI release Refactored build scripts","title":"1.1.0 _ February 26, 2017"},{"location":"changelog/#105-_-february-18-2017","text":"Fixed #153 : Sidebar flows out of constrained area in Chrome 56 Fixed #159 : Footer jitter due to JavaScript if content is short","title":"1.0.5 _ February 18, 2017"},{"location":"changelog/#104-_-february-16-2017","text":"Fixed #142 : Documentation build errors if h1 is defined as raw HTML Fixed #164 : PyPI release does not build and install Fixed offsets of targeted headlines Increased sidebar font size by 0.12rem","title":"1.0.4 _ February 16, 2017"},{"location":"changelog/#103-_-january-22-2017","text":"Fixed #117 : Table of contents items don't blur on fast scrolling Refactored sidebar positioning logic Further reduction of repaints","title":"1.0.3 _ January 22, 2017"},{"location":"changelog/#102-_-january-15-2017","text":"Fixed #108 : Horizontal scrollbar in content area","title":"1.0.2 _ January 15, 2017"},{"location":"changelog/#101-_-january-14-2017","text":"Fixed massive repaints happening when scrolling Fixed footer back reference positions in case of overflow Fixed header logo from showing when the menu icon is rendered Changed scrollbar behavior to only show when content overflows","title":"1.0.1 _ January 14, 2017"},{"location":"changelog/#100-_-january-13-2017","text":"Introduced Webpack for more sophisticated JavaScript bundling Introduced ESLint and Stylelint for code style checks Introduced more accurate Material Design colors and shadows Introduced modular scales for harmonic font sizing Introduced git-hooks for better development workflow Rewrite of CSS using the BEM methodology and SassDoc guidelines Rewrite of JavaScript using ES6 and Babel as a transpiler Rewrite of Admonition, Permalinks and CodeHilite integration Rewrite of the complete typographical system Rewrite of Gulp asset pipeline in ES6 and separation of tasks Removed Bower as a dependency in favor of NPM Removed custom icon build in favor of the Material Design icon set Removed _blank targets on links due to vulnerability: http://bit.ly/1Mk2Rtw Removed unversioned assets from build directory Restructured templates into base templates and partials Added build and watch scripts in package.json Added support for Metadata and Footnotes Markdown extensions Added support for PyMdown Extensions package Added support for collapsible sections in navigation Added support for separate table of contents Added support for better accessibility through REM-based layout Added icons for GitHub, GitLab and BitBucket integrations Added more detailed documentation on specimen, extensions etc. Added a 404.html error page for deployment on GitHub Pages Fixed live reload chain in watch mode when saving a template Fixed variable references to work with MkDocs 0.16","title":"1.0.0 _ January 13, 2017"},{"location":"changelog/#024-_-june-26-2016","text":"Fixed improperly set default favicon Fixed #33 : Protocol relative URL for webfonts doesn't work with file:// Fixed #34 : IE11 on Windows 7 doesn't honor max-width on main tag Fixed #35 : Add styling for blockquotes","title":"0.2.4 _ June 26, 2016"},{"location":"changelog/#023-_-may-16-2016","text":"Fixed #25 : Highlight inline fenced blocks Fixed #26 : Better highlighting for keystrokes Fixed #30 : Suboptimal syntax highlighting for PHP","title":"0.2.3 _ May 16, 2016"},{"location":"changelog/#022-_-march-20-2016","text":"Fixed #15 : Document Pygments dependency for CodeHilite Fixed #16 : Favicon could not be set through mkdocs.yml Fixed #17 : Put version into own container for styling Fixed #20 : Fix rounded borders for tables","title":"0.2.2 _ March 20, 2016"},{"location":"changelog/#021-_-march-12-2016","text":"Fixed #10 : Invisible header after closing search bar with ESC key Fixed #13 : Table cells don't wrap Fixed empty list in table of contents when no headline is defined Corrected wrong path for static asset monitoring in Gulpfile.js Set up tracking of site search for Google Analytics","title":"0.2.1 _ March 12, 2016"},{"location":"changelog/#020-_-february-24-2016","text":"Fixed #6 : Include multiple color palettes via mkdocs.yml Fixed #7 : Better colors for links inside admonition notes and warnings Fixed #9 : Text for prev/next footer navigation should be customizable Refactored templates (replaced if / else with modifiers where possible)","title":"0.2.0 _ February 24, 2016"},{"location":"changelog/#013-_-february-21-2016","text":"Fixed #3 : Ordered lists within an unordered list have ::before content Fixed #4 : Click on Logo/Title without Github-Repository: \"None\" Fixed #5 : Page without headlines renders empty list in table of contents Moved Modernizr to top to ensure basic usability in IE8","title":"0.1.3 _ February 21, 2016"},{"location":"changelog/#012-_-february-16-2016","text":"Fixed styles for deep navigational hierarchies Fixed webfont delivery problem when hosted in subdirectories Fixed print styles in mobile/tablet configuration Added option to configure fonts in mkdocs.yml with fallbacks Changed styles for admonition notes and warnings Set download link to latest version if available Set up tracking of outgoing links and actions for Google Analytics","title":"0.1.2 _ February 16, 2016"},{"location":"changelog/#011-_-february-11-2016","text":"Fixed #1 : GitHub stars don't work if the repo_url ends with a / Updated NPM and Bower dependencies to most recent versions Changed footer/copyright link to Material theme to GitHub pages Made MkDocs building/serving in build process optional Set up continuous integration with Travis","title":"0.1.1 _ February 11, 2016"},{"location":"changelog/#010-_-february-9-2016","text":"Initial release","title":"0.1.0 _ February 9, 2016"},{"location":"creating-your-site/","text":"Creating your site \u00b6 After you've installed Material for MkDocs, you can bootstrap your project documentation using the mkdocs executable. Go to the directory where you want your project to be located and enter: mkdocs new . Alternatively, if you're running Material for MkDocs from within Docker, use: Unix, Powershell docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . Windows docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material new . This will create the following structure: . \u251c\u2500 docs/ \u2502 \u2514\u2500 index.md \u2514\u2500 mkdocs.yml Configuration \u00b6 Minimal configuration \u00b6 Simply add the following lines to mkdocs.yml to enable the theme. Note that since there are several installation methods , configuration might be slightly different: pip, docker theme : name : material git theme : name : null custom_dir : mkdocs-material/material # 404 page static_templates : - 404.html # Necessary for search to work properly include_search_page : false search_index_only : true # Default values, taken from mkdocs_theme.yml language : en font : text : Roboto code : Roboto Mono favicon : assets/favicon.png icon : logo : logo If you cloned Material for MkDocs from GitHub, you must list all of the themes' defaults, because mkdocs_theme.yml is not loaded automatically as described in the official documentation . Advanced configuration \u00b6 Material for MkDocs comes with many configuration options. The setup section explains in great detail how to configure and customize colors, fonts, icons and much more: Changing the colors Changing the fonts Changing the language Changing the logo and icons Setting up navigation Setting up site search Setting up site analytics Setting up social cards Setting up tags Setting up versioning Setting up the header Setting up the footer Adding a git repository Adding a comment system Previewing as you write \u00b6 MkDocs includes a live preview server, so you can preview your changes as you write your documentation. The server will automatically rebuild the site upon saving. Start it with: mkdocs serve If you're running Material for MkDocs from within Docker, use: Unix, Powershell docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material Windows docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material Point your browser to localhost:8000 and you should see: Building your site \u00b6 When you're finished editing, you can build a static site from your Markdown files with: mkdocs build The contents of this directory make up your project documentation. There's no need for operating a database or server, as it is completely self-contained. The site can be hosted on GitHub Pages , GitLab Pages , a CDN of your choice or your private web space.","title":"Creating your site"},{"location":"creating-your-site/#creating-your-site","text":"After you've installed Material for MkDocs, you can bootstrap your project documentation using the mkdocs executable. Go to the directory where you want your project to be located and enter: mkdocs new . Alternatively, if you're running Material for MkDocs from within Docker, use: Unix, Powershell docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . Windows docker run --rm -it -v \"%cd%\":/docs squidfunk/mkdocs-material new . This will create the following structure: . \u251c\u2500 docs/ \u2502 \u2514\u2500 index.md \u2514\u2500 mkdocs.yml","title":"Creating your site"},{"location":"creating-your-site/#configuration","text":"","title":"Configuration"},{"location":"creating-your-site/#minimal-configuration","text":"Simply add the following lines to mkdocs.yml to enable the theme. Note that since there are several installation methods , configuration might be slightly different: pip, docker theme : name : material git theme : name : null custom_dir : mkdocs-material/material # 404 page static_templates : - 404.html # Necessary for search to work properly include_search_page : false search_index_only : true # Default values, taken from mkdocs_theme.yml language : en font : text : Roboto code : Roboto Mono favicon : assets/favicon.png icon : logo : logo If you cloned Material for MkDocs from GitHub, you must list all of the themes' defaults, because mkdocs_theme.yml is not loaded automatically as described in the official documentation .","title":"Minimal configuration"},{"location":"creating-your-site/#advanced-configuration","text":"Material for MkDocs comes with many configuration options. The setup section explains in great detail how to configure and customize colors, fonts, icons and much more: Changing the colors Changing the fonts Changing the language Changing the logo and icons Setting up navigation Setting up site search Setting up site analytics Setting up social cards Setting up tags Setting up versioning Setting up the header Setting up the footer Adding a git repository Adding a comment system","title":"Advanced configuration"},{"location":"creating-your-site/#previewing-as-you-write","text":"MkDocs includes a live preview server, so you can preview your changes as you write your documentation. The server will automatically rebuild the site upon saving. Start it with: mkdocs serve If you're running Material for MkDocs from within Docker, use: Unix, Powershell docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material Windows docker run --rm -it -p 8000:8000 -v \"%cd%\":/docs squidfunk/mkdocs-material Point your browser to localhost:8000 and you should see:","title":"Previewing as you write"},{"location":"creating-your-site/#building-your-site","text":"When you're finished editing, you can build a static site from your Markdown files with: mkdocs build The contents of this directory make up your project documentation. There's no need for operating a database or server, as it is completely self-contained. The site can be hosted on GitHub Pages , GitLab Pages , a CDN of your choice or your private web space.","title":"Building your site"},{"location":"customization/","text":"Customization \u00b6 Project documentation is as diverse as the projects themselves and Material for MkDocs is a great starting point for making it look beautiful. However, as you write your documentation, you may reach a point where small adjustments are necessary to preserve your brand's style. Adding assets \u00b6 MkDocs provides several ways to customize a theme. In order to make a few tweaks to Material for MkDocs, you can just add your stylesheets and JavaScript files to the docs directory. Additional CSS \u00b6 If you want to tweak some colors or change the spacing of certain elements, you can do this in a separate stylesheet. The easiest way is by creating a new stylesheet file in the docs directory: . \u251c\u2500 docs/ \u2502 \u2514\u2500 stylesheets/ \u2502 \u2514\u2500 extra.css \u2514\u2500 mkdocs.yml Then, add the following line to mkdocs.yml : extra_css : - stylesheets/extra.css Spin up the live preview server and start typing your changes in your additional stylesheet file \u2013 you should see them almost instantly after saving. Additional JavaScript \u00b6 The same is true for additional JavaScript. If you want to integrate another syntax highlighter or add some custom logic to your theme, create a new JavaScript file in the docs directory: . \u251c\u2500 docs/ \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml Then, add the following line to mkdocs.yml : extra_javascript : - javascripts/extra.js Further assistance can be found in the MkDocs documentation . Extending the theme \u00b6 If you want to alter the HTML source (e.g. add or remove some parts), you can extend the theme. MkDocs supports theme extension , an easy way to override parts of Material for MkDocs without forking from git. This ensures that you can update to the latest version more easily. Setup and theme structure \u00b6 Enable Material for MkDocs as usual in mkdocs.yml , and create a new folder for overrides which you then reference using the custom_dir key: theme : name : material custom_dir : overrides Theme extension prerequisites As the custom_dir variable is used for the theme extension process, Material for MkDocs needs to be installed via pip and referenced with the name parameter in mkdocs.yml . It will not work when cloning from git . The structure in the overrides directory must mirror the directory structure of the original theme, as any file in the overrides directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the overrides directory. The directory layout of the theme is as follows: . \u251c\u2500 .icons/ # Bundled icon sets \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript \u2502 \u2514\u2500 stylesheets/ # Stylesheets \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # Third-party integrations \u2502 \u2502 \u251c\u2500 analytics.html # - Google Analytics \u2502 \u2502 \u2514\u2500 disqus.html # - Disqus \u2502 \u251c\u2500 languages/ # Localized languages \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Localized labels \u2502 \u251c\u2500 logo.html # Logo in header and sidebar \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 palette.html # Color palette \u2502 \u251c\u2500 search.html # Search box \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 source-date.html # Last updated date \u2502 \u251c\u2500 source-link.html # Link to source file \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 toc.html # Table of contents \u2502 \u2514\u2500 toc-item.html # Table of contents item \u251c\u2500 404 .html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page Overriding partials \u00b6 In order to override a partial, we can replace it with a file of the same name and location in the overrides directory. For example, to replace the original footer.html , create a footer.html file in the overrides/partials directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 partials/ \u2502 \u2514\u2500 footer.html \u2514\u2500 mkdocs.yml MkDocs will now use the new partial when rendering the theme. This can be done with any file. Overriding blocks recommended \u00b6 Besides overriding partials, it's also possible to override (and extend) template blocks , which are defined inside the templates and wrap specific features. To override a block, create a main.html file inside the overrides directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 main.html \u2514\u2500 mkdocs.yml Then, e.g. to override the site title, add the following line to main.html : {% extends \"base.html\" %} {% block htmltitle %} < title > Lorem ipsum dolor sit amet </ title > {% endblock %} Material for MkDocs provides the following template blocks: Block name Purpose analytics Wraps the Google Analytics integration announce Wraps the announcement bar config Wraps the JavaScript application config content Wraps the main content disqus Wraps the Disqus integration extrahead Empty block to add custom meta tags fonts Wraps the font definitions footer Wraps the footer with navigation and copyright header Wraps the fixed header bar hero Wraps the hero teaser (if available) htmltitle Wraps the <title> tag libs Wraps the JavaScript libraries (header) outdated Wraps the version warning scripts Wraps the JavaScript application (footer) source Wraps the linked source files site_meta Wraps the meta tags in the document head site_nav Wraps the site navigation and table of contents styles Wraps the stylesheets (also extra sources) tabs Wraps the tabs navigation (if available) For more on this topic refer to the MkDocs documentation . Additional variables \u00b6 Besides template blocks, Material for MkDocs provides extra variables for parts that cannot be overridden with template blocks (due to technical limitations of the template engine). If you want to add further information after the Made with Material for MkDocs hint in the footer, add the following line to main.html : {% extends \"base.html\" %} {% set extracopyright %} <!-- Add your additional information here --> {% endset %} Material for MkDocs provides the following additional variables: Block name Purpose extracopyright Adds custom copyright information Theme development \u00b6 Material for MkDocs is built on top of TypeScript , RxJS and SASS , and uses a lean, custom build process to put everything together. 1 If you want to make more fundamental changes, it may be necessary to make the adjustments directly in the source of the theme and recompile it. Environment setup \u00b6 In order to start development on Material for MkDocs, a Node.js version of at least 14 is required. First, clone the repository: git clone https://github.com/squidfunk/mkdocs-material Next, all dependencies need to be installed, which is done with: cd mkdocs-material pip install -r requirements.txt pip install mkdocs-minify-plugin pip install mkdocs-redirects npm install Development mode \u00b6 Start the watcher with: npm start Then, in a second session, start the MkDocs live preview server with: mkdocs serve Point your browser to localhost:8000 and you should see this documentation in front of you. Automatically generated files Never make any changes in the material directory, as the contents of this directory are automatically generated from the src directory and will be overwritten when the theme is built. Building the theme \u00b6 When you're finished making your changes, you can build the theme by invoking: npm run build This triggers the production-level compilation and minification of all stylesheets and JavaScript sources. When the command exits, the final files are located in the material directory. Add the theme_dir variable pointing to the aforementioned directory in the original mkdocs.yml . Now you can run mkdocs build and you should see your documentation with your changes to the original theme. Prior to version 7.0, the build was based on Webpack. This led to broken builds due to frequent incompatibilities with loaders and plugins, so we decided to swap Webpack for a leaner custom solution which is now based on RxJS as the application itself. This enabled us to remove more than 500 dependencies (~30% less). \u21a9","title":"Customization"},{"location":"customization/#customization","text":"Project documentation is as diverse as the projects themselves and Material for MkDocs is a great starting point for making it look beautiful. However, as you write your documentation, you may reach a point where small adjustments are necessary to preserve your brand's style.","title":"Customization"},{"location":"customization/#adding-assets","text":"MkDocs provides several ways to customize a theme. In order to make a few tweaks to Material for MkDocs, you can just add your stylesheets and JavaScript files to the docs directory.","title":"Adding assets"},{"location":"customization/#additional-css","text":"If you want to tweak some colors or change the spacing of certain elements, you can do this in a separate stylesheet. The easiest way is by creating a new stylesheet file in the docs directory: . \u251c\u2500 docs/ \u2502 \u2514\u2500 stylesheets/ \u2502 \u2514\u2500 extra.css \u2514\u2500 mkdocs.yml Then, add the following line to mkdocs.yml : extra_css : - stylesheets/extra.css Spin up the live preview server and start typing your changes in your additional stylesheet file \u2013 you should see them almost instantly after saving.","title":"Additional CSS"},{"location":"customization/#additional-javascript","text":"The same is true for additional JavaScript. If you want to integrate another syntax highlighter or add some custom logic to your theme, create a new JavaScript file in the docs directory: . \u251c\u2500 docs/ \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml Then, add the following line to mkdocs.yml : extra_javascript : - javascripts/extra.js Further assistance can be found in the MkDocs documentation .","title":"Additional JavaScript"},{"location":"customization/#extending-the-theme","text":"If you want to alter the HTML source (e.g. add or remove some parts), you can extend the theme. MkDocs supports theme extension , an easy way to override parts of Material for MkDocs without forking from git. This ensures that you can update to the latest version more easily.","title":"Extending the theme"},{"location":"customization/#setup-and-theme-structure","text":"Enable Material for MkDocs as usual in mkdocs.yml , and create a new folder for overrides which you then reference using the custom_dir key: theme : name : material custom_dir : overrides Theme extension prerequisites As the custom_dir variable is used for the theme extension process, Material for MkDocs needs to be installed via pip and referenced with the name parameter in mkdocs.yml . It will not work when cloning from git . The structure in the overrides directory must mirror the directory structure of the original theme, as any file in the overrides directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the overrides directory. The directory layout of the theme is as follows: . \u251c\u2500 .icons/ # Bundled icon sets \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript \u2502 \u2514\u2500 stylesheets/ # Stylesheets \u251c\u2500 partials/ \u2502 \u251c\u2500 integrations/ # Third-party integrations \u2502 \u2502 \u251c\u2500 analytics.html # - Google Analytics \u2502 \u2502 \u2514\u2500 disqus.html # - Disqus \u2502 \u251c\u2500 languages/ # Localized languages \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Localized labels \u2502 \u251c\u2500 logo.html # Logo in header and sidebar \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 palette.html # Color palette \u2502 \u251c\u2500 search.html # Search box \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 source-date.html # Last updated date \u2502 \u251c\u2500 source-link.html # Link to source file \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 toc.html # Table of contents \u2502 \u2514\u2500 toc-item.html # Table of contents item \u251c\u2500 404 .html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page","title":"Setup and theme structure"},{"location":"customization/#overriding-partials","text":"In order to override a partial, we can replace it with a file of the same name and location in the overrides directory. For example, to replace the original footer.html , create a footer.html file in the overrides/partials directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 partials/ \u2502 \u2514\u2500 footer.html \u2514\u2500 mkdocs.yml MkDocs will now use the new partial when rendering the theme. This can be done with any file.","title":"Overriding partials"},{"location":"customization/#overriding-blocks-recommended","text":"Besides overriding partials, it's also possible to override (and extend) template blocks , which are defined inside the templates and wrap specific features. To override a block, create a main.html file inside the overrides directory: . \u251c\u2500 overrides/ \u2502 \u2514\u2500 main.html \u2514\u2500 mkdocs.yml Then, e.g. to override the site title, add the following line to main.html : {% extends \"base.html\" %} {% block htmltitle %} < title > Lorem ipsum dolor sit amet </ title > {% endblock %} Material for MkDocs provides the following template blocks: Block name Purpose analytics Wraps the Google Analytics integration announce Wraps the announcement bar config Wraps the JavaScript application config content Wraps the main content disqus Wraps the Disqus integration extrahead Empty block to add custom meta tags fonts Wraps the font definitions footer Wraps the footer with navigation and copyright header Wraps the fixed header bar hero Wraps the hero teaser (if available) htmltitle Wraps the <title> tag libs Wraps the JavaScript libraries (header) outdated Wraps the version warning scripts Wraps the JavaScript application (footer) source Wraps the linked source files site_meta Wraps the meta tags in the document head site_nav Wraps the site navigation and table of contents styles Wraps the stylesheets (also extra sources) tabs Wraps the tabs navigation (if available) For more on this topic refer to the MkDocs documentation .","title":"Overriding blocks"},{"location":"customization/#additional-variables","text":"Besides template blocks, Material for MkDocs provides extra variables for parts that cannot be overridden with template blocks (due to technical limitations of the template engine). If you want to add further information after the Made with Material for MkDocs hint in the footer, add the following line to main.html : {% extends \"base.html\" %} {% set extracopyright %} <!-- Add your additional information here --> {% endset %} Material for MkDocs provides the following additional variables: Block name Purpose extracopyright Adds custom copyright information","title":"Additional variables"},{"location":"customization/#theme-development","text":"Material for MkDocs is built on top of TypeScript , RxJS and SASS , and uses a lean, custom build process to put everything together. 1 If you want to make more fundamental changes, it may be necessary to make the adjustments directly in the source of the theme and recompile it.","title":"Theme development"},{"location":"customization/#environment-setup","text":"In order to start development on Material for MkDocs, a Node.js version of at least 14 is required. First, clone the repository: git clone https://github.com/squidfunk/mkdocs-material Next, all dependencies need to be installed, which is done with: cd mkdocs-material pip install -r requirements.txt pip install mkdocs-minify-plugin pip install mkdocs-redirects npm install","title":"Environment setup"},{"location":"customization/#development-mode","text":"Start the watcher with: npm start Then, in a second session, start the MkDocs live preview server with: mkdocs serve Point your browser to localhost:8000 and you should see this documentation in front of you. Automatically generated files Never make any changes in the material directory, as the contents of this directory are automatically generated from the src directory and will be overwritten when the theme is built.","title":"Development mode"},{"location":"customization/#building-the-theme","text":"When you're finished making your changes, you can build the theme by invoking: npm run build This triggers the production-level compilation and minification of all stylesheets and JavaScript sources. When the command exits, the final files are located in the material directory. Add the theme_dir variable pointing to the aforementioned directory in the original mkdocs.yml . Now you can run mkdocs build and you should see your documentation with your changes to the original theme. Prior to version 7.0, the build was based on Webpack. This led to broken builds due to frequent incompatibilities with loaders and plugins, so we decided to swap Webpack for a leaner custom solution which is now based on RxJS as the application itself. This enabled us to remove more than 500 dependencies (~30% less). \u21a9","title":"Building the theme"},{"location":"data-privacy/","text":"Data privacy \u00b6 In itself, Material for MkDocs does not perform any tracking and adheres to the General Data Protection Regulation (GDPR), but it integrates with some third-party services that may not. Third-party services \u00b6 Google Fonts \u00b6 Material for MkDocs makes fonts configurable by relying on Google Fonts CDN, which may be in breach with GDPR. The usage of Google's CDN can be easily disabled via mkdocs.yml . Google Analytics and Disqus \u00b6 Material for MkDocs comes with optional Google Analytics and Disqus integrations, both of which must be enabled explicitly, so there's no immediate action if you don't use those.","title":"Data privacy"},{"location":"data-privacy/#data-privacy","text":"In itself, Material for MkDocs does not perform any tracking and adheres to the General Data Protection Regulation (GDPR), but it integrates with some third-party services that may not.","title":"Data privacy"},{"location":"data-privacy/#third-party-services","text":"","title":"Third-party services"},{"location":"data-privacy/#google-fonts","text":"Material for MkDocs makes fonts configurable by relying on Google Fonts CDN, which may be in breach with GDPR. The usage of Google's CDN can be easily disabled via mkdocs.yml .","title":"Google Fonts"},{"location":"data-privacy/#google-analytics-and-disqus","text":"Material for MkDocs comes with optional Google Analytics and Disqus integrations, both of which must be enabled explicitly, so there's no immediate action if you don't use those.","title":"Google Analytics and Disqus"},{"location":"deprecations/","text":"Deprecations \u00b6 This page includes a list of deprecations, indicating which features of Material for MkDocs were replaced with newer, more flexible alternatives, and thus should not be used anymore. Front matter \u00b6 Redirect \u00b6 Deprecated: 5.5 \u00b7 Removed: 6.0 The redirect key, which could be added via Metadata , allowed to specify a redirect from within a document to a new address, which is a good idea when moving content around: --- redirect: /path/to/new/file --- # Document title ... The redirects plugin provides the ability to define redirect mappings via mkdocs.yml , which is considered to be a much better solution to achieve the same result. It can be installed with pip : pip install mkdocs-redirects Redirect mappings can then be added to mkdocs.yml : plugins : - redirects : redirect_maps : path/to/old/file.md : path/to/new/file.md Source link \u00b6 Deprecated: 5.5 \u00b7 Removed: 6.0 The source and path keys, which could be added via Metadata , showed a source icon at the top right corner of a document, linking a document to a single source file: --- path: tree/master/docs source: deprecations.md --- # Document title ... Only a single source file could be linked, which is useless if a document refers to multiple files (or multiple sections within a single file). A more flexible approach is to use the new icon integration : [ :octicons-file-code-24: Source ]( https://github.com/squidfunk/mkdocs-material/blob/master/docs/deprecations.md ) This will render as Source , which can be included at arbitrary positions in any document. Hero \u00b6 Deprecated: 5.5 \u00b7 Removed: 6.0 The hero key, which could be added via Metadata , allowed to render a simple, text-only and page-local teaser text as part of a document. It could be set from front matter with: --- hero: Lorem ipsum dolor sit amet --- # Document title ... The recommended way is to override the hero block via theme extension for a specific page, which has the nice side effect that hero templates can be shared among multiple pages: Markdown --- template: hero.html --- # Document title ... Template {% extends \"base.html\" %} {% block hero %} <!-- Add custom hero here --> {% endblock %} Docker image \u00b6 Bundled plugins \u00b6 Deprecated: 5.5 \u00b7 Removed: 6.0 Over the last years, the Docker image has continually increased in size. For CI it's important that download times are as short as possible, which is why the following plugins will be removed: mkdocs-awesome-pages-plugin mkdocs-git-revision-date-localized-plugin Note that it's trivial to install plugins inside the Docker image before building your documentation. See the installation guide for a step-by-step guide.","title":"Deprecations"},{"location":"deprecations/#deprecations","text":"This page includes a list of deprecations, indicating which features of Material for MkDocs were replaced with newer, more flexible alternatives, and thus should not be used anymore.","title":"Deprecations"},{"location":"deprecations/#front-matter","text":"","title":"Front matter"},{"location":"deprecations/#redirect","text":"Deprecated: 5.5 \u00b7 Removed: 6.0 The redirect key, which could be added via Metadata , allowed to specify a redirect from within a document to a new address, which is a good idea when moving content around: --- redirect: /path/to/new/file --- # Document title ... The redirects plugin provides the ability to define redirect mappings via mkdocs.yml , which is considered to be a much better solution to achieve the same result. It can be installed with pip : pip install mkdocs-redirects Redirect mappings can then be added to mkdocs.yml : plugins : - redirects : redirect_maps : path/to/old/file.md : path/to/new/file.md","title":"Redirect"},{"location":"deprecations/#source-link","text":"Deprecated: 5.5 \u00b7 Removed: 6.0 The source and path keys, which could be added via Metadata , showed a source icon at the top right corner of a document, linking a document to a single source file: --- path: tree/master/docs source: deprecations.md --- # Document title ... Only a single source file could be linked, which is useless if a document refers to multiple files (or multiple sections within a single file). A more flexible approach is to use the new icon integration : [ :octicons-file-code-24: Source ]( https://github.com/squidfunk/mkdocs-material/blob/master/docs/deprecations.md ) This will render as Source , which can be included at arbitrary positions in any document.","title":"Source link"},{"location":"deprecations/#hero","text":"Deprecated: 5.5 \u00b7 Removed: 6.0 The hero key, which could be added via Metadata , allowed to render a simple, text-only and page-local teaser text as part of a document. It could be set from front matter with: --- hero: Lorem ipsum dolor sit amet --- # Document title ... The recommended way is to override the hero block via theme extension for a specific page, which has the nice side effect that hero templates can be shared among multiple pages: Markdown --- template: hero.html --- # Document title ... Template {% extends \"base.html\" %} {% block hero %} <!-- Add custom hero here --> {% endblock %}","title":"Hero"},{"location":"deprecations/#docker-image","text":"","title":"Docker image"},{"location":"deprecations/#bundled-plugins","text":"Deprecated: 5.5 \u00b7 Removed: 6.0 Over the last years, the Docker image has continually increased in size. For CI it's important that download times are as short as possible, which is why the following plugins will be removed: mkdocs-awesome-pages-plugin mkdocs-git-revision-date-localized-plugin Note that it's trivial to install plugins inside the Docker image before building your documentation. See the installation guide for a step-by-step guide.","title":"Bundled plugins"},{"location":"getting-started/","text":"Getting started \u00b6 Material for MkDocs is a theme for MkDocs , a static site generator geared towards (technical) project documentation. If you're familiar with Python, you can install Material for MkDocs with pip , the Python package manager. If not, we recommended using docker . In case you're running into problems, consult the troubleshooting section. Installation \u00b6 with pip recommended \u00b6 Material for MkDocs can be installed with pip : pip install mkdocs-material This will automatically install compatible versions of all dependencies: MkDocs , Markdown , Pygments and Python Markdown Extensions . Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately. with docker \u00b6 The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-material The mkdocs executable is provided as an entry point and serve is the default command. If you're not familiar with Docker don't worry, we have you covered in the following sections. The following plugins are bundled with the Docker image: mkdocs-minify-plugin mkdocs-redirects How to add plugins to the Docker image? Material for MkDocs bundles useful and common plugins while trying not to blow up the size of the official image. If the plugin you want to use is not included, create a new Dockerfile and extend the official Docker image with your custom installation routine: FROM squidfunk/mkdocs-material RUN pip install ... Next, you can build the image with the following command: docker build -t squidfunk/mkdocs-material . The new image can be used exactly like the official image. with git \u00b6 Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/squidfunk/mkdocs-material.git The theme will reside in the folder mkdocs-material/material . When cloning from git , you must install all required dependencies yourself: pip install -r mkdocs-material/requirements.txt","title":"Getting started"},{"location":"getting-started/#getting-started","text":"Material for MkDocs is a theme for MkDocs , a static site generator geared towards (technical) project documentation. If you're familiar with Python, you can install Material for MkDocs with pip , the Python package manager. If not, we recommended using docker . In case you're running into problems, consult the troubleshooting section.","title":"Getting started"},{"location":"getting-started/#installation","text":"","title":"Installation"},{"location":"getting-started/#with-pip-recommended","text":"Material for MkDocs can be installed with pip : pip install mkdocs-material This will automatically install compatible versions of all dependencies: MkDocs , Markdown , Pygments and Python Markdown Extensions . Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately.","title":"with pip"},{"location":"getting-started/#with-docker","text":"The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-material The mkdocs executable is provided as an entry point and serve is the default command. If you're not familiar with Docker don't worry, we have you covered in the following sections. The following plugins are bundled with the Docker image: mkdocs-minify-plugin mkdocs-redirects How to add plugins to the Docker image? Material for MkDocs bundles useful and common plugins while trying not to blow up the size of the official image. If the plugin you want to use is not included, create a new Dockerfile and extend the official Docker image with your custom installation routine: FROM squidfunk/mkdocs-material RUN pip install ... Next, you can build the image with the following command: docker build -t squidfunk/mkdocs-material . The new image can be used exactly like the official image.","title":"with docker"},{"location":"getting-started/#with-git","text":"Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/squidfunk/mkdocs-material.git The theme will reside in the folder mkdocs-material/material . When cloning from git , you must install all required dependencies yourself: pip install -r mkdocs-material/requirements.txt","title":"with git"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2016-2021 Martin Donath Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2016-2021 Martin Donath Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"publishing-your-site/","text":"Publishing your site \u00b6 The great thing about hosting project documentation in a git repository is the ability to deploy it automatically when new changes are pushed. MkDocs makes this ridiculously simple. GitHub Pages \u00b6 If you're already hosting your code on GitHub, GitHub Pages is certainly the most convenient way to publish your project documentation. It's free of charge and pretty easy to set up. with GitHub Actions \u00b6 Using GitHub Actions you can automate the deployment of your project documentation. At the root of your repository, create a new GitHub Actions workflow, e.g. .github/workflows/ci.yml , and copy and paste the following contents: Material for MkDocs name : ci # (1) on : push : branches : # (2) - master - main jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - run : pip install mkdocs-material # (3) - run : mkdocs gh-deploy --force You can change the name to your liking. At some point, GitHub renamed master to main . If your default branch is named master , you can safely remove main , vice versa. This is the place to install further MkDocs plugins or Markdown extensions with pip to be used during the build: pip install \\ mkdocs-material \\ mkdocs-awesome-pages-plugin \\ ... Insiders name : ci on : push : branches : - master - main jobs : deploy : runs-on : ubuntu-latest if : github.event.repository.fork == false steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - run : pip install git+https://${GH_TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git - run : mkdocs gh-deploy --force env : GH_TOKEN : ${{ secrets.GH_TOKEN }} Now, when a new commit is pushed to either the master or main branches, the static site is automatically built and deployed. Push your changes to see the workflow in action. Your documentation should shortly appear at <username>.github.io/<repository> . Remember to set the GH_TOKEN environment variable to the value of your personal access token when deploying Insiders , which can be done using secrets . with MkDocs \u00b6 If you prefer to deploy your project documentation manually, you can just invoke the following command from the directory containing the mkdocs.yml file: mkdocs gh-deploy --force GitLab Pages \u00b6 If you're hosting your code on GitLab, deploying to GitLab Pages can be done by using the GitLab CI task runner. At the root of your repository, create a task definition named .gitlab-ci.yml and copy and paste the following contents: Material for MkDocs image : python:latest pages : stage : deploy only : - master script : - pip install mkdocs-material - mkdocs build --site-dir public artifacts : paths : - public Insiders image : python:latest pages : stage : deploy only : - master script : - pip install git+https://${GH_TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git - mkdocs build --site-dir public artifacts : paths : - public Now, when a new commit is pushed to master , the static site is automatically built and deployed. Commit and push the file to your repository to see the workflow in action. Your documentation should shortly appear at <username>.gitlab.io/<repository> . Remember to set the GH_TOKEN environment variable to the value of your personal access token when deploying Insiders , which can be done using masked custom variables .","title":"Publishing your site"},{"location":"publishing-your-site/#publishing-your-site","text":"The great thing about hosting project documentation in a git repository is the ability to deploy it automatically when new changes are pushed. MkDocs makes this ridiculously simple.","title":"Publishing your site"},{"location":"publishing-your-site/#github-pages","text":"If you're already hosting your code on GitHub, GitHub Pages is certainly the most convenient way to publish your project documentation. It's free of charge and pretty easy to set up.","title":"GitHub Pages"},{"location":"publishing-your-site/#with-github-actions","text":"Using GitHub Actions you can automate the deployment of your project documentation. At the root of your repository, create a new GitHub Actions workflow, e.g. .github/workflows/ci.yml , and copy and paste the following contents: Material for MkDocs name : ci # (1) on : push : branches : # (2) - master - main jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - run : pip install mkdocs-material # (3) - run : mkdocs gh-deploy --force You can change the name to your liking. At some point, GitHub renamed master to main . If your default branch is named master , you can safely remove main , vice versa. This is the place to install further MkDocs plugins or Markdown extensions with pip to be used during the build: pip install \\ mkdocs-material \\ mkdocs-awesome-pages-plugin \\ ... Insiders name : ci on : push : branches : - master - main jobs : deploy : runs-on : ubuntu-latest if : github.event.repository.fork == false steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - run : pip install git+https://${GH_TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git - run : mkdocs gh-deploy --force env : GH_TOKEN : ${{ secrets.GH_TOKEN }} Now, when a new commit is pushed to either the master or main branches, the static site is automatically built and deployed. Push your changes to see the workflow in action. Your documentation should shortly appear at <username>.github.io/<repository> . Remember to set the GH_TOKEN environment variable to the value of your personal access token when deploying Insiders , which can be done using secrets .","title":"with GitHub Actions"},{"location":"publishing-your-site/#with-mkdocs","text":"If you prefer to deploy your project documentation manually, you can just invoke the following command from the directory containing the mkdocs.yml file: mkdocs gh-deploy --force","title":"with MkDocs"},{"location":"publishing-your-site/#gitlab-pages","text":"If you're hosting your code on GitLab, deploying to GitLab Pages can be done by using the GitLab CI task runner. At the root of your repository, create a task definition named .gitlab-ci.yml and copy and paste the following contents: Material for MkDocs image : python:latest pages : stage : deploy only : - master script : - pip install mkdocs-material - mkdocs build --site-dir public artifacts : paths : - public Insiders image : python:latest pages : stage : deploy only : - master script : - pip install git+https://${GH_TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git - mkdocs build --site-dir public artifacts : paths : - public Now, when a new commit is pushed to master , the static site is automatically built and deployed. Commit and push the file to your repository to see the workflow in action. Your documentation should shortly appear at <username>.gitlab.io/<repository> . Remember to set the GH_TOKEN environment variable to the value of your personal access token when deploying Insiders , which can be done using masked custom variables .","title":"GitLab Pages"},{"location":"troubleshooting/","text":"Troubleshooting \u00b6 Theme not recognized \u00b6 Operating systems: Error: Unrecognized theme mkdocs serve # => INFO - Building documentation... # => ERROR - Config value: 'theme'. Error: Unrecognised theme 'material'. # => ... # => ConfigurationError: Aborted with 1 Configuration Errors! If you run into this error, the most common reason is that you installed MkDocs through some package manager (e.g. brew or apt-get ) and Material for MkDocs through pip , so both packages end up in different locations. MkDocs only checks its install location for themes. Inadequate permissions \u00b6 Operating systems: Error: Permission denied pip install mkdocs-material # => Could not install packages due to an EnvironmentError: [Errno 13] Permission denied: '...' # => Consider using the --user option or check the permissions. When you're running the pre-installed version of Python on macOS, pip tries to install packages in a folder for which your user might not have the adequate permissions. There are three possible solutions for this, the recommended one of which is to use virtual environments: Virtual environments If you're installing Material for MkDocs with pip , the easiest way to make sure that you end up with the correct versions and without any incompatibility problems between packages it to use a virtual environment . First, ensure that you have a Python version of 3 or higher installed: python --version If you're good to go, create and activate a virtual environment with: python -m venv venv source ./venv/bin/activate Note that the second venv is the name of the folder where to create the virtual environment \u2013 you may choose it as you like. Your terminal should now print (venv) before the prompt and the python executable should be located inside the folder you just created. Next, install Material for MkDocs with pip , which will download and install all packages in the venv folder you just created, including MkDocs and its dependencies: pip install mkdocs-material Verify that MkDocs and Material for MkDocs were both installed correctly: mkdocs --version mkdocs serve --help MkDocs should list material as an option under the --theme flag. When you're finished working with MkDocs, you can exit the virtual environment with: deactivate User space Provide the --user flag to the install command and pip will install the package in a user-site location. While this is not a global installation, it's still not isolated and may lead to problems when you use different versions of Material for MkDocs in other projects: pip install --user mkdocs-material Upgrade Python Upgrade your Python installation by installing Python with Homebrew . This should eliminate a lot of problems you will run into with pip . Yet, it's still not an isolated installation which may also lead to the same problems as installing in user space: brew upgrade python","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#theme-not-recognized","text":"Operating systems: Error: Unrecognized theme mkdocs serve # => INFO - Building documentation... # => ERROR - Config value: 'theme'. Error: Unrecognised theme 'material'. # => ... # => ConfigurationError: Aborted with 1 Configuration Errors! If you run into this error, the most common reason is that you installed MkDocs through some package manager (e.g. brew or apt-get ) and Material for MkDocs through pip , so both packages end up in different locations. MkDocs only checks its install location for themes.","title":"Theme not recognized"},{"location":"troubleshooting/#inadequate-permissions","text":"Operating systems: Error: Permission denied pip install mkdocs-material # => Could not install packages due to an EnvironmentError: [Errno 13] Permission denied: '...' # => Consider using the --user option or check the permissions. When you're running the pre-installed version of Python on macOS, pip tries to install packages in a folder for which your user might not have the adequate permissions. There are three possible solutions for this, the recommended one of which is to use virtual environments: Virtual environments If you're installing Material for MkDocs with pip , the easiest way to make sure that you end up with the correct versions and without any incompatibility problems between packages it to use a virtual environment . First, ensure that you have a Python version of 3 or higher installed: python --version If you're good to go, create and activate a virtual environment with: python -m venv venv source ./venv/bin/activate Note that the second venv is the name of the folder where to create the virtual environment \u2013 you may choose it as you like. Your terminal should now print (venv) before the prompt and the python executable should be located inside the folder you just created. Next, install Material for MkDocs with pip , which will download and install all packages in the venv folder you just created, including MkDocs and its dependencies: pip install mkdocs-material Verify that MkDocs and Material for MkDocs were both installed correctly: mkdocs --version mkdocs serve --help MkDocs should list material as an option under the --theme flag. When you're finished working with MkDocs, you can exit the virtual environment with: deactivate User space Provide the --user flag to the install command and pip will install the package in a user-site location. While this is not a global installation, it's still not isolated and may lead to problems when you use different versions of Material for MkDocs in other projects: pip install --user mkdocs-material Upgrade Python Upgrade your Python installation by installing Python with Homebrew . This should eliminate a lot of problems you will run into with pip . Yet, it's still not an isolated installation which may also lead to the same problems as installing in user space: brew upgrade python","title":"Inadequate permissions"},{"location":"upgrading/","text":"Upgrading \u00b6 Upgrade to the latest version with: pip install --upgrade mkdocs-material Inspect the currently installed version with: pip show mkdocs-material Upgrading from 6.x to 7.x \u00b6 What's new? \u00b6 Added support for deploying multiple versions Added support for integrating a language selector Added support for rendering admonitions as inline blocks Rewrite of the underlying reactive architecture Removed Webpack in favor of reactive build strategy (-480 dependencies) Fixed keyboard navigation for code blocks after content tabs switch Changes to mkdocs.yml \u00b6 extra.version.method \u00b6 The versioning method configuration was renamed to extra.version.provider to allow for different versioning strategies in the future: 7.x extra : version : provider : mike 6.x extra : version : method : mike Changes to *.html files \u00b6 The templates have undergone a set of changes to make them future-proof. If you've used theme extension to override a block or template, make sure that it matches the new structure: If you've overridden a block , check base.html for potential changes If you've overridden a template , check the respective *.html file for potential changes base.html @@ -61,7 +61,7 @@ font.text | replace(' ', '+') + ':300,400,400i,700%7C' + font.code | replace(' ', '+') }}&display=fallback\"> - <style>body,input{font-family:\"{{ font.text }}\",-apple-system,BlinkMacSystemFont,Helvetica,Arial,sans-serif}code,kbd,pre{font-family:\"{{ font.code }}\",SFMono-Regular,Consolas,Menlo,monospace}</style> + <style>:root{--md-text-font-family:\"{{ font.text }}\";--md-code-font-family:\"{{ font.code }}\"}</style> {% endif %} {% endblock %} {% if config.extra.manifest %} @@ -131,7 +131,7 @@ {% if page and page.meta and page.meta.hide %} {% set hidden = \"hidden\" if \"navigation\" in page.meta.hide %} {% endif %} - <div class=\"md-sidebar md-sidebar--primary\" data-md-component=\"navigation\" {{ hidden }}> + <div class=\"md-sidebar md-sidebar--primary\" data-md-component=\"sidebar\" data-md-type=\"navigation\" {{ hidden }}> <div class=\"md-sidebar__scrollwrap\"> <div class=\"md-sidebar__inner\"> {% include \"partials/nav.html\" %} @@ -143,7 +143,7 @@ {% if page and page.meta and page.meta.hide %} {% set hidden = \"hidden\" if \"toc\" in page.meta.hide %} {% endif %} - <div class=\"md-sidebar md-sidebar--secondary\" data-md-component=\"toc\" {{ hidden }}> + <div class=\"md-sidebar md-sidebar--secondary\" data-md-component=\"sidebar\" data-md-type=\"toc\" {{ hidden }}> <div class=\"md-sidebar__scrollwrap\"> <div class=\"md-sidebar__inner\"> {% include \"partials/toc.html\" %} @@ -152,7 +152,7 @@ </div> {% endif %} {% endblock %} - <div class=\"md-content\"> + <div class=\"md-content\" data-md-component=\"content\"> <article class=\"md-content__inner md-typeset\"> {% block content %} {% if page.edit_url %} @@ -183,10 +183,18 @@ {% include \"partials/footer.html\" %} {% endblock %} </div> - {% block scripts %} - <script src=\"{{ 'assets/javascripts/vendor.18f0862e.min.js' | url }}\"></script> - <script src=\"{{ 'assets/javascripts/bundle.994580cf.min.js' | url }}\"></script> - {%- set translations = {} -%} + <div class=\"md-dialog\" data-md-component=\"dialog\"> + <div class=\"md-dialog__inner md-typeset\"></div> + </div> + {% block config %} + {%- set app = { + \"base\": base_url, + \"features\": features, + \"translations\": {}, + \"search\": \"assets/javascripts/workers/search.217ffd95.min.js\" | url, + \"version\": config.extra.version or None + } -%} + {%- set translations = app.translations -%} {%- for key in [ \"clipboard.copy\", \"clipboard.copied\", @@ -204,19 +212,12 @@ ] -%} {%- set _ = translations.update({ key: lang.t(key) }) -%} {%- endfor -%} - <script id=\"__lang\" type=\"application/json\"> - {{- translations | tojson -}} - </script> - {% block config %}{% endblock %} - <script> - app = initialize({ - base: \"{{ base_url }}\", - features: {{ features or [] | tojson }}, - search: Object.assign({ - worker: \"{{ 'assets/javascripts/worker/search.9c0e82ba.min.js' | url }}\" - }, typeof search !== \"undefined\" && search) - }) + <script id=\"__config\" type=\"application/json\"> + {{- app | tojson -}} </script> + {% endblock %} + {% block scripts %} + <script src=\"{{ 'assets/javascripts/bundle.926459b3.min.js' | url }}\"></script> {% for path in config[\"extra_javascript\"] %} <script src=\"{{ path | url }}\"></script> {% endfor %} partials/footer.html - <div class=\"md-footer-nav\"> - <nav class=\"md-footer-nav__inner md-grid\" aria-label=\"{{ lang.t('footer.title') }}\"> - {% if page.previous_page %} - <a href=\"{{ page.previous_page.url | url }}\" class=\"md-footer-nav__link md-footer-nav__link--prev\" rel=\"prev\"> - <div class=\"md-footer-nav__button md-icon\"> - {% include \".icons/material/arrow-left.svg\" %} - </div> - <div class=\"md-footer-nav__title\"> - <div class=\"md-ellipsis\"> - <span class=\"md-footer-nav__direction\"> - {{ lang.t(\"footer.previous\") }} - </span> - {{ page.previous_page.title }} - </div> - </div> - </a> - {% endif %} - {% if page.next_page %} - <a href=\"{{ page.next_page.url | url }}\" class=\"md-footer-nav__link md-footer-nav__link--next\" rel=\"next\"> - <div class=\"md-footer-nav__title\"> - <div class=\"md-ellipsis\"> - <span class=\"md-footer-nav__direction\"> - {{ lang.t(\"footer.next\") }} - </span> - {{ page.next_page.title }} - </div> + <nav class=\"md-footer__inner md-grid\" aria-label=\"{{ lang.t('footer.title') }}\"> + {% if page.previous_page %} + <a href=\"{{ page.previous_page.url | url }}\" class=\"md-footer__link md-footer__link--prev\" rel=\"prev\"> + <div class=\"md-footer__button md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} + </div> + <div class=\"md-footer__title\"> + <div class=\"md-ellipsis\"> + <span class=\"md-footer__direction\"> + {{ lang.t(\"footer.previous\") }} + </span> + {{ page.previous_page.title }} </div> - <div class=\"md-footer-nav__button md-icon\"> - {% include \".icons/material/arrow-right.svg\" %} + </div> + </a> + {% endif %} + {% if page.next_page %} + <a href=\"{{ page.next_page.url | url }}\" class=\"md-footer__link md-footer__link--next\" rel=\"next\"> + <div class=\"md-footer__title\"> + <div class=\"md-ellipsis\"> + <span class=\"md-footer__direction\"> + {{ lang.t(\"footer.next\") }} + </span> + {{ page.next_page.title }} </div> - </a> - {% endif %} - </nav> - </div> + </div> + <div class=\"md-footer__button md-icon\"> + {% include \".icons/material/arrow-right.svg\" %} + </div> + </a> + {% endif %} + </nav> {% endif %} <div class=\"md-footer-meta md-typeset\"> <div class=\"md-footer-meta__inner md-grid\"> partials/header.html @@ -6,21 +6,21 @@ {% set site_url = site_url ~ \"/index.html\" %} {% endif %} <header class=\"md-header\" data-md-component=\"header\"> - <nav class=\"md-header-nav md-grid\" aria-label=\"{{ lang.t('header.title') }}\"> - <a href=\"{{ site_url }}\" title=\"{{ config.site_name | e }}\" class=\"md-header-nav__button md-logo\" aria-label=\"{{ config.site_name }}\"> + <nav class=\"md-header__inner md-grid\" aria-label=\"{{ lang.t('header.title') }}\"> + <a href=\"{{ site_url }}\" title=\"{{ config.site_name | e }}\" class=\"md-header__button md-logo\" aria-label=\"{{ config.site_name }}\"> {% include \"partials/logo.html\" %} </a> - <label class=\"md-header-nav__button md-icon\" for=\"__drawer\"> + <label class=\"md-header__button md-icon\" for=\"__drawer\"> {% include \".icons/material/menu\" ~ \".svg\" %} </label> - <div class=\"md-header-nav__title\" data-md-component=\"header-title\"> - <div class=\"md-header-nav__ellipsis\"> - <div class=\"md-header-nav__topic\"> + <div class=\"md-header__title\" data-md-component=\"header-title\"> + <div class=\"md-header__ellipsis\"> + <div class=\"md-header__topic\"> <span class=\"md-ellipsis\"> {{ config.site_name }} </span> </div> - <div class=\"md-header-nav__topic\"> + <div class=\"md-header__topic\" data-md-component=\"header-topic\"> <span class=\"md-ellipsis\"> {% if page and page.meta and page.meta.title %} {{ page.meta.title }} @@ -31,14 +31,35 @@ </div> </div> </div> + <div class=\"md-header__options\"> + {% if config.extra.alternate %} + <div class=\"md-select\"> + {% set icon = config.theme.icon.alternate or \"material/translate\" %} + <span class=\"md-header__button md-icon\"> + {% include \".icons/\" ~ icon ~ \".svg\" %} + </span> + <div class=\"md-select__inner\"> + <ul class=\"md-select__list\"> + {% for alt in config.extra.alternate %} + <li class=\"md-select__item\"> + <a href=\"{{ alt.link | url }}\" class=\"md-select__link\"> + {{ alt.name }} + </a> + </li> + {% endfor %} + </ul> + </div> + </div> + {% endif %} + </div> {% if \"search\" in config[\"plugins\"] %} - <label class=\"md-header-nav__button md-icon\" for=\"__search\"> + <label class=\"md-header__button md-icon\" for=\"__search\"> {% include \".icons/material/magnify.svg\" %} </label> {% include \"partials/search.html\" %} {% endif %} {% if config.repo_url %} - <div class=\"md-header-nav__source\"> + <div class=\"md-header__source\"> {% include \"partials/source.html\" %} </div> {% endif %} partials/source.html @@ -4,5 +4,5 @@ {% import \"partials/language.html\" as lang with context %} -<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\"> +<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\" data-md-component=\"source\"> <div class=\"md-source__icon md-icon\"> {% set icon = config.theme.icon.repo or \"fontawesome/brands/git-alt\" %} {% include \".icons/\" ~ icon ~ \".svg\" %} partials/toc.html @@ -12,7 +12,7 @@ <span class=\"md-nav__icon md-icon\"></span> {{ lang.t(\"toc.title\") }} </label> - <ul class=\"md-nav__list\" data-md-scrollfix> + <ul class=\"md-nav__list\" data-md-component=\"toc\" data-md-scrollfix> {% for toc_item in toc %} {% include \"partials/toc-item.html\" %} {% endfor %} Upgrading from 5.x to 6.x \u00b6 What's new? \u00b6 Improved search result look and feel Improved search result stability while typing Improved search result grouping (pages + headings) Improved search result relevance and scoring Added display of missing query terms to search results Reduced size of vendor bundle by 25% (84kb \u2192 67kb) Reduced size of the Docker image to improve CI build performance Removed hero partial in favor of custom implementation Removed deprecated front matter features Changes to mkdocs.yml \u00b6 Following is a list of changes that need to be made to mkdocs.yml . Note that you only have to adjust the value if you defined it, so if your configuration does not contain the key, you can skip it. theme.features \u00b6 All feature flags that can be set from mkdocs.yml , like tabs and instant loading , are now prefixed with the name of the component or function they apply to, e.g. navigation.* : 6.x theme : features : - navigation.tabs - navigation.instant 5.x theme : features : - tabs - instant Changes to *.html files \u00b6 The templates have undergone a set of changes to make them future-proof. If you've used theme extension to override a block or template, make sure that it matches the new structure: If you've overridden a block , check base.html for potential changes If you've overridden a template , check the respective *.html file for potential changes base.html @@ -22,13 +22,6 @@ {% import \"partials/language.html\" as lang with context %} -<!-- Theme options --> -{% set palette = config.theme.palette %} -{% if not palette is mapping %} - {% set palette = palette | first %} -{% endif %} -{% set font = config.theme.font %} - <!doctype html> <html lang=\"{{ lang.t('language') }}\" class=\"no-js\"> <head> @@ -45,21 +38,8 @@ <meta name=\"description\" content=\"{{ config.site_description }}\" /> {% endif %} - <!-- Redirect --> - {% if page and page.meta and page.meta.redirect %} - <script> - var anchor = window.location.hash.substr(1) - location.href = '{{ page.meta.redirect }}' + - (anchor ? '#' + anchor : '') - </script> - - <!-- Fallback in case JavaScript is not available --> - <meta http-equiv=\"refresh\" content=\"0; url={{ page.meta.redirect }}\" /> - <meta name=\"robots\" content=\"noindex\" /> - <link rel=\"canonical\" href=\"{{ page.meta.redirect }}\" /> - <!-- Canonical --> - {% elif page.canonical_url %} + {% if page.canonical_url %} <link rel=\"canonical\" href=\"{{ page.canonical_url }}\" /> {% endif %} @@ -96,20 +76,21 @@ <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/main.css' | url }}\" /> <!-- Extra color palette --> - {% if palette.scheme or palette.primary or palette.accent %} + {% if config.theme.palette %} + {% set palette = config.theme.palette %} <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/palette.css' | url }}\" /> - {% endif %} - <!-- Theme-color meta tag for Android --> - {% if palette.primary %} - {% import \"partials/palette.html\" as map %} - {% set primary = map.primary( - palette.primary | replace(\" \", \"-\") | lower - ) %} - <meta name=\"theme-color\" content=\"{{ primary }}\" /> + <!-- Theme-color meta tag for Android --> + {% if palette.primary %} + {% import \"partials/palette.html\" as map %} + {% set primary = map.primary( + palette.primary | replace(\" \", \"-\") | lower + ) %} + <meta name=\"theme-color\" content=\"{{ primary }}\" /> + {% endif %} {% endif %} {% endblock %} @@ -120,7 +101,8 @@ {% block fonts %} <!-- Load fonts from Google --> - {% if font != false %} + {% if config.theme.font != false %} + {% set font = config.theme.font %} <link href=\"https://fonts.gstatic.com\" rel=\"preconnect\" crossorigin /> <link rel=\"stylesheet\" @@ -169,8 +151,12 @@ <!-- Text direction and color palette, if defined --> {% set direction = config.theme.direction or lang.t('direction') %} - {% if palette.scheme or palette.primary or palette.accent %} - {% set scheme = palette.scheme | lower %} + {% if config.theme.palette %} + {% set palette = config.theme.palette %} + {% if not palette is mapping %} + {% set palette = palette | first %} + {% endif %} + {% set scheme = palette.scheme | replace(\" \", \"-\") | lower %} {% set primary = palette.primary | replace(\" \", \"-\") | lower %} {% set accent = palette.accent | replace(\" \", \"-\") | lower %} <body @@ -179,18 +165,19 @@ data-md-color-primary=\"{{ primary }}\" data-md-color-accent=\"{{ accent }}\" > + + <!-- Experimental: set color scheme based on preference --> + {% if \"preference\" == scheme %} + <script> + if (matchMedia(\"(prefers-color-scheme: dark)\").matches) + document.body.setAttribute(\"data-md-color-scheme\", \"slate\") + </script> + {% endif %} + {% else %} <body dir=\"{{ direction }}\"> {% endif %} - <!-- Experimental: set color scheme based on preference --> - {% if \"preference\" == palette.scheme %} - <script> - if (matchMedia(\"(prefers-color-scheme: dark)\").matches) - document.body.setAttribute(\"data-md-color-scheme\", \"slate\") - </script> - {% endif %} - <!-- State toggles - we need to set autocomplete=\"off\" in order to reset the drawer on back button invocation in some browsers @@ -243,15 +230,11 @@ <div class=\"md-container\" data-md-component=\"container\"> <!-- Hero teaser --> - {% block hero %} - {% if page and page.meta and page.meta.hero %} - {% include \"partials/hero.html\" with context %} - {% endif %} - {% endblock %} + {% block hero %}{% endblock %} <!-- Tabs navigation --> {% block tabs %} - {% if \"tabs\" in config.theme.features %} + {% if \"navigation.tabs\" in config.theme.features %} {% include \"partials/tabs.html\" %} {% endif %} {% endblock %} @@ -310,13 +293,6 @@ </a> {% endif %} - <!-- Link to source file --> - {% block source %} - {% if page and page.meta and page.meta.source %} - {% include \"partials/source-link.html\" %} - {% endif %} - {% endblock %} - <!-- Hack: check whether the content contains a h1 headline. If it doesn't, the page title (or respectively site name) is used @@ -370,7 +346,10 @@ \"search.result.placeholder\", \"search.result.none\", \"search.result.one\", - \"search.result.other\" + \"search.result.other\", + \"search.result.more.one\", + \"search.result.more.other\", + \"search.result.term.missing\" ] -%} {%- set _ = translations.update({ key: lang.t(key) }) -%} {%- endfor -%} partials/hero.html @@ -1,12 +0,0 @@ -{#- - This file was automatically generated - do not edit --#} -{% set class = \"md-hero\" %} -{% if \"tabs\" not in config.theme.features %} - {% set class = \"md-hero md-hero--expand\" %} -{% endif %} -<div class=\"{{ class }}\" data-md-component=\"hero\"> - <div class=\"md-hero__inner md-grid\"> - {{ page.meta.hero }} - </div> -</div> partials/source-link -{#- - This file was automatically generated - do not edit --#} -{% import \"partials/language.html\" as lang with context %} -{% set repo = config.repo_url %} -{% if repo | last == \"/\" %} - {% set repo = repo[:-1] %} -{% endif %} -{% set path = page.meta.path | default(\"\") %} -<a href=\"{{ [repo, path, page.meta.source] | join('/') }}\" title=\"{{ page.meta.source }}\" class=\"md-content__button md-icon\"> - {{ lang.t(\"meta.source\") }} - {% set icon = config.theme.icon.repo or \"fontawesome/brands/git-alt\" %} - {% include \".icons/\" ~ icon ~ \".svg\" %} -</a> Upgrading from 4.x to 5.x \u00b6 What's new? \u00b6 Reactive architecture \u2013 try app . dialog$ . next ( \"Hi!\" ) in the console Instant loading \u2013 make Material behave like a Single Page Application Improved CSS customization with CSS variables \u2013 set your brand's colors Improved CSS resilience, e.g. proper sidebar locking for customized headers Improved icon integration and configuration \u2013 now including over 5k icons Added possibility to use any icon for logo, repository and social links Search UI does not freeze anymore (moved to web worker) Search index built only once when using instant loading Improved extensible keyboard handling Support for prebuilt search indexes Support for displaying stars and forks for GitLab repositories Support for scroll snapping of sidebars and search results Reduced HTML and CSS footprint due to deprecation of Internet Explorer support Slight facelifting of some UI elements (Admonitions, tables, ...) Changes to mkdocs.yml \u00b6 Following is a list of changes that need to be made to mkdocs.yml . Note that you only have to adjust the value if you defined it, so if your configuration does not contain the key, you can skip it. theme.feature \u00b6 Optional features like tabs and instant loading are now implemented as flags and can be enabled by listing them in mkdocs.yml under theme.features : 5.x theme : features : - tabs - instant 4.x theme : feature : tabs : true theme.logo.icon \u00b6 The logo icon configuration was centralized under theme.icon.logo and can now be set to any of the icons bundled with the theme : 5.x theme : icon : logo : material/cloud 4.x theme : logo : icon : cloud extra.repo_icon \u00b6 The repo icon configuration was centralized under theme.icon.repo and can now be set to any of the icons bundled with the theme : 5.x theme : icon : repo : fontawesome/brands/gitlab 4.x extra : repo_icon : gitlab extra.search.* \u00b6 Search is now configured as part of the plugin options . Note that the search languages must now be listed as an array of strings and the tokenizer was renamed to separator : 5.x plugins : - search : separator : '[\\s\\-\\.]+' lang : - en - de - ru 4.x extra : search : language : en, de, ru tokenizer : '[\\s\\-\\.]+' extra.social.* \u00b6 Social links stayed in the same place, but the type key was renamed to icon in order to match the new way of specifying which icon to be used: 5.x extra : social : - icon : fontawesome/brands/github-alt link : https://github.com/squidfunk 4.x extra : social : - type : github link : https://github.com/squidfunk Changes to *.html files \u00b6 The templates have undergone a set of changes to make them future-proof. If you've used theme extension to override a block or template, make sure that it matches the new structure: If you've overridden a block , check base.html for potential changes If you've overridden a template , check the respective *.html file for potential changes base.html @@ -2,7 +2,6 @@ This file was automatically generated - do not edit -#} {% import \"partials/language.html\" as lang with context %} -{% set feature = config.theme.feature %} {% set palette = config.theme.palette %} {% set font = config.theme.font %} <!doctype html> @@ -30,19 +29,6 @@ {% elif config.site_author %} <meta name=\"author\" content=\"{{ config.site_author }}\"> {% endif %} - {% for key in [ - \"clipboard.copy\", - \"clipboard.copied\", - \"search.language\", - \"search.pipeline.stopwords\", - \"search.pipeline.trimmer\", - \"search.result.none\", - \"search.result.one\", - \"search.result.other\", - \"search.tokenizer\" - ] %} - <meta name=\"lang:{{ key }}\" content=\"{{ lang.t(key) }}\"> - {% endfor %} <link rel=\"shortcut icon\" href=\"{{ config.theme.favicon | url }}\"> <meta name=\"generator\" content=\"mkdocs-{{ mkdocs_version }}, mkdocs-material-5.0.0\"> {% endblock %} @@ -56,9 +42,9 @@ {% endif %} {% endblock %} {% block styles %} - <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/application.********.css' | url }}\"> + <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/main.********.min.css' | url }}\"> {% if palette.primary or palette.accent %} - <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/application-palette.********.css' | url }}\"> + <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/palette.********.min.css' | url }}\"> {% endif %} {% if palette.primary %} {% import \"partials/palette.html\" as map %} @@ -69,20 +55,17 @@ {% endif %} {% endblock %} {% block libs %} - <script src=\"{{ 'assets/javascripts/modernizr.********.js' | url }}\"></script> {% endblock %} {% block fonts %} {% if font != false %} <link href=\"https://fonts.gstatic.com\" rel=\"preconnect\" crossorigin> <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family={{ font.text | replace(' ', '+') + ':300,400,400i,700%7C' + font.code | replace(' ', '+') }}&display=fallback\"> <style>body,input{font-family:\"{{ font.text }}\",\"Helvetica Neue\",Helvetica,Arial,sans-serif}code,kbd,pre{font-family:\"{{ font.code }}\",\"Courier New\",Courier,monospace}</style> {% endif %} {% endblock %} - <link rel=\"stylesheet\" href=\"{{ 'assets/fonts/material-icons.css' | url }}\"> {% if config.extra.manifest %} <link rel=\"manifest\" href=\"{{ config.extra.manifest | url }}\" crossorigin=\"use-credentials\"> {% endif %} @@ -95,47 +77,50 @@ {% endblock %} {% block extrahead %}{% endblock %} </head> + {% set direction = config.theme.direction | default(lang.t('direction')) %} {% if palette.primary or palette.accent %} {% set primary = palette.primary | replace(\" \", \"-\") | lower %} {% set accent = palette.accent | replace(\" \", \"-\") | lower %} - <body dir=\"{{ lang.t('direction') }}\" data-md-color-primary=\"{{ primary }}\" data-md-color-accent=\"{{ accent }}\"> + <body dir=\"{{ direction }}\" data-md-color-primary=\"{{ primary }}\" data-md-color-accent=\"{{ accent }}\"> {% else %} - <body dir=\"{{ lang.t('direction') }}\"> + <body dir=\"{{ direction }}\"> {% endif %} - <svg class=\"md-svg\"> - <defs> - {% set platform = config.extra.repo_icon or config.repo_url %} - {% if \"github\" in platform %} - {% include \"assets/images/icons/github.f0b8504a.svg\" %} - {% elif \"gitlab\" in platform %} - {% include \"assets/images/icons/gitlab.6dd19c00.svg\" %} - {% elif \"bitbucket\" in platform %} - {% include \"assets/images/icons/bitbucket.1b09e088.svg\" %} - {% endif %} - </defs> - </svg> <input class=\"md-toggle\" data-md-toggle=\"drawer\" type=\"checkbox\" id=\"__drawer\" autocomplete=\"off\"> <input class=\"md-toggle\" data-md-toggle=\"search\" type=\"checkbox\" id=\"__search\" autocomplete=\"off\"> - <label class=\"md-overlay\" data-md-component=\"overlay\" for=\"__drawer\"></label> + <label class=\"md-overlay\" for=\"__drawer\"></label> + <div data-md-component=\"skip\"> + {% if page.toc | first is defined %} + {% set skip = page.toc | first %} + <a href=\"{{ skip.url | url }}\" class=\"md-skip\"> + {{ lang.t('skip.link.title') }} + </a> + {% endif %} + </div> + <div data-md-component=\"announce\"> + {% if self.announce() %} + <aside class=\"md-announce\"> + <div class=\"md-announce__inner md-grid md-typeset\"> + {% block announce %}{% endblock %} + </div> + </aside> + {% endif %} + </div> {% block header %} {% include \"partials/header.html\" %} {% endblock %} - <div class=\"md-container\"> + <div class=\"md-container\" data-md-component=\"container\"> {% block hero %} {% if page and page.meta and page.meta.hero %} {% include \"partials/hero.html\" with context %} {% endif %} {% endblock %} - {% if feature.tabs %} - {% include \"partials/tabs.html\" %} - {% endif %} + {% block tabs %} + {% if \"tabs\" in config.theme.features %} + {% include \"partials/tabs.html\" %} + {% endif %} + {% endblock %} - <main class=\"md-main\" role=\"main\"> - <div class=\"md-main__inner md-grid\" data-md-component=\"container\"> + <main class=\"md-main\" data-md-component=\"main\"> + <div class=\"md-main__inner md-grid\"> {% block site_nav %} {% if nav %} <div class=\"md-sidebar md-sidebar--primary\" data-md-component=\"navigation\"> @@ -160,41 +141,25 @@ <article class=\"md-content__inner md-typeset\"> {% block content %} {% if page.edit_url %} - <a href=\"{{ page.edit_url }}\" title=\"{{ lang.t('edit.link.title') }}\" class=\"md-icon md-content__icon\">&#xE3C9;</a> + <a href=\"{{ page.edit_url }}\" title=\"{{ lang.t('edit.link.title') }}\" class=\"md-content__button md-icon\"> + {% include \".icons/material/pencil.svg\" %} + </a> {% endif %} + {% block source %} + {% if page and page.meta and page.meta.source %} + {% include \"partials/source-link.html\" %} + {% endif %} + {% endblock %} {% if not \"\\x3ch1\" in page.content %} <h1>{{ page.title | default(config.site_name, true)}}</h1> {% endif %} {{ page.content }} - {% block source %} - {% if page and page.meta and page.meta.source %} - <h2 id=\"__source\">{{ lang.t(\"meta.source\") }}</h2> - {% set repo = config.repo_url %} - {% if repo | last == \"/\" %} - {% set repo = repo[:-1] %} - {% endif %} - {% set path = page.meta.path | default([\"\"]) %} - {% set file = page.meta.source %} - <a href=\"{{ [repo, path, file] | join('/') }}\" title=\"{{ file }}\" class=\"md-source-file\"> - {{ file }} - </a> - {% endif %} - {% endblock %} + {% if page and page.meta %} + {% if page.meta.git_revision_date_localized or + page.meta.revision_date + %} + {% include \"partials/source-date.html\" %} - {% if page and page.meta and ( - page.meta.git_revision_date_localized or - page.meta.revision_date - ) %} - {% set label = lang.t(\"source.revision.date\") %} - <hr> - <div class=\"md-source-date\"> - <small> - {% if page.meta.git_revision_date_localized %} - {{ label }}: {{ page.meta.git_revision_date_localized }} - {% elif page.meta.revision_date %} - {{ label }}: {{ page.meta.revision_date }} - {% endif %} - </small> - </div> {% endif %} {% endblock %} {% block disqus %} @@ -208,29 +174,35 @@ {% include \"partials/footer.html\" %} {% endblock %} </div> {% block scripts %} - <script src=\"{{ 'assets/javascripts/application.********.js' | url }}\"></script> - {% if lang.t(\"search.language\") != \"en\" %} - {% set languages = lang.t(\"search.language\").split(\",\") %} - {% if languages | length and languages[0] != \"\" %} - {% set path = \"assets/javascripts/lunr/\" %} - <script src=\"{{ (path ~ 'lunr.stemmer.support.js') | url }}\"></script> - {% for language in languages | map(\"trim\") %} - {% if language != \"en\" %} - {% if language == \"ja\" %} - <script src=\"{{ (path ~ 'tinyseg.js') | url }}\"></script> - {% endif %} - {% if language in (\"ar\", \"da\", \"de\", \"es\", \"fi\", \"fr\", \"hu\", \"it\", \"ja\", \"nl\", \"no\", \"pt\", \"ro\", \"ru\", \"sv\", \"th\", \"tr\", \"vi\") %} - <script src=\"{{ (path ~ 'lunr.' ~ language ~ '.js') | url }}\"></script> - {% endif %} - {% endif %} - {% endfor %} - {% if languages | length > 1 %} - <script src=\"{{ (path ~ 'lunr.multi.js') | url }}\"></script> - {% endif %} - {% endif %} - {% endif %} - <script>app.initialize({version:\"{{ mkdocs_version }}\",url:{base:\"{{ base_url }}\"}})</script> + <script src=\"{{ 'assets/javascripts/vendor.********.min.js' | url }}\"></script> + <script src=\"{{ 'assets/javascripts/bundle.********.min.js' | url }}\"></script> + {%- set translations = {} -%} + {%- for key in [ + \"clipboard.copy\", + \"clipboard.copied\", + \"search.config.lang\", + \"search.config.pipeline\", + \"search.config.separator\", + \"search.result.placeholder\", + \"search.result.none\", + \"search.result.one\", + \"search.result.other\" + ] -%} + {%- set _ = translations.update({ key: lang.t(key) }) -%} + {%- endfor -%} + <script id=\"__lang\" type=\"application/json\"> + {{- translations | tojson -}} + </script> + {% block config %}{% endblock %} + <script> + app = initialize({ + base: \"{{ base_url }}\", + features: {{ config.theme.features | tojson }}, + search: Object.assign({ + worker: \"{{ 'assets/javascripts/worker/search.********.min.js' | url }}\" + }, typeof search !== \"undefined\" && search) + }) + </script> {% for path in config[\"extra_javascript\"] %} <script src=\"{{ path | url }}\"></script> {% endfor %} partials/footer.html @@ -5,34 +5,34 @@ <div class=\"md-footer-nav\"> - <nav class=\"md-footer-nav__inner md-grid\"> + <nav class=\"md-footer-nav__inner md-grid\" aria-label=\"{{ lang.t('footer.title') }}\"> {% if page.previous_page %} - <a href=\"{{ page.previous_page.url | url }}\" title=\"{{ page.previous_page.title | striptags }}\" class=\"md-flex md-footer-nav__link md-footer-nav__link--prev\" rel=\"prev\"> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <i class=\"md-icon md-icon--arrow-back md-footer-nav__button\"></i> + <a href=\"{{ page.previous_page.url | url }}\" title=\"{{ page.previous_page.title | striptags }}\" class=\"md-footer-nav__link md-footer-nav__link--prev\" rel=\"prev\"> + <div class=\"md-footer-nav__button md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} </div> - <div class=\"md-flex__cell md-flex__cell--stretch md-footer-nav__title\"> - <span class=\"md-flex__ellipsis\"> + <div class=\"md-footer-nav__title\"> + <div class=\"md-ellipsis\"> <span class=\"md-footer-nav__direction\"> {{ lang.t(\"footer.previous\") }} </span> {{ page.previous_page.title }} - </span> + </div> </div> </a> {% endif %} {% if page.next_page %} - <a href=\"{{ page.next_page.url | url }}\" title=\"{{ page.next_page.title | striptags }}\" class=\"md-flex md-footer-nav__link md-footer-nav__link--next\" rel=\"next\"> - <div class=\"md-flex__cell md-flex__cell--stretch md-footer-nav__title\"> - <span class=\"md-flex__ellipsis\"> + <a href=\"{{ page.next_page.url | url }}\" title=\"{{ page.next_page.title | striptags }}\" class=\"md-footer-nav__link md-footer-nav__link--next\" rel=\"next\"> + <div class=\"md-footer-nav__title\"> + <div class=\"md-ellipsis\"> <span class=\"md-footer-nav__direction\"> {{ lang.t(\"footer.next\") }} </span> {{ page.next_page.title }} - </span> + </div> </div> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <i class=\"md-icon md-icon--arrow-forward md-footer-nav__button\"></i> + <div class=\"md-footer-nav__button md-icon\"> + {% include \".icons/material/arrow-right.svg\" %} </div> </a> {% endif %} partials/header.html @@ -2,51 +2,43 @@ This file was automatically generated - do not edit -#} <header class=\"md-header\" data-md-component=\"header\"> - <nav class=\"md-header-nav md-grid\"> - <div class=\"md-flex\"> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" aria-label=\"{{ config.site_name }}\" class=\"md-header-nav__button md-logo\"> - {% if config.theme.logo.icon %} - <i class=\"md-icon\">{{ config.theme.logo.icon }}</i> - {% else %} - <img alt=\"logo\" src=\"{{ config.theme.logo | url }}\" width=\"24\" height=\"24\"> - {% endif %} - </a> - </div> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <label class=\"md-icon md-icon--menu md-header-nav__button\" for=\"__drawer\"></label> - </div> - <div class=\"md-flex__cell md-flex__cell--stretch\"> - <div class=\"md-flex__ellipsis md-header-nav__title\" data-md-component=\"title\"> - {% if config.site_name == page.title %} - {{ config.site_name }} - {% else %} - <span class=\"md-header-nav__topic\"> - {{ config.site_name }} - </span> - <span class=\"md-header-nav__topic\"> - {% if page and page.meta and page.meta.title %} - {{ page.meta.title }} - {% else %} - {{ page.title }} - {% endif %} - </span> - {% endif %} + <nav class=\"md-header-nav md-grid\" aria-label=\"{{ lang.t('header.title') }}\"> + <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" class=\"md-header-nav__button md-logo\" aria-label=\"{{ config.site_name }}\"> + {% include \"partials/logo.html\" %} + </a> + <label class=\"md-header-nav__button md-icon\" for=\"__drawer\"> + {% include \".icons/material/menu\" ~ \".svg\" %} + </label> + <div class=\"md-header-nav__title\" data-md-component=\"header-title\"> + {% if config.site_name == page.title %} + <div class=\"md-header-nav__ellipsis md-ellipsis\"> + {{ config.site_name }} </div> - </div> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - {% if \"search\" in config[\"plugins\"] %} - <label class=\"md-icon md-icon--search md-header-nav__button\" for=\"__search\"></label> - {% include \"partials/search.html\" %} - {% endif %} - </div> - {% if config.repo_url %} - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <div class=\"md-header-nav__source\"> - {% include \"partials/source.html\" %} - </div> + {% else %} + <div class=\"md-header-nav__ellipsis\"> + <span class=\"md-header-nav__topic md-ellipsis\"> + {{ config.site_name }} + </span> + <span class=\"md-header-nav__topic md-ellipsis\"> + {% if page and page.meta and page.meta.title %} + {{ page.meta.title }} + {% else %} + {{ page.title }} + {% endif %} + </span> </div> {% endif %} </div> + {% if \"search\" in config[\"plugins\"] %} + <label class=\"md-header-nav__button md-icon\" for=\"__search\"> + {% include \".icons/material/magnify.svg\" %} + </label> + {% include \"partials/search.html\" %} + {% endif %} + {% if config.repo_url %} + <div class=\"md-header-nav__source\"> + {% include \"partials/source.html\" %} + </div> + {% endif %} </nav> </header> partials/hero.html @@ -1,9 +1,8 @@ {#- This file was automatically generated - do not edit -#} -{% set feature = config.theme.feature %} {% set class = \"md-hero\" %} -{% if not feature.tabs %} +{% if \"tabs\" not in config.theme.features %} {% set class = \"md-hero md-hero--expand\" %} {% endif %} <div class=\"{{ class }}\" data-md-component=\"hero\"> partials/language.html @@ -3,12 +3,4 @@ -#} {% import \"partials/language/\" + config.theme.language + \".html\" as lang %} {% import \"partials/language/en.html\" as fallback %} -{% macro t(key) %}{{ { - \"direction\": config.theme.direction, - \"search.language\": ( - config.extra.search | default({}) - ).language, - \"search.tokenizer\": ( - config.extra.search | default({}) - ).tokenizer | default(\"\", true), -}[key] or lang.t(key) or fallback.t(key) }}{% endmacro %} +{% macro t(key) %}{{ lang.t(key) | default(fallback.t(key)) }}{% endmacro %} partials/logo.html @@ -0,0 +1,9 @@ +{#- + This file was automatically generated - do not edit +-#} +{% if config.theme.logo %} + <img src=\"{{ config.theme.logo | url }}\" alt=\"logo\"> +{% else %} + {% set icon = config.theme.icon.logo or \"material/library\" %} + {% include \".icons/\" ~ icon ~ \".svg\" %} +{% endif %} partials/nav-item.html @@ -14,9 +14,15 @@ {% endif %} <label class=\"md-nav__link\" for=\"{{ path }}\"> {{ nav_item.title }} + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/chevron-right.svg\" %} + </span> </label> - <nav class=\"md-nav\" data-md-component=\"collapsible\" data-md-level=\"{{ level }}\"> + <nav class=\"md-nav\" aria-label=\"{{ nav_item.title }}\" data-md-level=\"{{ level }}\"> <label class=\"md-nav__title\" for=\"{{ path }}\"> + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} + </span> {{ nav_item.title }} </label> <ul class=\"md-nav__list\" data-md-scrollfix> @@ -39,6 +45,9 @@ {% if toc | first is defined %} <label class=\"md-nav__link md-nav__link--active\" for=\"__toc\"> {{ nav_item.title }} + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/table-of-contents.svg\" %} + </span> </label> {% endif %} <a href=\"{{ nav_item.url | url }}\" title=\"{{ nav_item.title | striptags }}\" class=\"md-nav__link md-nav__link--active\"> partials/nav.html @@ -1,14 +1,10 @@ {#- This file was automatically generated - do not edit -#} -<nav class=\"md-nav md-nav--primary\" data-md-level=\"0\"> - <label class=\"md-nav__title md-nav__title--site\" for=\"__drawer\"> - <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" class=\"md-nav__button md-logo\"> - {% if config.theme.logo.icon %} - <i class=\"md-icon\">{{ config.theme.logo.icon }}</i> - {% else %} - <img alt=\"logo\" src=\"{{ config.theme.logo | url }}\" width=\"48\" height=\"48\"> - {% endif %} +<nav class=\"md-nav md-nav--primary\" aria-label=\"{{ lang.t('nav.title') }}\" data-md-level=\"0\"> + <label class=\"md-nav__title\" for=\"__drawer\"> + <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" class=\"md-nav__button md-logo\" aria-label=\"{{ config.site_name }}\"> + {% include \"partials/logo.html\" %} </a> {{ config.site_name }} </label> partials/search.html @@ -6,15 +6,18 @@ <label class=\"md-search__overlay\" for=\"__search\"></label> <div class=\"md-search__inner\" role=\"search\"> <form class=\"md-search__form\" name=\"search\"> - <input type=\"text\" class=\"md-search__input\" name=\"query\" aria-label=\"Search\" placeholder=\"{{ lang.t('search.placeholder') }}\" autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\" spellcheck=\"false\" data-md-component=\"query\" data-md-state=\"active\"> + <input type=\"text\" class=\"md-search__input\" name=\"query\" aria-label=\"{{ lang.t('search.placeholder') }}\" placeholder=\"{{ lang.t('search.placeholder') }}\" autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\" spellcheck=\"false\" data-md-component=\"search-query\" data-md-state=\"active\"> <label class=\"md-search__icon md-icon\" for=\"__search\"> + {% include \".icons/material/magnify.svg\" %} + {% include \".icons/material/arrow-left.svg\" %} </label> - <button type=\"reset\" class=\"md-icon md-search__icon\" data-md-component=\"reset\" tabindex=\"-1\"> - &#xE5CD; + <button type=\"reset\" class=\"md-search__icon md-icon\" aria-label=\"{{ lang.t('search.reset') }}\" data-md-component=\"search-reset\" tabindex=\"-1\"> + {% include \".icons/material/close.svg\" %} </button> </form> <div class=\"md-search__output\"> <div class=\"md-search__scrollwrap\" data-md-scrollfix> - <div class=\"md-search-result\" data-md-component=\"result\"> + <div class=\"md-search-result\" data-md-component=\"search-result\"> <div class=\"md-search-result__meta\"> {{ lang.t(\"search.result.placeholder\") }} </div> partials/social.html @@ -3,9 +3,12 @@ -#} {% if config.extra.social %} <div class=\"md-footer-social\"> - <link rel=\"stylesheet\" href=\"{{ 'assets/fonts/font-awesome.css' | url }}\"> {% for social in config.extra.social %} - <a href=\"{{ social.link }}\" target=\"_blank\" rel=\"noopener\" title=\"{{ social.type }}\" class=\"md-footer-social__link fa fa-{{ social.type }}\"></a> + {% set _,rest = social.link.split(\"//\") %} + {% set domain = rest.split(\"/\")[0] %} + <a href=\"{{ social.link }}\" target=\"_blank\" rel=\"noopener\" title=\"{{ domain }}\" class=\"md-footer-social__link\"> + {% include \".icons/\" ~ social.icon ~ \".svg\" %} + </a> {% endfor %} </div> {% endif %} partials/source-date.html @@ -0,0 +1,15 @@ +{#- + This file was automatically generated - do not edit +-#} +{% import \"partials/language.html\" as lang with context %} +{% set label = lang.t(\"source.revision.date\") %} +<hr> +<div class=\"md-source-date\"> + <small> + {% if page.meta.git_revision_date_localized %} + {{ label }}: {{ page.meta.git_revision_date_localized }} + {% elif page.meta.revision_date %} + {{ label }}: {{ page.meta.revision_date }} + {% endif %} + </small> +</div> partials/source-link.html @@ -0,0 +1,13 @@ +{#- + This file was automatically generated - do not edit +-#} +{% import \"partials/language.html\" as lang with context %} +{% set repo = config.repo_url %} +{% if repo | last == \"/\" %} + {% set repo = repo[:-1] %} +{% endif %} +{% set path = page.meta.path | default([\"\"]) %} +<a href=\"{{ [repo, path, page.meta.source] | join('/') }}\" title=\"{{ file }}\" class=\"md-content__button md-icon\"> + {{ lang.t(\"meta.source\") }} + {% include \".icons/\" ~ config.theme.icon.repo ~ \".svg\" %} +</a> partials/source.html @@ -2,24 +2,11 @@ This file was automatically generated - do not edit -#} {% import \"partials/language.html\" as lang with context %} -{% set platform = config.extra.repo_icon or config.repo_url %} -{% if \"github\" in platform %} - {% set repo_type = \"github\" %} -{% elif \"gitlab\" in platform %} - {% set repo_type = \"gitlab\" %} -{% elif \"bitbucket\" in platform %} - {% set repo_type = \"bitbucket\" %} -{% else %} - {% set repo_type = \"\" %} -{% endif %} -<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\" data-md-source=\"{{ repo_type }}\"> - {% if repo_type %} - <div class=\"md-source__icon\"> - <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"> - <use xlink:href=\"#__{{ repo_type }}\" width=\"24\" height=\"24\"></use> - </svg> - </div> - {% endif %} +<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\"> + <div class=\"md-source__icon md-icon\"> + {% set icon = config.theme.icon.repo or \"fontawesome/brands/git-alt\" %} + {% include \".icons/\" ~ icon ~ \".svg\" %} + </div> <div class=\"md-source__repository\"> {{ config.repo_name }} </div> partials/tabs-item.html @@ -1,7 +1,7 @@ {#- This file was automatically generated - do not edit -#} -{% if nav_item.is_homepage %} +{% if nav_item.is_homepage or nav_item.url == \"index.html\" %} <li class=\"md-tabs__item\"> {% if not page.ancestors | length and nav | selectattr(\"url\", page.url) %} <a href=\"{{ nav_item.url | url }}\" class=\"md-tabs__link md-tabs__link--active\"> partials/tabs.html @@ -5,7 +5,7 @@ {% if page.ancestors | length > 0 %} {% set class = \"md-tabs md-tabs--active\" %} {% endif %} -<nav class=\"{{ class }}\" data-md-component=\"tabs\"> +<nav class=\"{{ class }}\" aria-label=\"{{ lang.t('tabs.title') }}\" data-md-component=\"tabs\"> <div class=\"md-tabs__inner md-grid\"> <ul class=\"md-tabs__list\"> {% for nav_item in nav %} partials/toc-item.html @@ -6,7 +6,7 @@ {{ toc_item.title }} </a> {% if toc_item.children %} - <nav class=\"md-nav\"> + <nav class=\"md-nav\" aria-label=\"{{ toc_item.title }}\"> <ul class=\"md-nav__list\"> {% for toc_item in toc_item.children %} {% include \"partials/toc-item.html\" %} partials/toc.html @@ -2,35 +2,22 @@ This file was automatically generated - do not edit -#} {% import \"partials/language.html\" as lang with context %} -<nav class=\"md-nav md-nav--secondary\"> +<nav class=\"md-nav md-nav--secondary\" aria-label=\"{{ lang.t('toc.title') }}\"> {% endif %} {% if toc | first is defined %} <label class=\"md-nav__title\" for=\"__toc\"> + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} + </span> {{ lang.t(\"toc.title\") }} </label> <ul class=\"md-nav__list\" data-md-scrollfix> {% for toc_item in toc %} {% include \"partials/toc-item.html\" %} {% endfor %} - {% if page.meta.source and page.meta.source | length > 0 %} - <li class=\"md-nav__item\"> - <a href=\"#__source\" class=\"md-nav__link md-nav__link--active\"> - {{ lang.t(\"meta.source\") }} - </a> - </li> - {% endif %} - {% set disqus = config.extra.disqus %} - {% if page and page.meta and page.meta.disqus is string %} - {% set disqus = page.meta.disqus %} - {% endif %} - {% if not page.is_homepage and disqus %} - <li class=\"md-nav__item\"> - <a href=\"#__comments\" class=\"md-nav__link md-nav__link--active\"> - {{ lang.t(\"meta.comments\") }} - </a> - </li> - {% endif %} </ul> {% endif %} </nav> Upgrading from 3.x to 4.x \u00b6 What's new? \u00b6 Material for MkDocs 4 fixes incorrect layout on Chinese systems. The fix includes a mandatory change of the base font-size from 10px to 20px which means all rem values needed to be updated. Within the theme, px to rem calculation is now encapsulated in a new function called px2rem which is part of the SASS code base. If you use Material for MkDocs with custom CSS that is based on rem values, note that those values must now be divided by 2. Now, 1.0rem doesn't map to 10px , but 20px . To learn more about the problem and implications, please refer to #911 in which the problem was discovered and fixed. Changes to mkdocs.yml \u00b6 None. Changes to *.html files \u00b6 None.","title":"Upgrading"},{"location":"upgrading/#upgrading","text":"Upgrade to the latest version with: pip install --upgrade mkdocs-material Inspect the currently installed version with: pip show mkdocs-material","title":"Upgrading"},{"location":"upgrading/#upgrading-from-6x-to-7x","text":"","title":"Upgrading from 6.x to 7.x"},{"location":"upgrading/#whats-new","text":"Added support for deploying multiple versions Added support for integrating a language selector Added support for rendering admonitions as inline blocks Rewrite of the underlying reactive architecture Removed Webpack in favor of reactive build strategy (-480 dependencies) Fixed keyboard navigation for code blocks after content tabs switch","title":"What's new?"},{"location":"upgrading/#changes-to-mkdocsyml","text":"","title":"Changes to mkdocs.yml"},{"location":"upgrading/#extraversionmethod","text":"The versioning method configuration was renamed to extra.version.provider to allow for different versioning strategies in the future: 7.x extra : version : provider : mike 6.x extra : version : method : mike","title":"extra.version.method"},{"location":"upgrading/#changes-to-html-files","text":"The templates have undergone a set of changes to make them future-proof. If you've used theme extension to override a block or template, make sure that it matches the new structure: If you've overridden a block , check base.html for potential changes If you've overridden a template , check the respective *.html file for potential changes base.html @@ -61,7 +61,7 @@ font.text | replace(' ', '+') + ':300,400,400i,700%7C' + font.code | replace(' ', '+') }}&display=fallback\"> - <style>body,input{font-family:\"{{ font.text }}\",-apple-system,BlinkMacSystemFont,Helvetica,Arial,sans-serif}code,kbd,pre{font-family:\"{{ font.code }}\",SFMono-Regular,Consolas,Menlo,monospace}</style> + <style>:root{--md-text-font-family:\"{{ font.text }}\";--md-code-font-family:\"{{ font.code }}\"}</style> {% endif %} {% endblock %} {% if config.extra.manifest %} @@ -131,7 +131,7 @@ {% if page and page.meta and page.meta.hide %} {% set hidden = \"hidden\" if \"navigation\" in page.meta.hide %} {% endif %} - <div class=\"md-sidebar md-sidebar--primary\" data-md-component=\"navigation\" {{ hidden }}> + <div class=\"md-sidebar md-sidebar--primary\" data-md-component=\"sidebar\" data-md-type=\"navigation\" {{ hidden }}> <div class=\"md-sidebar__scrollwrap\"> <div class=\"md-sidebar__inner\"> {% include \"partials/nav.html\" %} @@ -143,7 +143,7 @@ {% if page and page.meta and page.meta.hide %} {% set hidden = \"hidden\" if \"toc\" in page.meta.hide %} {% endif %} - <div class=\"md-sidebar md-sidebar--secondary\" data-md-component=\"toc\" {{ hidden }}> + <div class=\"md-sidebar md-sidebar--secondary\" data-md-component=\"sidebar\" data-md-type=\"toc\" {{ hidden }}> <div class=\"md-sidebar__scrollwrap\"> <div class=\"md-sidebar__inner\"> {% include \"partials/toc.html\" %} @@ -152,7 +152,7 @@ </div> {% endif %} {% endblock %} - <div class=\"md-content\"> + <div class=\"md-content\" data-md-component=\"content\"> <article class=\"md-content__inner md-typeset\"> {% block content %} {% if page.edit_url %} @@ -183,10 +183,18 @@ {% include \"partials/footer.html\" %} {% endblock %} </div> - {% block scripts %} - <script src=\"{{ 'assets/javascripts/vendor.18f0862e.min.js' | url }}\"></script> - <script src=\"{{ 'assets/javascripts/bundle.994580cf.min.js' | url }}\"></script> - {%- set translations = {} -%} + <div class=\"md-dialog\" data-md-component=\"dialog\"> + <div class=\"md-dialog__inner md-typeset\"></div> + </div> + {% block config %} + {%- set app = { + \"base\": base_url, + \"features\": features, + \"translations\": {}, + \"search\": \"assets/javascripts/workers/search.217ffd95.min.js\" | url, + \"version\": config.extra.version or None + } -%} + {%- set translations = app.translations -%} {%- for key in [ \"clipboard.copy\", \"clipboard.copied\", @@ -204,19 +212,12 @@ ] -%} {%- set _ = translations.update({ key: lang.t(key) }) -%} {%- endfor -%} - <script id=\"__lang\" type=\"application/json\"> - {{- translations | tojson -}} - </script> - {% block config %}{% endblock %} - <script> - app = initialize({ - base: \"{{ base_url }}\", - features: {{ features or [] | tojson }}, - search: Object.assign({ - worker: \"{{ 'assets/javascripts/worker/search.9c0e82ba.min.js' | url }}\" - }, typeof search !== \"undefined\" && search) - }) + <script id=\"__config\" type=\"application/json\"> + {{- app | tojson -}} </script> + {% endblock %} + {% block scripts %} + <script src=\"{{ 'assets/javascripts/bundle.926459b3.min.js' | url }}\"></script> {% for path in config[\"extra_javascript\"] %} <script src=\"{{ path | url }}\"></script> {% endfor %} partials/footer.html - <div class=\"md-footer-nav\"> - <nav class=\"md-footer-nav__inner md-grid\" aria-label=\"{{ lang.t('footer.title') }}\"> - {% if page.previous_page %} - <a href=\"{{ page.previous_page.url | url }}\" class=\"md-footer-nav__link md-footer-nav__link--prev\" rel=\"prev\"> - <div class=\"md-footer-nav__button md-icon\"> - {% include \".icons/material/arrow-left.svg\" %} - </div> - <div class=\"md-footer-nav__title\"> - <div class=\"md-ellipsis\"> - <span class=\"md-footer-nav__direction\"> - {{ lang.t(\"footer.previous\") }} - </span> - {{ page.previous_page.title }} - </div> - </div> - </a> - {% endif %} - {% if page.next_page %} - <a href=\"{{ page.next_page.url | url }}\" class=\"md-footer-nav__link md-footer-nav__link--next\" rel=\"next\"> - <div class=\"md-footer-nav__title\"> - <div class=\"md-ellipsis\"> - <span class=\"md-footer-nav__direction\"> - {{ lang.t(\"footer.next\") }} - </span> - {{ page.next_page.title }} - </div> + <nav class=\"md-footer__inner md-grid\" aria-label=\"{{ lang.t('footer.title') }}\"> + {% if page.previous_page %} + <a href=\"{{ page.previous_page.url | url }}\" class=\"md-footer__link md-footer__link--prev\" rel=\"prev\"> + <div class=\"md-footer__button md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} + </div> + <div class=\"md-footer__title\"> + <div class=\"md-ellipsis\"> + <span class=\"md-footer__direction\"> + {{ lang.t(\"footer.previous\") }} + </span> + {{ page.previous_page.title }} </div> - <div class=\"md-footer-nav__button md-icon\"> - {% include \".icons/material/arrow-right.svg\" %} + </div> + </a> + {% endif %} + {% if page.next_page %} + <a href=\"{{ page.next_page.url | url }}\" class=\"md-footer__link md-footer__link--next\" rel=\"next\"> + <div class=\"md-footer__title\"> + <div class=\"md-ellipsis\"> + <span class=\"md-footer__direction\"> + {{ lang.t(\"footer.next\") }} + </span> + {{ page.next_page.title }} </div> - </a> - {% endif %} - </nav> - </div> + </div> + <div class=\"md-footer__button md-icon\"> + {% include \".icons/material/arrow-right.svg\" %} + </div> + </a> + {% endif %} + </nav> {% endif %} <div class=\"md-footer-meta md-typeset\"> <div class=\"md-footer-meta__inner md-grid\"> partials/header.html @@ -6,21 +6,21 @@ {% set site_url = site_url ~ \"/index.html\" %} {% endif %} <header class=\"md-header\" data-md-component=\"header\"> - <nav class=\"md-header-nav md-grid\" aria-label=\"{{ lang.t('header.title') }}\"> - <a href=\"{{ site_url }}\" title=\"{{ config.site_name | e }}\" class=\"md-header-nav__button md-logo\" aria-label=\"{{ config.site_name }}\"> + <nav class=\"md-header__inner md-grid\" aria-label=\"{{ lang.t('header.title') }}\"> + <a href=\"{{ site_url }}\" title=\"{{ config.site_name | e }}\" class=\"md-header__button md-logo\" aria-label=\"{{ config.site_name }}\"> {% include \"partials/logo.html\" %} </a> - <label class=\"md-header-nav__button md-icon\" for=\"__drawer\"> + <label class=\"md-header__button md-icon\" for=\"__drawer\"> {% include \".icons/material/menu\" ~ \".svg\" %} </label> - <div class=\"md-header-nav__title\" data-md-component=\"header-title\"> - <div class=\"md-header-nav__ellipsis\"> - <div class=\"md-header-nav__topic\"> + <div class=\"md-header__title\" data-md-component=\"header-title\"> + <div class=\"md-header__ellipsis\"> + <div class=\"md-header__topic\"> <span class=\"md-ellipsis\"> {{ config.site_name }} </span> </div> - <div class=\"md-header-nav__topic\"> + <div class=\"md-header__topic\" data-md-component=\"header-topic\"> <span class=\"md-ellipsis\"> {% if page and page.meta and page.meta.title %} {{ page.meta.title }} @@ -31,14 +31,35 @@ </div> </div> </div> + <div class=\"md-header__options\"> + {% if config.extra.alternate %} + <div class=\"md-select\"> + {% set icon = config.theme.icon.alternate or \"material/translate\" %} + <span class=\"md-header__button md-icon\"> + {% include \".icons/\" ~ icon ~ \".svg\" %} + </span> + <div class=\"md-select__inner\"> + <ul class=\"md-select__list\"> + {% for alt in config.extra.alternate %} + <li class=\"md-select__item\"> + <a href=\"{{ alt.link | url }}\" class=\"md-select__link\"> + {{ alt.name }} + </a> + </li> + {% endfor %} + </ul> + </div> + </div> + {% endif %} + </div> {% if \"search\" in config[\"plugins\"] %} - <label class=\"md-header-nav__button md-icon\" for=\"__search\"> + <label class=\"md-header__button md-icon\" for=\"__search\"> {% include \".icons/material/magnify.svg\" %} </label> {% include \"partials/search.html\" %} {% endif %} {% if config.repo_url %} - <div class=\"md-header-nav__source\"> + <div class=\"md-header__source\"> {% include \"partials/source.html\" %} </div> {% endif %} partials/source.html @@ -4,5 +4,5 @@ {% import \"partials/language.html\" as lang with context %} -<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\"> +<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\" data-md-component=\"source\"> <div class=\"md-source__icon md-icon\"> {% set icon = config.theme.icon.repo or \"fontawesome/brands/git-alt\" %} {% include \".icons/\" ~ icon ~ \".svg\" %} partials/toc.html @@ -12,7 +12,7 @@ <span class=\"md-nav__icon md-icon\"></span> {{ lang.t(\"toc.title\") }} </label> - <ul class=\"md-nav__list\" data-md-scrollfix> + <ul class=\"md-nav__list\" data-md-component=\"toc\" data-md-scrollfix> {% for toc_item in toc %} {% include \"partials/toc-item.html\" %} {% endfor %}","title":"Changes to *.html files"},{"location":"upgrading/#upgrading-from-5x-to-6x","text":"","title":"Upgrading from 5.x to 6.x"},{"location":"upgrading/#whats-new_1","text":"Improved search result look and feel Improved search result stability while typing Improved search result grouping (pages + headings) Improved search result relevance and scoring Added display of missing query terms to search results Reduced size of vendor bundle by 25% (84kb \u2192 67kb) Reduced size of the Docker image to improve CI build performance Removed hero partial in favor of custom implementation Removed deprecated front matter features","title":"What's new?"},{"location":"upgrading/#changes-to-mkdocsyml_1","text":"Following is a list of changes that need to be made to mkdocs.yml . Note that you only have to adjust the value if you defined it, so if your configuration does not contain the key, you can skip it.","title":"Changes to mkdocs.yml"},{"location":"upgrading/#themefeatures","text":"All feature flags that can be set from mkdocs.yml , like tabs and instant loading , are now prefixed with the name of the component or function they apply to, e.g. navigation.* : 6.x theme : features : - navigation.tabs - navigation.instant 5.x theme : features : - tabs - instant","title":"theme.features"},{"location":"upgrading/#changes-to-html-files_1","text":"The templates have undergone a set of changes to make them future-proof. If you've used theme extension to override a block or template, make sure that it matches the new structure: If you've overridden a block , check base.html for potential changes If you've overridden a template , check the respective *.html file for potential changes base.html @@ -22,13 +22,6 @@ {% import \"partials/language.html\" as lang with context %} -<!-- Theme options --> -{% set palette = config.theme.palette %} -{% if not palette is mapping %} - {% set palette = palette | first %} -{% endif %} -{% set font = config.theme.font %} - <!doctype html> <html lang=\"{{ lang.t('language') }}\" class=\"no-js\"> <head> @@ -45,21 +38,8 @@ <meta name=\"description\" content=\"{{ config.site_description }}\" /> {% endif %} - <!-- Redirect --> - {% if page and page.meta and page.meta.redirect %} - <script> - var anchor = window.location.hash.substr(1) - location.href = '{{ page.meta.redirect }}' + - (anchor ? '#' + anchor : '') - </script> - - <!-- Fallback in case JavaScript is not available --> - <meta http-equiv=\"refresh\" content=\"0; url={{ page.meta.redirect }}\" /> - <meta name=\"robots\" content=\"noindex\" /> - <link rel=\"canonical\" href=\"{{ page.meta.redirect }}\" /> - <!-- Canonical --> - {% elif page.canonical_url %} + {% if page.canonical_url %} <link rel=\"canonical\" href=\"{{ page.canonical_url }}\" /> {% endif %} @@ -96,20 +76,21 @@ <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/main.css' | url }}\" /> <!-- Extra color palette --> - {% if palette.scheme or palette.primary or palette.accent %} + {% if config.theme.palette %} + {% set palette = config.theme.palette %} <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/palette.css' | url }}\" /> - {% endif %} - <!-- Theme-color meta tag for Android --> - {% if palette.primary %} - {% import \"partials/palette.html\" as map %} - {% set primary = map.primary( - palette.primary | replace(\" \", \"-\") | lower - ) %} - <meta name=\"theme-color\" content=\"{{ primary }}\" /> + <!-- Theme-color meta tag for Android --> + {% if palette.primary %} + {% import \"partials/palette.html\" as map %} + {% set primary = map.primary( + palette.primary | replace(\" \", \"-\") | lower + ) %} + <meta name=\"theme-color\" content=\"{{ primary }}\" /> + {% endif %} {% endif %} {% endblock %} @@ -120,7 +101,8 @@ {% block fonts %} <!-- Load fonts from Google --> - {% if font != false %} + {% if config.theme.font != false %} + {% set font = config.theme.font %} <link href=\"https://fonts.gstatic.com\" rel=\"preconnect\" crossorigin /> <link rel=\"stylesheet\" @@ -169,8 +151,12 @@ <!-- Text direction and color palette, if defined --> {% set direction = config.theme.direction or lang.t('direction') %} - {% if palette.scheme or palette.primary or palette.accent %} - {% set scheme = palette.scheme | lower %} + {% if config.theme.palette %} + {% set palette = config.theme.palette %} + {% if not palette is mapping %} + {% set palette = palette | first %} + {% endif %} + {% set scheme = palette.scheme | replace(\" \", \"-\") | lower %} {% set primary = palette.primary | replace(\" \", \"-\") | lower %} {% set accent = palette.accent | replace(\" \", \"-\") | lower %} <body @@ -179,18 +165,19 @@ data-md-color-primary=\"{{ primary }}\" data-md-color-accent=\"{{ accent }}\" > + + <!-- Experimental: set color scheme based on preference --> + {% if \"preference\" == scheme %} + <script> + if (matchMedia(\"(prefers-color-scheme: dark)\").matches) + document.body.setAttribute(\"data-md-color-scheme\", \"slate\") + </script> + {% endif %} + {% else %} <body dir=\"{{ direction }}\"> {% endif %} - <!-- Experimental: set color scheme based on preference --> - {% if \"preference\" == palette.scheme %} - <script> - if (matchMedia(\"(prefers-color-scheme: dark)\").matches) - document.body.setAttribute(\"data-md-color-scheme\", \"slate\") - </script> - {% endif %} - <!-- State toggles - we need to set autocomplete=\"off\" in order to reset the drawer on back button invocation in some browsers @@ -243,15 +230,11 @@ <div class=\"md-container\" data-md-component=\"container\"> <!-- Hero teaser --> - {% block hero %} - {% if page and page.meta and page.meta.hero %} - {% include \"partials/hero.html\" with context %} - {% endif %} - {% endblock %} + {% block hero %}{% endblock %} <!-- Tabs navigation --> {% block tabs %} - {% if \"tabs\" in config.theme.features %} + {% if \"navigation.tabs\" in config.theme.features %} {% include \"partials/tabs.html\" %} {% endif %} {% endblock %} @@ -310,13 +293,6 @@ </a> {% endif %} - <!-- Link to source file --> - {% block source %} - {% if page and page.meta and page.meta.source %} - {% include \"partials/source-link.html\" %} - {% endif %} - {% endblock %} - <!-- Hack: check whether the content contains a h1 headline. If it doesn't, the page title (or respectively site name) is used @@ -370,7 +346,10 @@ \"search.result.placeholder\", \"search.result.none\", \"search.result.one\", - \"search.result.other\" + \"search.result.other\", + \"search.result.more.one\", + \"search.result.more.other\", + \"search.result.term.missing\" ] -%} {%- set _ = translations.update({ key: lang.t(key) }) -%} {%- endfor -%} partials/hero.html @@ -1,12 +0,0 @@ -{#- - This file was automatically generated - do not edit --#} -{% set class = \"md-hero\" %} -{% if \"tabs\" not in config.theme.features %} - {% set class = \"md-hero md-hero--expand\" %} -{% endif %} -<div class=\"{{ class }}\" data-md-component=\"hero\"> - <div class=\"md-hero__inner md-grid\"> - {{ page.meta.hero }} - </div> -</div> partials/source-link -{#- - This file was automatically generated - do not edit --#} -{% import \"partials/language.html\" as lang with context %} -{% set repo = config.repo_url %} -{% if repo | last == \"/\" %} - {% set repo = repo[:-1] %} -{% endif %} -{% set path = page.meta.path | default(\"\") %} -<a href=\"{{ [repo, path, page.meta.source] | join('/') }}\" title=\"{{ page.meta.source }}\" class=\"md-content__button md-icon\"> - {{ lang.t(\"meta.source\") }} - {% set icon = config.theme.icon.repo or \"fontawesome/brands/git-alt\" %} - {% include \".icons/\" ~ icon ~ \".svg\" %} -</a>","title":"Changes to *.html files"},{"location":"upgrading/#upgrading-from-4x-to-5x","text":"","title":"Upgrading from 4.x to 5.x"},{"location":"upgrading/#whats-new_2","text":"Reactive architecture \u2013 try app . dialog$ . next ( \"Hi!\" ) in the console Instant loading \u2013 make Material behave like a Single Page Application Improved CSS customization with CSS variables \u2013 set your brand's colors Improved CSS resilience, e.g. proper sidebar locking for customized headers Improved icon integration and configuration \u2013 now including over 5k icons Added possibility to use any icon for logo, repository and social links Search UI does not freeze anymore (moved to web worker) Search index built only once when using instant loading Improved extensible keyboard handling Support for prebuilt search indexes Support for displaying stars and forks for GitLab repositories Support for scroll snapping of sidebars and search results Reduced HTML and CSS footprint due to deprecation of Internet Explorer support Slight facelifting of some UI elements (Admonitions, tables, ...)","title":"What's new?"},{"location":"upgrading/#changes-to-mkdocsyml_2","text":"Following is a list of changes that need to be made to mkdocs.yml . Note that you only have to adjust the value if you defined it, so if your configuration does not contain the key, you can skip it.","title":"Changes to mkdocs.yml"},{"location":"upgrading/#themefeature","text":"Optional features like tabs and instant loading are now implemented as flags and can be enabled by listing them in mkdocs.yml under theme.features : 5.x theme : features : - tabs - instant 4.x theme : feature : tabs : true","title":"theme.feature"},{"location":"upgrading/#themelogoicon","text":"The logo icon configuration was centralized under theme.icon.logo and can now be set to any of the icons bundled with the theme : 5.x theme : icon : logo : material/cloud 4.x theme : logo : icon : cloud","title":"theme.logo.icon"},{"location":"upgrading/#extrarepo_icon","text":"The repo icon configuration was centralized under theme.icon.repo and can now be set to any of the icons bundled with the theme : 5.x theme : icon : repo : fontawesome/brands/gitlab 4.x extra : repo_icon : gitlab","title":"extra.repo_icon"},{"location":"upgrading/#extrasearch","text":"Search is now configured as part of the plugin options . Note that the search languages must now be listed as an array of strings and the tokenizer was renamed to separator : 5.x plugins : - search : separator : '[\\s\\-\\.]+' lang : - en - de - ru 4.x extra : search : language : en, de, ru tokenizer : '[\\s\\-\\.]+'","title":"extra.search.*"},{"location":"upgrading/#extrasocial","text":"Social links stayed in the same place, but the type key was renamed to icon in order to match the new way of specifying which icon to be used: 5.x extra : social : - icon : fontawesome/brands/github-alt link : https://github.com/squidfunk 4.x extra : social : - type : github link : https://github.com/squidfunk","title":"extra.social.*"},{"location":"upgrading/#changes-to-html-files_2","text":"The templates have undergone a set of changes to make them future-proof. If you've used theme extension to override a block or template, make sure that it matches the new structure: If you've overridden a block , check base.html for potential changes If you've overridden a template , check the respective *.html file for potential changes base.html @@ -2,7 +2,6 @@ This file was automatically generated - do not edit -#} {% import \"partials/language.html\" as lang with context %} -{% set feature = config.theme.feature %} {% set palette = config.theme.palette %} {% set font = config.theme.font %} <!doctype html> @@ -30,19 +29,6 @@ {% elif config.site_author %} <meta name=\"author\" content=\"{{ config.site_author }}\"> {% endif %} - {% for key in [ - \"clipboard.copy\", - \"clipboard.copied\", - \"search.language\", - \"search.pipeline.stopwords\", - \"search.pipeline.trimmer\", - \"search.result.none\", - \"search.result.one\", - \"search.result.other\", - \"search.tokenizer\" - ] %} - <meta name=\"lang:{{ key }}\" content=\"{{ lang.t(key) }}\"> - {% endfor %} <link rel=\"shortcut icon\" href=\"{{ config.theme.favicon | url }}\"> <meta name=\"generator\" content=\"mkdocs-{{ mkdocs_version }}, mkdocs-material-5.0.0\"> {% endblock %} @@ -56,9 +42,9 @@ {% endif %} {% endblock %} {% block styles %} - <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/application.********.css' | url }}\"> + <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/main.********.min.css' | url }}\"> {% if palette.primary or palette.accent %} - <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/application-palette.********.css' | url }}\"> + <link rel=\"stylesheet\" href=\"{{ 'assets/stylesheets/palette.********.min.css' | url }}\"> {% endif %} {% if palette.primary %} {% import \"partials/palette.html\" as map %} @@ -69,20 +55,17 @@ {% endif %} {% endblock %} {% block libs %} - <script src=\"{{ 'assets/javascripts/modernizr.********.js' | url }}\"></script> {% endblock %} {% block fonts %} {% if font != false %} <link href=\"https://fonts.gstatic.com\" rel=\"preconnect\" crossorigin> <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family={{ font.text | replace(' ', '+') + ':300,400,400i,700%7C' + font.code | replace(' ', '+') }}&display=fallback\"> <style>body,input{font-family:\"{{ font.text }}\",\"Helvetica Neue\",Helvetica,Arial,sans-serif}code,kbd,pre{font-family:\"{{ font.code }}\",\"Courier New\",Courier,monospace}</style> {% endif %} {% endblock %} - <link rel=\"stylesheet\" href=\"{{ 'assets/fonts/material-icons.css' | url }}\"> {% if config.extra.manifest %} <link rel=\"manifest\" href=\"{{ config.extra.manifest | url }}\" crossorigin=\"use-credentials\"> {% endif %} @@ -95,47 +77,50 @@ {% endblock %} {% block extrahead %}{% endblock %} </head> + {% set direction = config.theme.direction | default(lang.t('direction')) %} {% if palette.primary or palette.accent %} {% set primary = palette.primary | replace(\" \", \"-\") | lower %} {% set accent = palette.accent | replace(\" \", \"-\") | lower %} - <body dir=\"{{ lang.t('direction') }}\" data-md-color-primary=\"{{ primary }}\" data-md-color-accent=\"{{ accent }}\"> + <body dir=\"{{ direction }}\" data-md-color-primary=\"{{ primary }}\" data-md-color-accent=\"{{ accent }}\"> {% else %} - <body dir=\"{{ lang.t('direction') }}\"> + <body dir=\"{{ direction }}\"> {% endif %} - <svg class=\"md-svg\"> - <defs> - {% set platform = config.extra.repo_icon or config.repo_url %} - {% if \"github\" in platform %} - {% include \"assets/images/icons/github.f0b8504a.svg\" %} - {% elif \"gitlab\" in platform %} - {% include \"assets/images/icons/gitlab.6dd19c00.svg\" %} - {% elif \"bitbucket\" in platform %} - {% include \"assets/images/icons/bitbucket.1b09e088.svg\" %} - {% endif %} - </defs> - </svg> <input class=\"md-toggle\" data-md-toggle=\"drawer\" type=\"checkbox\" id=\"__drawer\" autocomplete=\"off\"> <input class=\"md-toggle\" data-md-toggle=\"search\" type=\"checkbox\" id=\"__search\" autocomplete=\"off\"> - <label class=\"md-overlay\" data-md-component=\"overlay\" for=\"__drawer\"></label> + <label class=\"md-overlay\" for=\"__drawer\"></label> + <div data-md-component=\"skip\"> + {% if page.toc | first is defined %} + {% set skip = page.toc | first %} + <a href=\"{{ skip.url | url }}\" class=\"md-skip\"> + {{ lang.t('skip.link.title') }} + </a> + {% endif %} + </div> + <div data-md-component=\"announce\"> + {% if self.announce() %} + <aside class=\"md-announce\"> + <div class=\"md-announce__inner md-grid md-typeset\"> + {% block announce %}{% endblock %} + </div> + </aside> + {% endif %} + </div> {% block header %} {% include \"partials/header.html\" %} {% endblock %} - <div class=\"md-container\"> + <div class=\"md-container\" data-md-component=\"container\"> {% block hero %} {% if page and page.meta and page.meta.hero %} {% include \"partials/hero.html\" with context %} {% endif %} {% endblock %} - {% if feature.tabs %} - {% include \"partials/tabs.html\" %} - {% endif %} + {% block tabs %} + {% if \"tabs\" in config.theme.features %} + {% include \"partials/tabs.html\" %} + {% endif %} + {% endblock %} - <main class=\"md-main\" role=\"main\"> - <div class=\"md-main__inner md-grid\" data-md-component=\"container\"> + <main class=\"md-main\" data-md-component=\"main\"> + <div class=\"md-main__inner md-grid\"> {% block site_nav %} {% if nav %} <div class=\"md-sidebar md-sidebar--primary\" data-md-component=\"navigation\"> @@ -160,41 +141,25 @@ <article class=\"md-content__inner md-typeset\"> {% block content %} {% if page.edit_url %} - <a href=\"{{ page.edit_url }}\" title=\"{{ lang.t('edit.link.title') }}\" class=\"md-icon md-content__icon\">&#xE3C9;</a> + <a href=\"{{ page.edit_url }}\" title=\"{{ lang.t('edit.link.title') }}\" class=\"md-content__button md-icon\"> + {% include \".icons/material/pencil.svg\" %} + </a> {% endif %} + {% block source %} + {% if page and page.meta and page.meta.source %} + {% include \"partials/source-link.html\" %} + {% endif %} + {% endblock %} {% if not \"\\x3ch1\" in page.content %} <h1>{{ page.title | default(config.site_name, true)}}</h1> {% endif %} {{ page.content }} - {% block source %} - {% if page and page.meta and page.meta.source %} - <h2 id=\"__source\">{{ lang.t(\"meta.source\") }}</h2> - {% set repo = config.repo_url %} - {% if repo | last == \"/\" %} - {% set repo = repo[:-1] %} - {% endif %} - {% set path = page.meta.path | default([\"\"]) %} - {% set file = page.meta.source %} - <a href=\"{{ [repo, path, file] | join('/') }}\" title=\"{{ file }}\" class=\"md-source-file\"> - {{ file }} - </a> - {% endif %} - {% endblock %} + {% if page and page.meta %} + {% if page.meta.git_revision_date_localized or + page.meta.revision_date + %} + {% include \"partials/source-date.html\" %} - {% if page and page.meta and ( - page.meta.git_revision_date_localized or - page.meta.revision_date - ) %} - {% set label = lang.t(\"source.revision.date\") %} - <hr> - <div class=\"md-source-date\"> - <small> - {% if page.meta.git_revision_date_localized %} - {{ label }}: {{ page.meta.git_revision_date_localized }} - {% elif page.meta.revision_date %} - {{ label }}: {{ page.meta.revision_date }} - {% endif %} - </small> - </div> {% endif %} {% endblock %} {% block disqus %} @@ -208,29 +174,35 @@ {% include \"partials/footer.html\" %} {% endblock %} </div> {% block scripts %} - <script src=\"{{ 'assets/javascripts/application.********.js' | url }}\"></script> - {% if lang.t(\"search.language\") != \"en\" %} - {% set languages = lang.t(\"search.language\").split(\",\") %} - {% if languages | length and languages[0] != \"\" %} - {% set path = \"assets/javascripts/lunr/\" %} - <script src=\"{{ (path ~ 'lunr.stemmer.support.js') | url }}\"></script> - {% for language in languages | map(\"trim\") %} - {% if language != \"en\" %} - {% if language == \"ja\" %} - <script src=\"{{ (path ~ 'tinyseg.js') | url }}\"></script> - {% endif %} - {% if language in (\"ar\", \"da\", \"de\", \"es\", \"fi\", \"fr\", \"hu\", \"it\", \"ja\", \"nl\", \"no\", \"pt\", \"ro\", \"ru\", \"sv\", \"th\", \"tr\", \"vi\") %} - <script src=\"{{ (path ~ 'lunr.' ~ language ~ '.js') | url }}\"></script> - {% endif %} - {% endif %} - {% endfor %} - {% if languages | length > 1 %} - <script src=\"{{ (path ~ 'lunr.multi.js') | url }}\"></script> - {% endif %} - {% endif %} - {% endif %} - <script>app.initialize({version:\"{{ mkdocs_version }}\",url:{base:\"{{ base_url }}\"}})</script> + <script src=\"{{ 'assets/javascripts/vendor.********.min.js' | url }}\"></script> + <script src=\"{{ 'assets/javascripts/bundle.********.min.js' | url }}\"></script> + {%- set translations = {} -%} + {%- for key in [ + \"clipboard.copy\", + \"clipboard.copied\", + \"search.config.lang\", + \"search.config.pipeline\", + \"search.config.separator\", + \"search.result.placeholder\", + \"search.result.none\", + \"search.result.one\", + \"search.result.other\" + ] -%} + {%- set _ = translations.update({ key: lang.t(key) }) -%} + {%- endfor -%} + <script id=\"__lang\" type=\"application/json\"> + {{- translations | tojson -}} + </script> + {% block config %}{% endblock %} + <script> + app = initialize({ + base: \"{{ base_url }}\", + features: {{ config.theme.features | tojson }}, + search: Object.assign({ + worker: \"{{ 'assets/javascripts/worker/search.********.min.js' | url }}\" + }, typeof search !== \"undefined\" && search) + }) + </script> {% for path in config[\"extra_javascript\"] %} <script src=\"{{ path | url }}\"></script> {% endfor %} partials/footer.html @@ -5,34 +5,34 @@ <div class=\"md-footer-nav\"> - <nav class=\"md-footer-nav__inner md-grid\"> + <nav class=\"md-footer-nav__inner md-grid\" aria-label=\"{{ lang.t('footer.title') }}\"> {% if page.previous_page %} - <a href=\"{{ page.previous_page.url | url }}\" title=\"{{ page.previous_page.title | striptags }}\" class=\"md-flex md-footer-nav__link md-footer-nav__link--prev\" rel=\"prev\"> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <i class=\"md-icon md-icon--arrow-back md-footer-nav__button\"></i> + <a href=\"{{ page.previous_page.url | url }}\" title=\"{{ page.previous_page.title | striptags }}\" class=\"md-footer-nav__link md-footer-nav__link--prev\" rel=\"prev\"> + <div class=\"md-footer-nav__button md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} </div> - <div class=\"md-flex__cell md-flex__cell--stretch md-footer-nav__title\"> - <span class=\"md-flex__ellipsis\"> + <div class=\"md-footer-nav__title\"> + <div class=\"md-ellipsis\"> <span class=\"md-footer-nav__direction\"> {{ lang.t(\"footer.previous\") }} </span> {{ page.previous_page.title }} - </span> + </div> </div> </a> {% endif %} {% if page.next_page %} - <a href=\"{{ page.next_page.url | url }}\" title=\"{{ page.next_page.title | striptags }}\" class=\"md-flex md-footer-nav__link md-footer-nav__link--next\" rel=\"next\"> - <div class=\"md-flex__cell md-flex__cell--stretch md-footer-nav__title\"> - <span class=\"md-flex__ellipsis\"> + <a href=\"{{ page.next_page.url | url }}\" title=\"{{ page.next_page.title | striptags }}\" class=\"md-footer-nav__link md-footer-nav__link--next\" rel=\"next\"> + <div class=\"md-footer-nav__title\"> + <div class=\"md-ellipsis\"> <span class=\"md-footer-nav__direction\"> {{ lang.t(\"footer.next\") }} </span> {{ page.next_page.title }} - </span> + </div> </div> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <i class=\"md-icon md-icon--arrow-forward md-footer-nav__button\"></i> + <div class=\"md-footer-nav__button md-icon\"> + {% include \".icons/material/arrow-right.svg\" %} </div> </a> {% endif %} partials/header.html @@ -2,51 +2,43 @@ This file was automatically generated - do not edit -#} <header class=\"md-header\" data-md-component=\"header\"> - <nav class=\"md-header-nav md-grid\"> - <div class=\"md-flex\"> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" aria-label=\"{{ config.site_name }}\" class=\"md-header-nav__button md-logo\"> - {% if config.theme.logo.icon %} - <i class=\"md-icon\">{{ config.theme.logo.icon }}</i> - {% else %} - <img alt=\"logo\" src=\"{{ config.theme.logo | url }}\" width=\"24\" height=\"24\"> - {% endif %} - </a> - </div> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <label class=\"md-icon md-icon--menu md-header-nav__button\" for=\"__drawer\"></label> - </div> - <div class=\"md-flex__cell md-flex__cell--stretch\"> - <div class=\"md-flex__ellipsis md-header-nav__title\" data-md-component=\"title\"> - {% if config.site_name == page.title %} - {{ config.site_name }} - {% else %} - <span class=\"md-header-nav__topic\"> - {{ config.site_name }} - </span> - <span class=\"md-header-nav__topic\"> - {% if page and page.meta and page.meta.title %} - {{ page.meta.title }} - {% else %} - {{ page.title }} - {% endif %} - </span> - {% endif %} + <nav class=\"md-header-nav md-grid\" aria-label=\"{{ lang.t('header.title') }}\"> + <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" class=\"md-header-nav__button md-logo\" aria-label=\"{{ config.site_name }}\"> + {% include \"partials/logo.html\" %} + </a> + <label class=\"md-header-nav__button md-icon\" for=\"__drawer\"> + {% include \".icons/material/menu\" ~ \".svg\" %} + </label> + <div class=\"md-header-nav__title\" data-md-component=\"header-title\"> + {% if config.site_name == page.title %} + <div class=\"md-header-nav__ellipsis md-ellipsis\"> + {{ config.site_name }} </div> - </div> - <div class=\"md-flex__cell md-flex__cell--shrink\"> - {% if \"search\" in config[\"plugins\"] %} - <label class=\"md-icon md-icon--search md-header-nav__button\" for=\"__search\"></label> - {% include \"partials/search.html\" %} - {% endif %} - </div> - {% if config.repo_url %} - <div class=\"md-flex__cell md-flex__cell--shrink\"> - <div class=\"md-header-nav__source\"> - {% include \"partials/source.html\" %} - </div> + {% else %} + <div class=\"md-header-nav__ellipsis\"> + <span class=\"md-header-nav__topic md-ellipsis\"> + {{ config.site_name }} + </span> + <span class=\"md-header-nav__topic md-ellipsis\"> + {% if page and page.meta and page.meta.title %} + {{ page.meta.title }} + {% else %} + {{ page.title }} + {% endif %} + </span> </div> {% endif %} </div> + {% if \"search\" in config[\"plugins\"] %} + <label class=\"md-header-nav__button md-icon\" for=\"__search\"> + {% include \".icons/material/magnify.svg\" %} + </label> + {% include \"partials/search.html\" %} + {% endif %} + {% if config.repo_url %} + <div class=\"md-header-nav__source\"> + {% include \"partials/source.html\" %} + </div> + {% endif %} </nav> </header> partials/hero.html @@ -1,9 +1,8 @@ {#- This file was automatically generated - do not edit -#} -{% set feature = config.theme.feature %} {% set class = \"md-hero\" %} -{% if not feature.tabs %} +{% if \"tabs\" not in config.theme.features %} {% set class = \"md-hero md-hero--expand\" %} {% endif %} <div class=\"{{ class }}\" data-md-component=\"hero\"> partials/language.html @@ -3,12 +3,4 @@ -#} {% import \"partials/language/\" + config.theme.language + \".html\" as lang %} {% import \"partials/language/en.html\" as fallback %} -{% macro t(key) %}{{ { - \"direction\": config.theme.direction, - \"search.language\": ( - config.extra.search | default({}) - ).language, - \"search.tokenizer\": ( - config.extra.search | default({}) - ).tokenizer | default(\"\", true), -}[key] or lang.t(key) or fallback.t(key) }}{% endmacro %} +{% macro t(key) %}{{ lang.t(key) | default(fallback.t(key)) }}{% endmacro %} partials/logo.html @@ -0,0 +1,9 @@ +{#- + This file was automatically generated - do not edit +-#} +{% if config.theme.logo %} + <img src=\"{{ config.theme.logo | url }}\" alt=\"logo\"> +{% else %} + {% set icon = config.theme.icon.logo or \"material/library\" %} + {% include \".icons/\" ~ icon ~ \".svg\" %} +{% endif %} partials/nav-item.html @@ -14,9 +14,15 @@ {% endif %} <label class=\"md-nav__link\" for=\"{{ path }}\"> {{ nav_item.title }} + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/chevron-right.svg\" %} + </span> </label> - <nav class=\"md-nav\" data-md-component=\"collapsible\" data-md-level=\"{{ level }}\"> + <nav class=\"md-nav\" aria-label=\"{{ nav_item.title }}\" data-md-level=\"{{ level }}\"> <label class=\"md-nav__title\" for=\"{{ path }}\"> + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} + </span> {{ nav_item.title }} </label> <ul class=\"md-nav__list\" data-md-scrollfix> @@ -39,6 +45,9 @@ {% if toc | first is defined %} <label class=\"md-nav__link md-nav__link--active\" for=\"__toc\"> {{ nav_item.title }} + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/table-of-contents.svg\" %} + </span> </label> {% endif %} <a href=\"{{ nav_item.url | url }}\" title=\"{{ nav_item.title | striptags }}\" class=\"md-nav__link md-nav__link--active\"> partials/nav.html @@ -1,14 +1,10 @@ {#- This file was automatically generated - do not edit -#} -<nav class=\"md-nav md-nav--primary\" data-md-level=\"0\"> - <label class=\"md-nav__title md-nav__title--site\" for=\"__drawer\"> - <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" class=\"md-nav__button md-logo\"> - {% if config.theme.logo.icon %} - <i class=\"md-icon\">{{ config.theme.logo.icon }}</i> - {% else %} - <img alt=\"logo\" src=\"{{ config.theme.logo | url }}\" width=\"48\" height=\"48\"> - {% endif %} +<nav class=\"md-nav md-nav--primary\" aria-label=\"{{ lang.t('nav.title') }}\" data-md-level=\"0\"> + <label class=\"md-nav__title\" for=\"__drawer\"> + <a href=\"{{ config.site_url | default(nav.homepage.url, true) | url }}\" title=\"{{ config.site_name }}\" class=\"md-nav__button md-logo\" aria-label=\"{{ config.site_name }}\"> + {% include \"partials/logo.html\" %} </a> {{ config.site_name }} </label> partials/search.html @@ -6,15 +6,18 @@ <label class=\"md-search__overlay\" for=\"__search\"></label> <div class=\"md-search__inner\" role=\"search\"> <form class=\"md-search__form\" name=\"search\"> - <input type=\"text\" class=\"md-search__input\" name=\"query\" aria-label=\"Search\" placeholder=\"{{ lang.t('search.placeholder') }}\" autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\" spellcheck=\"false\" data-md-component=\"query\" data-md-state=\"active\"> + <input type=\"text\" class=\"md-search__input\" name=\"query\" aria-label=\"{{ lang.t('search.placeholder') }}\" placeholder=\"{{ lang.t('search.placeholder') }}\" autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\" spellcheck=\"false\" data-md-component=\"search-query\" data-md-state=\"active\"> <label class=\"md-search__icon md-icon\" for=\"__search\"> + {% include \".icons/material/magnify.svg\" %} + {% include \".icons/material/arrow-left.svg\" %} </label> - <button type=\"reset\" class=\"md-icon md-search__icon\" data-md-component=\"reset\" tabindex=\"-1\"> - &#xE5CD; + <button type=\"reset\" class=\"md-search__icon md-icon\" aria-label=\"{{ lang.t('search.reset') }}\" data-md-component=\"search-reset\" tabindex=\"-1\"> + {% include \".icons/material/close.svg\" %} </button> </form> <div class=\"md-search__output\"> <div class=\"md-search__scrollwrap\" data-md-scrollfix> - <div class=\"md-search-result\" data-md-component=\"result\"> + <div class=\"md-search-result\" data-md-component=\"search-result\"> <div class=\"md-search-result__meta\"> {{ lang.t(\"search.result.placeholder\") }} </div> partials/social.html @@ -3,9 +3,12 @@ -#} {% if config.extra.social %} <div class=\"md-footer-social\"> - <link rel=\"stylesheet\" href=\"{{ 'assets/fonts/font-awesome.css' | url }}\"> {% for social in config.extra.social %} - <a href=\"{{ social.link }}\" target=\"_blank\" rel=\"noopener\" title=\"{{ social.type }}\" class=\"md-footer-social__link fa fa-{{ social.type }}\"></a> + {% set _,rest = social.link.split(\"//\") %} + {% set domain = rest.split(\"/\")[0] %} + <a href=\"{{ social.link }}\" target=\"_blank\" rel=\"noopener\" title=\"{{ domain }}\" class=\"md-footer-social__link\"> + {% include \".icons/\" ~ social.icon ~ \".svg\" %} + </a> {% endfor %} </div> {% endif %} partials/source-date.html @@ -0,0 +1,15 @@ +{#- + This file was automatically generated - do not edit +-#} +{% import \"partials/language.html\" as lang with context %} +{% set label = lang.t(\"source.revision.date\") %} +<hr> +<div class=\"md-source-date\"> + <small> + {% if page.meta.git_revision_date_localized %} + {{ label }}: {{ page.meta.git_revision_date_localized }} + {% elif page.meta.revision_date %} + {{ label }}: {{ page.meta.revision_date }} + {% endif %} + </small> +</div> partials/source-link.html @@ -0,0 +1,13 @@ +{#- + This file was automatically generated - do not edit +-#} +{% import \"partials/language.html\" as lang with context %} +{% set repo = config.repo_url %} +{% if repo | last == \"/\" %} + {% set repo = repo[:-1] %} +{% endif %} +{% set path = page.meta.path | default([\"\"]) %} +<a href=\"{{ [repo, path, page.meta.source] | join('/') }}\" title=\"{{ file }}\" class=\"md-content__button md-icon\"> + {{ lang.t(\"meta.source\") }} + {% include \".icons/\" ~ config.theme.icon.repo ~ \".svg\" %} +</a> partials/source.html @@ -2,24 +2,11 @@ This file was automatically generated - do not edit -#} {% import \"partials/language.html\" as lang with context %} -{% set platform = config.extra.repo_icon or config.repo_url %} -{% if \"github\" in platform %} - {% set repo_type = \"github\" %} -{% elif \"gitlab\" in platform %} - {% set repo_type = \"gitlab\" %} -{% elif \"bitbucket\" in platform %} - {% set repo_type = \"bitbucket\" %} -{% else %} - {% set repo_type = \"\" %} -{% endif %} -<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\" data-md-source=\"{{ repo_type }}\"> - {% if repo_type %} - <div class=\"md-source__icon\"> - <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"> - <use xlink:href=\"#__{{ repo_type }}\" width=\"24\" height=\"24\"></use> - </svg> - </div> - {% endif %} +<a href=\"{{ config.repo_url }}\" title=\"{{ lang.t('source.link.title') }}\" class=\"md-source\"> + <div class=\"md-source__icon md-icon\"> + {% set icon = config.theme.icon.repo or \"fontawesome/brands/git-alt\" %} + {% include \".icons/\" ~ icon ~ \".svg\" %} + </div> <div class=\"md-source__repository\"> {{ config.repo_name }} </div> partials/tabs-item.html @@ -1,7 +1,7 @@ {#- This file was automatically generated - do not edit -#} -{% if nav_item.is_homepage %} +{% if nav_item.is_homepage or nav_item.url == \"index.html\" %} <li class=\"md-tabs__item\"> {% if not page.ancestors | length and nav | selectattr(\"url\", page.url) %} <a href=\"{{ nav_item.url | url }}\" class=\"md-tabs__link md-tabs__link--active\"> partials/tabs.html @@ -5,7 +5,7 @@ {% if page.ancestors | length > 0 %} {% set class = \"md-tabs md-tabs--active\" %} {% endif %} -<nav class=\"{{ class }}\" data-md-component=\"tabs\"> +<nav class=\"{{ class }}\" aria-label=\"{{ lang.t('tabs.title') }}\" data-md-component=\"tabs\"> <div class=\"md-tabs__inner md-grid\"> <ul class=\"md-tabs__list\"> {% for nav_item in nav %} partials/toc-item.html @@ -6,7 +6,7 @@ {{ toc_item.title }} </a> {% if toc_item.children %} - <nav class=\"md-nav\"> + <nav class=\"md-nav\" aria-label=\"{{ toc_item.title }}\"> <ul class=\"md-nav__list\"> {% for toc_item in toc_item.children %} {% include \"partials/toc-item.html\" %} partials/toc.html @@ -2,35 +2,22 @@ This file was automatically generated - do not edit -#} {% import \"partials/language.html\" as lang with context %} -<nav class=\"md-nav md-nav--secondary\"> +<nav class=\"md-nav md-nav--secondary\" aria-label=\"{{ lang.t('toc.title') }}\"> {% endif %} {% if toc | first is defined %} <label class=\"md-nav__title\" for=\"__toc\"> + <span class=\"md-nav__icon md-icon\"> + {% include \".icons/material/arrow-left.svg\" %} + </span> {{ lang.t(\"toc.title\") }} </label> <ul class=\"md-nav__list\" data-md-scrollfix> {% for toc_item in toc %} {% include \"partials/toc-item.html\" %} {% endfor %} - {% if page.meta.source and page.meta.source | length > 0 %} - <li class=\"md-nav__item\"> - <a href=\"#__source\" class=\"md-nav__link md-nav__link--active\"> - {{ lang.t(\"meta.source\") }} - </a> - </li> - {% endif %} - {% set disqus = config.extra.disqus %} - {% if page and page.meta and page.meta.disqus is string %} - {% set disqus = page.meta.disqus %} - {% endif %} - {% if not page.is_homepage and disqus %} - <li class=\"md-nav__item\"> - <a href=\"#__comments\" class=\"md-nav__link md-nav__link--active\"> - {{ lang.t(\"meta.comments\") }} - </a> - </li> - {% endif %} </ul> {% endif %} </nav>","title":"Changes to *.html files"},{"location":"upgrading/#upgrading-from-3x-to-4x","text":"","title":"Upgrading from 3.x to 4.x"},{"location":"upgrading/#whats-new_3","text":"Material for MkDocs 4 fixes incorrect layout on Chinese systems. The fix includes a mandatory change of the base font-size from 10px to 20px which means all rem values needed to be updated. Within the theme, px to rem calculation is now encapsulated in a new function called px2rem which is part of the SASS code base. If you use Material for MkDocs with custom CSS that is based on rem values, note that those values must now be divided by 2. Now, 1.0rem doesn't map to 10px , but 20px . To learn more about the problem and implications, please refer to #911 in which the problem was discovered and fixed.","title":"What's new?"},{"location":"upgrading/#changes-to-mkdocsyml_3","text":"None.","title":"Changes to mkdocs.yml"},{"location":"upgrading/#changes-to-html-files_3","text":"None.","title":"Changes to *.html files"},{"location":"Python/Community%20detection/","text":"MathJax.Hub.Config({ extensions: [\"tex2jax.js\",\"TeX/AMSmath.js\",\"TeX/AMSsymbols.js\"], jax: [\"input/TeX\", \"output/HTML-CSS\"], tex2jax: { inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ], displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"] ], }, \"HTML-CSS\": { availableFonts: [\"TeX\"] } }); Community detection \u00b6 A community is a group of people who are homogeneous in some features. Marketers want to find communities so that they can target them. It is not trivial to identify communities from a given network. Community detection deals with identifying networks based only on the network topology. nodes in the community are closer than the nodes outside the community. What is closeness? To define closeness, we need to 1. Define distance metric based on network topology 2. Quantify nodes in a community are closer wth each other than nodes outside the community There are two approaches, bottom-up and top-down. Girwan Newman Algorithm \u00b6 The most popular algorithm for network community detection is the Girvan-Newman algorithm. It is a top down approach where we take the whole network and try to break it into two communities. This can be continued till the bottom. Steps: 1. Define betweenneess mesure for each edge 2. Find the edge with maximum betweenness and remove it (The edge most in-between in the network connects up most number of pairs of nodes) 3. Recalculate and repeat The example that we are using in this blog is the Zachary Karate club . It contains 34 members, and after an internal conflict, the club split into two. Our goal is to find if we can predict out how they split based on communities. import matplotlib.pyplot as plt % matplotlib inline import networkx as nx G = nx . karate_club_graph () nx . draw_kamada_kawai ( G , with_labels = True ) # Calculating the betweenness centrality btw_centrality = nx . algorithms . centrality . edge_betweenness_centrality ( G ) # Sorting based on the betweenness centraliy and displaying the first 10 edges. sorted ( btw_centrality . items (), key = lambda item : item [ 1 ], reverse = True )[ 0 : 10 ] [((0, 31), 0.1272599949070537), ((0, 6), 0.07813428401663695), ((0, 5), 0.07813428401663694), ((0, 2), 0.0777876807288572), ((0, 8), 0.07423959482783014), ((2, 32), 0.06898678663384543), ((13, 33), 0.06782389723566191), ((19, 33), 0.05938233879410351), ((0, 11), 0.058823529411764705), ((26, 33), 0.0542908072319837)] def girwan_newman ( G , no_of_components_to_split ): while ( no_of_components_to_split > nx . algorithms . components . number_connected_components ( G )): # Calculate the betweenness centrality btw_centrality = nx . algorithms . centrality . edge_betweenness_centrality ( G ) # sort based on betweenness centrality sorted_edges = sorted ( btw_centrality . items (), key = lambda item : item [ 1 ], reverse = True )[ 0 ] print ( 'Removing the edge' , sorted_edges ) # remove edge which has highest centrality G . remove_edge ( * sorted_edges [ 0 ]) # Check if graph is split if ( no_of_components_to_split <= nx . algorithms . components . number_connected_components ( G )): # Plot the graph with both the nodes having different colors nx . draw_spring ( G , with_labels = True ) # return list of nodes in each community list_of_nodes = [ c for c in sorted ( nx . connected_components ( G ), key = len , reverse = True )] return list_of_nodes G = nx . karate_club_graph () communities = girwan_newman ( G , 2 ) communities Removing the edge ((0, 31), 0.1272599949070537) Removing the edge ((0, 2), 0.11924273983097515) Removing the edge ((0, 8), 0.13782067605597018) Removing the edge ((13, 33), 0.14617273782105492) Removing the edge ((19, 33), 0.21966651886437982) Removing the edge ((2, 32), 0.1786195286195287) Removing the edge ((1, 30), 0.25601957954899124) Removing the edge ((1, 2), 0.1947415329768271) Removing the edge ((2, 3), 0.19191919191919182) Removing the edge ((2, 7), 0.25445632798573975) Removing the edge ((2, 13), 0.5080213903743315) [{2, 8, 9, 14, 15, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}, {0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 19, 21}] We can see that after removing 11 edges based on the maximum betweenness values, the club splits into two parts. This can be seen below. These groups matches with what actually happened in the karate club. # Reinstanciste G if necessary G = nx . karate_club_graph () # Colors for edges colors_for_edges = 'rbgoy' pos = nx . spring_layout ( G ) for i , nodes in enumerate ( communities ): for node in nodes : G . add_node ( node , node_color = colors_for_edges [ i ]) nx . draw_kamada_kawai ( G , with_labels = True , node_color = list ( nx . get_node_attributes ( G , 'node_color' ) . values ())) NetworkX has a inbuilt function to calculate the same split. karate_club_split = nx . algorithms . community . centrality . girvan_newman ( G ) karate_club_split_tuple = tuple ( sorted ( c ) for c in next ( karate_club_split )) karate_club_split_tuple ([0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 19, 21], [2, 8, 9, 14, 15, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]) colors = 'rgb' for i , nodes in enumerate ( karate_club_split_tuple ): nx . draw_networkx_nodes ( G , pos = pos , nodelist = nodes , node_color = colors [ i ]) nx . draw_networkx_edges ( G , pos = pos ) Ratio cut method \u00b6 A more complex and advanced method is the ratio cut method. A cut in a graph is a set of edges, such that if we remove them, the network breaks up into two components. The procedure is as follows: 1. Find the minimum cut among all the pair of nodes 2. Repeat over each of the two parts cut The minimum cut can be found using Ratio Cut parameter. Minimum cut wil have the least ratio cut among all the other cuts. $$ Ratio\\,Cut\\, (P_{Red}) = \\frac{1}{number\\, of\\, partitions}\\times (\\frac{no\\, of\\, edges\\, in\\, partition1}{no\\, of\\, nodes\\, in\\, partition1} + \\frac{no\\, of\\, edges\\, in\\, partition2}{no\\, of\\, nodes\\, in\\, partition2} + ..) $$ This can be done quickly using an inbuilt function in NetworkX from networkx.algorithms import community communities = community . kernighan_lin_bisection ( G , max_iter = 100 ) pos = nx . spring_layout ( G ) nx . draw ( G , pos , with_labels = True , node_size = 100 , node_color = 'w' , node_shape = '.' ) for i in range ( len ( communities )): nx . draw_networkx_nodes ( G , pos , nodelist = communities [ i ], node_color = colors [ i ]) Other methods \u00b6 There are many other methods that can be used to identify communities, one of which is based on modularity. Modularity is defined as the \"distance\" from a random graph. essentially we will be comparing the number of edges with a community and the expected number of edges with a random graph. In NetworkX, we have a inbuilt function to implement this. # How many ideal nodes: Louvain package from community import community_louvain # https://en.wikipedia.org/wiki/Louvain_method community_louvain . best_partition ( G ) {0: 0, 1: 0, 2: 0, 3: 0, 4: 3, 5: 3, 6: 3, 7: 0, 8: 1, 9: 0, 10: 3, 11: 0, 12: 0, 13: 0, 14: 1, 15: 1, 16: 3, 17: 0, 18: 1, 19: 0, 20: 1, 21: 0, 22: 1, 23: 1, 24: 2, 25: 2, 26: 1, 27: 1, 28: 2, 29: 1, 30: 1, 31: 2, 32: 1, 33: 1}","title":"Community detection (Python)"},{"location":"Python/Community%20detection/#community-detection","text":"A community is a group of people who are homogeneous in some features. Marketers want to find communities so that they can target them. It is not trivial to identify communities from a given network. Community detection deals with identifying networks based only on the network topology. nodes in the community are closer than the nodes outside the community. What is closeness? To define closeness, we need to 1. Define distance metric based on network topology 2. Quantify nodes in a community are closer wth each other than nodes outside the community There are two approaches, bottom-up and top-down.","title":"Community detection"},{"location":"Python/Community%20detection/#girwan-newman-algorithm","text":"The most popular algorithm for network community detection is the Girvan-Newman algorithm. It is a top down approach where we take the whole network and try to break it into two communities. This can be continued till the bottom. Steps: 1. Define betweenneess mesure for each edge 2. Find the edge with maximum betweenness and remove it (The edge most in-between in the network connects up most number of pairs of nodes) 3. Recalculate and repeat The example that we are using in this blog is the Zachary Karate club . It contains 34 members, and after an internal conflict, the club split into two. Our goal is to find if we can predict out how they split based on communities. import matplotlib.pyplot as plt % matplotlib inline import networkx as nx G = nx . karate_club_graph () nx . draw_kamada_kawai ( G , with_labels = True ) # Calculating the betweenness centrality btw_centrality = nx . algorithms . centrality . edge_betweenness_centrality ( G ) # Sorting based on the betweenness centraliy and displaying the first 10 edges. sorted ( btw_centrality . items (), key = lambda item : item [ 1 ], reverse = True )[ 0 : 10 ] [((0, 31), 0.1272599949070537), ((0, 6), 0.07813428401663695), ((0, 5), 0.07813428401663694), ((0, 2), 0.0777876807288572), ((0, 8), 0.07423959482783014), ((2, 32), 0.06898678663384543), ((13, 33), 0.06782389723566191), ((19, 33), 0.05938233879410351), ((0, 11), 0.058823529411764705), ((26, 33), 0.0542908072319837)] def girwan_newman ( G , no_of_components_to_split ): while ( no_of_components_to_split > nx . algorithms . components . number_connected_components ( G )): # Calculate the betweenness centrality btw_centrality = nx . algorithms . centrality . edge_betweenness_centrality ( G ) # sort based on betweenness centrality sorted_edges = sorted ( btw_centrality . items (), key = lambda item : item [ 1 ], reverse = True )[ 0 ] print ( 'Removing the edge' , sorted_edges ) # remove edge which has highest centrality G . remove_edge ( * sorted_edges [ 0 ]) # Check if graph is split if ( no_of_components_to_split <= nx . algorithms . components . number_connected_components ( G )): # Plot the graph with both the nodes having different colors nx . draw_spring ( G , with_labels = True ) # return list of nodes in each community list_of_nodes = [ c for c in sorted ( nx . connected_components ( G ), key = len , reverse = True )] return list_of_nodes G = nx . karate_club_graph () communities = girwan_newman ( G , 2 ) communities Removing the edge ((0, 31), 0.1272599949070537) Removing the edge ((0, 2), 0.11924273983097515) Removing the edge ((0, 8), 0.13782067605597018) Removing the edge ((13, 33), 0.14617273782105492) Removing the edge ((19, 33), 0.21966651886437982) Removing the edge ((2, 32), 0.1786195286195287) Removing the edge ((1, 30), 0.25601957954899124) Removing the edge ((1, 2), 0.1947415329768271) Removing the edge ((2, 3), 0.19191919191919182) Removing the edge ((2, 7), 0.25445632798573975) Removing the edge ((2, 13), 0.5080213903743315) [{2, 8, 9, 14, 15, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}, {0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 19, 21}] We can see that after removing 11 edges based on the maximum betweenness values, the club splits into two parts. This can be seen below. These groups matches with what actually happened in the karate club. # Reinstanciste G if necessary G = nx . karate_club_graph () # Colors for edges colors_for_edges = 'rbgoy' pos = nx . spring_layout ( G ) for i , nodes in enumerate ( communities ): for node in nodes : G . add_node ( node , node_color = colors_for_edges [ i ]) nx . draw_kamada_kawai ( G , with_labels = True , node_color = list ( nx . get_node_attributes ( G , 'node_color' ) . values ())) NetworkX has a inbuilt function to calculate the same split. karate_club_split = nx . algorithms . community . centrality . girvan_newman ( G ) karate_club_split_tuple = tuple ( sorted ( c ) for c in next ( karate_club_split )) karate_club_split_tuple ([0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 19, 21], [2, 8, 9, 14, 15, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]) colors = 'rgb' for i , nodes in enumerate ( karate_club_split_tuple ): nx . draw_networkx_nodes ( G , pos = pos , nodelist = nodes , node_color = colors [ i ]) nx . draw_networkx_edges ( G , pos = pos )","title":"Girwan Newman Algorithm"},{"location":"Python/Community%20detection/#ratio-cut-method","text":"A more complex and advanced method is the ratio cut method. A cut in a graph is a set of edges, such that if we remove them, the network breaks up into two components. The procedure is as follows: 1. Find the minimum cut among all the pair of nodes 2. Repeat over each of the two parts cut The minimum cut can be found using Ratio Cut parameter. Minimum cut wil have the least ratio cut among all the other cuts. $$ Ratio\\,Cut\\, (P_{Red}) = \\frac{1}{number\\, of\\, partitions}\\times (\\frac{no\\, of\\, edges\\, in\\, partition1}{no\\, of\\, nodes\\, in\\, partition1} + \\frac{no\\, of\\, edges\\, in\\, partition2}{no\\, of\\, nodes\\, in\\, partition2} + ..) $$ This can be done quickly using an inbuilt function in NetworkX from networkx.algorithms import community communities = community . kernighan_lin_bisection ( G , max_iter = 100 ) pos = nx . spring_layout ( G ) nx . draw ( G , pos , with_labels = True , node_size = 100 , node_color = 'w' , node_shape = '.' ) for i in range ( len ( communities )): nx . draw_networkx_nodes ( G , pos , nodelist = communities [ i ], node_color = colors [ i ])","title":"Ratio cut method"},{"location":"Python/Community%20detection/#other-methods","text":"There are many other methods that can be used to identify communities, one of which is based on modularity. Modularity is defined as the \"distance\" from a random graph. essentially we will be comparing the number of edges with a community and the expected number of edges with a random graph. In NetworkX, we have a inbuilt function to implement this. # How many ideal nodes: Louvain package from community import community_louvain # https://en.wikipedia.org/wiki/Louvain_method community_louvain . best_partition ( G ) {0: 0, 1: 0, 2: 0, 3: 0, 4: 3, 5: 3, 6: 3, 7: 0, 8: 1, 9: 0, 10: 3, 11: 0, 12: 0, 13: 0, 14: 1, 15: 1, 16: 3, 17: 0, 18: 1, 19: 0, 20: 1, 21: 0, 22: 1, 23: 1, 24: 2, 25: 2, 26: 1, 27: 1, 28: 2, 29: 1, 30: 1, 31: 2, 32: 1, 33: 1}","title":"Other methods"},{"location":"Python/Demonstrating%20online%20learning/","text":"MathJax.Hub.Config({ extensions: [\"tex2jax.js\",\"TeX/AMSmath.js\",\"TeX/AMSsymbols.js\"], jax: [\"input/TeX\", \"output/HTML-CSS\"], tex2jax: { inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ], displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"] ], }, \"HTML-CSS\": { availableFonts: [\"TeX\"] } }); Streaming machine learning \u00b6 Batch learning : In batch machine learning, we use one dataset to train a model, and we deploy the model to predict on new data. This assumes that the dataset in which the model is trained is a proper representative sample of the population. This model is assumed as a static object. In order to learn from new data, the model has to be re-trained from scratch. This is the most common form of deploying models. Online learning : Some of the machine learning models that we know can be modified to learn on a single datapoint (row). When we can learn from a single datapoint, we can learn incrementally from new datapoints. Data is considered as a stream. Once the model is trained, we need not store the historic training set. The model is also more up to date. If the data's distribution happens over time, the model will be able to handle it (drift)[1]. Where can we use them? They are most useful in scenarios where new data and patterns are constantly arriving. eg: 1. Spam filtering 2. Recommendation engines (news feed predictions) 3. Financial transactions 4. Low compute power (only one data point exists in memory as we train using one data point only) Issues 1. New and not a lot of experience 2. Very few tools and packages 3. All algorithms do not have an online version. Kernel SVMs are impossible to fit on a streaming dataset. Likewise, CART and ID3 decision trees can\u2019t be trained online. However, lesser-known online approximations exist, such as random Fourier features for SVMs and Hoeffding trees for decision trees. 4. Slower than batch learning to reach steady state in real life (It is computationally faster by more than an order of magnitude) 5. Do not guarantee that models learnt are similar to the ones obtained in batch mode(some models). Some models do not guarentee of achieving steady state. 6. Overfitting Similarities We have the same limitations of machine learning, such as: 1. We need to do proper preprocessing 2. We need to do feature engineering as usual 3. The concepts of ensembles, feature extraction, feature selection, imbalanced classes, multiclass etc are same Preprocessing steps \u00b6 How do we preprocess data when we are streaming? How do we impute the null values by mean if we do not have complete data? How do we identify outliers when working on one row at a time? How can we do one-hot encoding when we don't know what classes are present overall? The package river is a handy package for online learning. It has a lot of pre-defined preprocessing functions. Let us look at some of them: from river import preprocessing dir ( preprocessing )[ 0 : 12 ] ['AdaptiveStandardScaler', 'Binarizer', 'FeatureHasher', 'LDA', 'MaxAbsScaler', 'MinMaxScaler', 'Normalizer', 'OneHotEncoder', 'PreviousImputer', 'RobustScaler', 'StandardScaler', 'StatImputer'] There are six functions for scaling and normalizing data. They are: 1. AdaptiveStandardScalar 2. MaxAbsScalar 3. MinMaxScalar 4. Normalizer 5. RobustScalar 6. StandardScaler For example, let us look at the documentation for Standard Scaler It scales the data to have zero mean and unit variance. Under the hood, a running mean and a running variance are maintained. The scaling is slightly different than when scaling the data in batch because the exact means and variances are not known in advance. However, this doesn't have a detrimental impact on performance in the long run. Let us look at an example: import numpy as np import matplotlib.pyplot as plt import pandas as pd import random random . seed ( 1995 ) from sklearn.datasets import load_iris iris = load_iris () data1 = pd . DataFrame ( data = np . c_ [ iris [ 'data' ], iris [ 'target' ]], columns = iris [ 'feature_names' ] + [ 'target' ]) data1 = data1 . query ( 'target < 2' ) . sample ( frac = 1 ) def data_feed ( df_datafeed ): # Generator function to give the next candidate for _ctr in range ( len ( df_datafeed )): yield df_datafeed . iloc [ _ctr ] from river import compose from river import linear_model from river import preprocessing preprocessing_model = compose . Pipeline ( preprocessing . StandardScaler (), linear_model . LogisticRegression ()) data_stream = data_feed ( data1 . loc [:, data1 . columns != 'target' ]) for n in range ( 10 ): data_point = next ( data_stream ) . to_frame () . transpose () transformed_data = preprocessing_model . transform_one ( data_point . iloc [ 0 ,:]) print ( '------------------------' ) print ( data_point ) print ( transformed_data ) ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 67 5.8 2.7 4.1 1.0 {'sepal length (cm)': 0.0, 'sepal width (cm)': 0.0, 'petal length (cm)': 0.0, 'petal width (cm)': 0.0} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 96 5.7 2.9 4.2 1.3 {'sepal length (cm)': -1.0, 'sepal width (cm)': 1.000000000000001, 'petal length (cm)': 0.9999999999999956, 'petal width (cm)': 1.0000000000000004} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 19 5.1 3.8 1.5 0.3 {'sepal length (cm)': -1.4018260516446994, 'sepal width (cm)': 1.3934660285832352, 'petal length (cm)': -1.4134589797160622, 'petal width (cm)': -1.352447383098741} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 5 5.4 3.9 1.7 0.4 {'sepal length (cm)': -0.36514837167010933, 'sepal width (cm)': 1.0830277015004253, 'petal length (cm)': -0.9198021534721369, 'petal width (cm)': -0.8427009716003844} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 64 5.6 2.9 3.6 1.3 {'sepal length (cm)': 0.32232918561015234, 'sepal width (cm)': -0.6740938478604231, 'petal length (cm)': 0.49202037860731096, 'petal width (cm)': 1.019130320146575} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 87 6.3 2.3 4.4 1.3 {'sepal length (cm)': 1.7636409634199253, 'sepal width (cm)': -1.3539553245018423, 'petal length (cm)': 0.9642101587457326, 'petal width (cm)': 0.8589556903873334} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 80 5.5 2.4 3.8 1.1 {'sepal length (cm)': -0.37242264987106416, 'sepal width (cm)': -0.9985160994941403, 'petal length (cm)': 0.4205955120960296, 'petal width (cm)': 0.3575992699260759} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 98 5.1 2.5 3.0 1.1 {'sepal length (cm)': -1.259494647504126, 'sepal width (cm)': -0.743358098059264, 'petal length (cm)': -0.27274857904612027, 'petal width (cm)': 0.331861655799986} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 15 5.7 4.4 1.5 0.4 {'sepal length (cm)': 0.3503113654141663, 'sepal width (cm)': 1.8442002991885438, 'petal length (cm)': -1.3918304919158082, 'petal width (cm)': -1.282736189026269} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 23 5.1 3.3 1.7 0.5 {'sepal length (cm)': -1.1921469919530685, 'sepal width (cm)': 0.28047526828011227, 'petal length (cm)': -1.077226017628646, 'petal width (cm)': -0.9305415914315355} Apart from preprocessing, using river, we can perform 1. Feature extraction/selection 2. Ensembles 3. Storing running statistics 4. Building regression and classification models 5. Time series 6. Anamoly detection 7. Clustering There are 6 types of machine learning models that we can build using river. They are: 1. Linear based (linear and logistic regression) 2. Tree based (Decision trees, Hoeffding trees) 3. Nearest neighbours based 4. Bayesian models 5. Neural Networks 6. Ensemble based models 7. Others from river import linear_model , naive_bayes , tree , neural_net , neighbors , expert , ensemble print ( 'Linear models' , dir ( linear_model )[ 0 : 7 ]) print ( 'Tree based modles' , dir ( tree )[ 0 : 6 ]) print ( 'Bayesian models' , dir ( naive_bayes )[ 0 : 4 ]) print ( 'Specialised models' , dir ( expert )[ 0 : 6 ]) print ( 'Ensemble mmodels' , dir ( ensemble )[ 0 : 8 ]) Linear models ['ALMAClassifier', 'LinearRegression', 'LogisticRegression', 'PAClassifier', 'PARegressor', 'Perceptron', 'SoftmaxRegression'] Tree based modles ['ExtremelyFastDecisionTreeClassifier', 'HoeffdingAdaptiveTreeClassifier', 'HoeffdingAdaptiveTreeRegressor', 'HoeffdingTreeClassifier', 'HoeffdingTreeRegressor', 'LabelCombinationHoeffdingTreeClassifier'] Bayesian models ['BernoulliNB', 'ComplementNB', 'GaussianNB', 'MultinomialNB'] Specialised models ['EWARegressor', 'EpsilonGreedyRegressor', 'StackingClassifier', 'SuccessiveHalvingClassifier', 'SuccessiveHalvingRegressor', 'UCBRegressor'] Ensemble mmodels ['ADWINBaggingClassifier', 'AdaBoostClassifier', 'AdaptiveRandomForestClassifier', 'AdaptiveRandomForestRegressor', 'BaggingClassifier', 'BaggingRegressor', 'LeveragingBaggingClassifier', 'SRPClassifier'] Modelling (under the hood) \u00b6 There are two types of streaming models, those which are entirely streaming and pseudo-online models. Pseudo-online models use a small batch of data to build the models, while completely online models build the models using only one data point.[3] Pseudo online models \u00b6 There are many theorems in statistics which can help us to bound the error of a metric between two variables. Hoeffding bound is one such theorem. \"Consider a real-valued random variable r whose range is R (e.g., for a probability the range is one, and for an information gain the range is log c, where c is the number of classes). Suppose we have made n independent observations of this variable, and computed their mean \\(\\bar r\\) . The Hoeffding bound states that, with probability 1 \u2212 \u03b4, the true mean of the variable is at least \\(\\bar r \u2212 \\epsilon\\) , where \\(\\epsilon = \\sqrt{\\frac{R^2ln(\\frac{1}{\\lambda})}{2n}}\\) .\" This is useful while creating decision trees. Using hoeffding bound, we can identify which feature should we use to split the tree. We can find if a variable has sufficient gini index (or other metrics) greater (lesser) than other variables with a probability below a cutoff probability and split the tree based on that metric. This can be acheived with very few data points which can be deleted after splitting and creating child nodes. This algorithm is called Hoeffding trees algorithm. Completely online models \u00b6 How can we update a model using only one data point? Let us look at Gradient Descent to understand this. In gradient descent, we want to minimise a convex loss function(MSE, regret, etc). As an example, consider the function \\(h(x) = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + ..\\) (or any convex function). The mean squared error is \\(J(\\theta) = \\frac{1}{2} \\sum_{i=1}^{m} (y_{(i)}-h_{\\theta}(x_{(i)}))^{2}\\) . In gradient descent, we find the \\(\\beta_i\\) that minimises \\(J(\\theta)\\) . In batch model, we consider all the data points that exist to identfy the optimal solution. In streaming learning, we initialise the \\(\\beta_i\\) as 0 and keep incrementally changing the \\(\\beta_i\\) 's using \\( \\(\\beta_{i, t} = \\beta_{i, t-1} + \\alpha \\times \\frac{\\partial}{\\partial \\theta_{j}} J(\\theta)\\) \\) Steps in updating the model \u00b6 In online learning, there are 4 steps[3]. For every new datapoint, we will recursively run the following steps. For \\({\\displaystyle t=1,2,...,T}\\) Learner receives input \\({\\displaystyle x_{t}}\\) Learner outputs \\({\\displaystyle w_{t}}\\) from a fixed convex set \\({\\displaystyle S}\\) Nature sends back a convex loss function \\({\\displaystyle v_{t}:S\\rightarrow \\mathbb {R} }\\) . Learner suffers loss \\({\\displaystyle v_{t}(w_{t})}\\) and updates its model. Implimentation using river \u00b6 Every online machine learning model has the following basic 5 functions: dir ( linear_model . LogisticRegression )[ 50 : 55 ] ['learn_many', 'learn_one', 'predict_many', 'predict_one', 'predict_proba_many'] As the name mentions, learn_one and predict_one learn and predict from one data point, learn_many, predict_many and predict_prob_many learn and predict using multiple data points. River is the result of a merger between creme and scikit-multiflow, and the remaining functions in the library follow a similar pattern to the same. Building a model \u00b6 Using the same data as above, let us build a sample model using river for streaming. from river import compose river_model = compose . Pipeline ( preprocessing . StandardScaler (), tree . HoeffdingTreeClassifier () ) from sklearn.metrics import accuracy_score acc_scores = [] cols_x = [ 'sepal length (cm)' , 'sepal width (cm)' , 'petal length (cm)' , 'petal width (cm)' ] def compute_accuracy ( data , model , truth_col ): predict_all = data . apply ( lambda row : model . predict_one ( row ), axis = 1 ) acc_scores . append ( accuracy_score ( np . array ( predict_all ), data [ truth_col ])) print ( 'Accuracy is ' , acc_scores [ - 1 ]) data_stream = data_feed ( data1 ) for n in range ( 20 ): data_point = next ( data_stream ) print ( data_point ) if ( n > 1 ): predict_one = river_model . predict_one ( data_point [ cols_x ]) print ( 'Current_prediction' , predict_one , data_point [ 'target' ]) river_model . learn_one ( data_point [ cols_x ], data_point [ 'target' ]) compute_accuracy ( data1 , river_model , 'target' ) print ( '------------------------' ) sepal length (cm) 5.8 sepal width (cm) 2.7 petal length (cm) 4.1 petal width (cm) 1.0 target 1.0 Name: 67, dtype: float64 Accuracy is 0.5 ------------------------ sepal length (cm) 5.7 sepal width (cm) 2.9 petal length (cm) 4.2 petal width (cm) 1.3 target 1.0 Name: 96, dtype: float64 Accuracy is 0.5 ------------------------ sepal length (cm) 5.1 sepal width (cm) 3.8 petal length (cm) 1.5 petal width (cm) 0.3 target 0.0 Name: 19, dtype: float64 Current_prediction 1.0 0.0 Accuracy is 0.5 ------------------------ sepal length (cm) 5.4 sepal width (cm) 3.9 petal length (cm) 1.7 petal width (cm) 0.4 target 0.0 Name: 5, dtype: float64 Current_prediction 1.0 0.0 Accuracy is 0.71 ------------------------ sepal length (cm) 5.6 sepal width (cm) 2.9 petal length (cm) 3.6 petal width (cm) 1.3 target 1.0 Name: 64, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 0.79 ------------------------ sepal length (cm) 6.3 sepal width (cm) 2.3 petal length (cm) 4.4 petal width (cm) 1.3 target 1.0 Name: 87, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 0.69 ------------------------ sepal length (cm) 5.5 sepal width (cm) 2.4 petal length (cm) 3.8 petal width (cm) 1.1 target 1.0 Name: 80, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 0.69 ------------------------ sepal length (cm) 5.1 sepal width (cm) 2.5 petal length (cm) 3.0 petal width (cm) 1.1 target 1.0 Name: 98, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 0.69 ------------------------ sepal length (cm) 5.7 sepal width (cm) 4.4 petal length (cm) 1.5 petal width (cm) 0.4 target 0.0 Name: 15, dtype: float64 Current_prediction 1.0 0.0 Accuracy is 0.99 ------------------------ sepal length (cm) 5.1 sepal width (cm) 3.3 petal length (cm) 1.7 petal width (cm) 0.5 target 0.0 Name: 23, dtype: float64 Current_prediction 0.0 0.0 Accuracy is 1.0 ------------------------ sepal length (cm) 4.8 sepal width (cm) 3.1 petal length (cm) 1.6 petal width (cm) 0.2 target 0.0 Name: 30, dtype: float64 Current_prediction 0.0 0.0 Accuracy is 1.0 ------------------------ sepal length (cm) 5.5 sepal width (cm) 2.5 petal length (cm) 4.0 petal width (cm) 1.3 target 1.0 Name: 89, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 1.0 ------------------------ sepal length (cm) 4.5 sepal width (cm) 2.3 petal length (cm) 1.3 petal width (cm) 0.3 target 0.0 Name: 41, dtype: float64 Current_prediction 0.0 0.0 Accuracy is 1.0 ------------------------ sepal length (cm) 6.1 sepal width (cm) 3.0 petal length (cm) 4.6 petal width (cm) 1.4 target 1.0 Name: 91, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 1.0 ------------------------ sepal length (cm) 5.2 sepal width (cm) 3.5 petal length (cm) 1.5 petal width (cm) 0.2 target 0.0 Name: 27, dtype: float64 Current_prediction 0.0 0.0 Accuracy is 1.0 ------------------------ sepal length (cm) 7.0 sepal width (cm) 3.2 petal length (cm) 4.7 petal width (cm) 1.4 target 1.0 Name: 50, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 1.0 ------------------------ sepal length (cm) 5.5 sepal width (cm) 4.2 petal length (cm) 1.4 petal width (cm) 0.2 target 0.0 Name: 33, dtype: float64 Current_prediction 0.0 0.0 Accuracy is 1.0 ------------------------ sepal length (cm) 5.9 sepal width (cm) 3.2 petal length (cm) 4.8 petal width (cm) 1.8 target 1.0 Name: 70, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 1.0 ------------------------ sepal length (cm) 6.6 sepal width (cm) 3.0 petal length (cm) 4.4 petal width (cm) 1.4 target 1.0 Name: 75, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 1.0 ------------------------ sepal length (cm) 4.4 sepal width (cm) 3.0 petal length (cm) 1.3 petal width (cm) 0.2 target 0.0 Name: 38, dtype: float64 Current_prediction 0.0 0.0 Accuracy is 1.0 ------------------------ import matplotlib.pyplot as plt % matplotlib inline plt . plot ( acc_scores ) plt . ylabel ( 'Accuracy score' ) plt . xlabel ( 'Sample #' ) <matplotlib.text.Text at 0x340c5208> river_model2 = compose . Pipeline ( preprocessing . StandardScaler (), linear_model . LogisticRegression () ) acc_scores1 = [] def compute_accuracy ( data , model , truth_col ): predict_all = data . apply ( lambda row : model . predict_one ( row ), axis = 1 ) acc_scores1 . append ( accuracy_score ( np . array ( predict_all ), data [ truth_col ])) print ( 'Accuracy is ' , acc_scores1 [ - 1 ]) data_stream = data_feed ( data1 ) for n in range ( 10 ): data_point = next ( data_stream ) print ( data_point ) if ( n > 1 ): predict_one = river_model2 . predict_one ( data_point [ cols_x ]) print ( 'Current_prediction' , predict_one , data_point [ 'target' ]) river_model2 . learn_one ( data_point [ cols_x ], data_point [ 'target' ]) compute_accuracy ( data1 , river_model2 , 'target' ) print ( '------------------------' ) sepal length (cm) 5.8 sepal width (cm) 2.7 petal length (cm) 4.1 petal width (cm) 1.0 target 1.0 Name: 67, dtype: float64 Accuracy is 0.5 ------------------------ sepal length (cm) 5.7 sepal width (cm) 2.9 petal length (cm) 4.2 petal width (cm) 1.3 target 1.0 Name: 96, dtype: float64 Accuracy is 0.94 ------------------------ sepal length (cm) 5.1 sepal width (cm) 3.8 petal length (cm) 1.5 petal width (cm) 0.3 target 0.0 Name: 19, dtype: float64 Current_prediction False 0.0 Accuracy is 1.0 ------------------------ sepal length (cm) 5.4 sepal width (cm) 3.9 petal length (cm) 1.7 petal width (cm) 0.4 target 0.0 Name: 5, dtype: float64 Current_prediction False 0.0 Accuracy is 1.0 ------------------------ sepal length (cm) 5.6 sepal width (cm) 2.9 petal length (cm) 3.6 petal width (cm) 1.3 target 1.0 Name: 64, dtype: float64 Current_prediction True 1.0 Accuracy is 1.0 ------------------------ sepal length (cm) 6.3 sepal width (cm) 2.3 petal length (cm) 4.4 petal width (cm) 1.3 target 1.0 Name: 87, dtype: float64 Current_prediction True 1.0 Accuracy is 1.0 ------------------------ sepal length (cm) 5.5 sepal width (cm) 2.4 petal length (cm) 3.8 petal width (cm) 1.1 target 1.0 Name: 80, dtype: float64 Current_prediction True 1.0 Accuracy is 0.99 ------------------------ sepal length (cm) 5.1 sepal width (cm) 2.5 petal length (cm) 3.0 petal width (cm) 1.1 target 1.0 Name: 98, dtype: float64 Current_prediction True 1.0 Accuracy is 0.99 ------------------------ sepal length (cm) 5.7 sepal width (cm) 4.4 petal length (cm) 1.5 petal width (cm) 0.4 target 0.0 Name: 15, dtype: float64 Current_prediction False 0.0 Accuracy is 0.99 ------------------------ sepal length (cm) 5.1 sepal width (cm) 3.3 petal length (cm) 1.7 petal width (cm) 0.5 target 0.0 Name: 23, dtype: float64 Current_prediction False 0.0 Accuracy is 0.99 ------------------------ import matplotlib.pyplot as plt % matplotlib inline plt . plot ( acc_scores1 ) plt . ylabel ( 'Accuracy score' ) plt . xlabel ( 'Sample #' ) <matplotlib.text.Text at 0x34d304a8> References \u00b6 Introductory material: https://towardsdatascience.com/machine-learning-for-streaming-data-with-creme-dacf5fb469df Hoeffding Trees: https://homes.cs.washington.edu/~pedrod/papers/kdd00.pdf Modelling under the hood: https://en.wikipedia.org/wiki/Online_machine_learning River Git: https://github.com/online-ml/river River installation steps: https://riverml.xyz/dev/getting-started/installation/ River documentation: https://riverml.xyz/dev/api/overview/ Batch decision trees: https://www.harshaash.com/cart-classification/","title":"Streaming Machine Learning (Python)"},{"location":"Python/Demonstrating%20online%20learning/#streaming-machine-learning","text":"Batch learning : In batch machine learning, we use one dataset to train a model, and we deploy the model to predict on new data. This assumes that the dataset in which the model is trained is a proper representative sample of the population. This model is assumed as a static object. In order to learn from new data, the model has to be re-trained from scratch. This is the most common form of deploying models. Online learning : Some of the machine learning models that we know can be modified to learn on a single datapoint (row). When we can learn from a single datapoint, we can learn incrementally from new datapoints. Data is considered as a stream. Once the model is trained, we need not store the historic training set. The model is also more up to date. If the data's distribution happens over time, the model will be able to handle it (drift)[1]. Where can we use them? They are most useful in scenarios where new data and patterns are constantly arriving. eg: 1. Spam filtering 2. Recommendation engines (news feed predictions) 3. Financial transactions 4. Low compute power (only one data point exists in memory as we train using one data point only) Issues 1. New and not a lot of experience 2. Very few tools and packages 3. All algorithms do not have an online version. Kernel SVMs are impossible to fit on a streaming dataset. Likewise, CART and ID3 decision trees can\u2019t be trained online. However, lesser-known online approximations exist, such as random Fourier features for SVMs and Hoeffding trees for decision trees. 4. Slower than batch learning to reach steady state in real life (It is computationally faster by more than an order of magnitude) 5. Do not guarantee that models learnt are similar to the ones obtained in batch mode(some models). Some models do not guarentee of achieving steady state. 6. Overfitting Similarities We have the same limitations of machine learning, such as: 1. We need to do proper preprocessing 2. We need to do feature engineering as usual 3. The concepts of ensembles, feature extraction, feature selection, imbalanced classes, multiclass etc are same","title":"Streaming machine learning"},{"location":"Python/Demonstrating%20online%20learning/#preprocessing-steps","text":"How do we preprocess data when we are streaming? How do we impute the null values by mean if we do not have complete data? How do we identify outliers when working on one row at a time? How can we do one-hot encoding when we don't know what classes are present overall? The package river is a handy package for online learning. It has a lot of pre-defined preprocessing functions. Let us look at some of them: from river import preprocessing dir ( preprocessing )[ 0 : 12 ] ['AdaptiveStandardScaler', 'Binarizer', 'FeatureHasher', 'LDA', 'MaxAbsScaler', 'MinMaxScaler', 'Normalizer', 'OneHotEncoder', 'PreviousImputer', 'RobustScaler', 'StandardScaler', 'StatImputer'] There are six functions for scaling and normalizing data. They are: 1. AdaptiveStandardScalar 2. MaxAbsScalar 3. MinMaxScalar 4. Normalizer 5. RobustScalar 6. StandardScaler For example, let us look at the documentation for Standard Scaler It scales the data to have zero mean and unit variance. Under the hood, a running mean and a running variance are maintained. The scaling is slightly different than when scaling the data in batch because the exact means and variances are not known in advance. However, this doesn't have a detrimental impact on performance in the long run. Let us look at an example: import numpy as np import matplotlib.pyplot as plt import pandas as pd import random random . seed ( 1995 ) from sklearn.datasets import load_iris iris = load_iris () data1 = pd . DataFrame ( data = np . c_ [ iris [ 'data' ], iris [ 'target' ]], columns = iris [ 'feature_names' ] + [ 'target' ]) data1 = data1 . query ( 'target < 2' ) . sample ( frac = 1 ) def data_feed ( df_datafeed ): # Generator function to give the next candidate for _ctr in range ( len ( df_datafeed )): yield df_datafeed . iloc [ _ctr ] from river import compose from river import linear_model from river import preprocessing preprocessing_model = compose . Pipeline ( preprocessing . StandardScaler (), linear_model . LogisticRegression ()) data_stream = data_feed ( data1 . loc [:, data1 . columns != 'target' ]) for n in range ( 10 ): data_point = next ( data_stream ) . to_frame () . transpose () transformed_data = preprocessing_model . transform_one ( data_point . iloc [ 0 ,:]) print ( '------------------------' ) print ( data_point ) print ( transformed_data ) ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 67 5.8 2.7 4.1 1.0 {'sepal length (cm)': 0.0, 'sepal width (cm)': 0.0, 'petal length (cm)': 0.0, 'petal width (cm)': 0.0} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 96 5.7 2.9 4.2 1.3 {'sepal length (cm)': -1.0, 'sepal width (cm)': 1.000000000000001, 'petal length (cm)': 0.9999999999999956, 'petal width (cm)': 1.0000000000000004} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 19 5.1 3.8 1.5 0.3 {'sepal length (cm)': -1.4018260516446994, 'sepal width (cm)': 1.3934660285832352, 'petal length (cm)': -1.4134589797160622, 'petal width (cm)': -1.352447383098741} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 5 5.4 3.9 1.7 0.4 {'sepal length (cm)': -0.36514837167010933, 'sepal width (cm)': 1.0830277015004253, 'petal length (cm)': -0.9198021534721369, 'petal width (cm)': -0.8427009716003844} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 64 5.6 2.9 3.6 1.3 {'sepal length (cm)': 0.32232918561015234, 'sepal width (cm)': -0.6740938478604231, 'petal length (cm)': 0.49202037860731096, 'petal width (cm)': 1.019130320146575} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 87 6.3 2.3 4.4 1.3 {'sepal length (cm)': 1.7636409634199253, 'sepal width (cm)': -1.3539553245018423, 'petal length (cm)': 0.9642101587457326, 'petal width (cm)': 0.8589556903873334} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 80 5.5 2.4 3.8 1.1 {'sepal length (cm)': -0.37242264987106416, 'sepal width (cm)': -0.9985160994941403, 'petal length (cm)': 0.4205955120960296, 'petal width (cm)': 0.3575992699260759} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 98 5.1 2.5 3.0 1.1 {'sepal length (cm)': -1.259494647504126, 'sepal width (cm)': -0.743358098059264, 'petal length (cm)': -0.27274857904612027, 'petal width (cm)': 0.331861655799986} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 15 5.7 4.4 1.5 0.4 {'sepal length (cm)': 0.3503113654141663, 'sepal width (cm)': 1.8442002991885438, 'petal length (cm)': -1.3918304919158082, 'petal width (cm)': -1.282736189026269} ------------------------ sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 23 5.1 3.3 1.7 0.5 {'sepal length (cm)': -1.1921469919530685, 'sepal width (cm)': 0.28047526828011227, 'petal length (cm)': -1.077226017628646, 'petal width (cm)': -0.9305415914315355} Apart from preprocessing, using river, we can perform 1. Feature extraction/selection 2. Ensembles 3. Storing running statistics 4. Building regression and classification models 5. Time series 6. Anamoly detection 7. Clustering There are 6 types of machine learning models that we can build using river. They are: 1. Linear based (linear and logistic regression) 2. Tree based (Decision trees, Hoeffding trees) 3. Nearest neighbours based 4. Bayesian models 5. Neural Networks 6. Ensemble based models 7. Others from river import linear_model , naive_bayes , tree , neural_net , neighbors , expert , ensemble print ( 'Linear models' , dir ( linear_model )[ 0 : 7 ]) print ( 'Tree based modles' , dir ( tree )[ 0 : 6 ]) print ( 'Bayesian models' , dir ( naive_bayes )[ 0 : 4 ]) print ( 'Specialised models' , dir ( expert )[ 0 : 6 ]) print ( 'Ensemble mmodels' , dir ( ensemble )[ 0 : 8 ]) Linear models ['ALMAClassifier', 'LinearRegression', 'LogisticRegression', 'PAClassifier', 'PARegressor', 'Perceptron', 'SoftmaxRegression'] Tree based modles ['ExtremelyFastDecisionTreeClassifier', 'HoeffdingAdaptiveTreeClassifier', 'HoeffdingAdaptiveTreeRegressor', 'HoeffdingTreeClassifier', 'HoeffdingTreeRegressor', 'LabelCombinationHoeffdingTreeClassifier'] Bayesian models ['BernoulliNB', 'ComplementNB', 'GaussianNB', 'MultinomialNB'] Specialised models ['EWARegressor', 'EpsilonGreedyRegressor', 'StackingClassifier', 'SuccessiveHalvingClassifier', 'SuccessiveHalvingRegressor', 'UCBRegressor'] Ensemble mmodels ['ADWINBaggingClassifier', 'AdaBoostClassifier', 'AdaptiveRandomForestClassifier', 'AdaptiveRandomForestRegressor', 'BaggingClassifier', 'BaggingRegressor', 'LeveragingBaggingClassifier', 'SRPClassifier']","title":"Preprocessing steps"},{"location":"Python/Demonstrating%20online%20learning/#modelling-under-the-hood","text":"There are two types of streaming models, those which are entirely streaming and pseudo-online models. Pseudo-online models use a small batch of data to build the models, while completely online models build the models using only one data point.[3]","title":"Modelling (under the hood)"},{"location":"Python/Demonstrating%20online%20learning/#pseudo-online-models","text":"There are many theorems in statistics which can help us to bound the error of a metric between two variables. Hoeffding bound is one such theorem. \"Consider a real-valued random variable r whose range is R (e.g., for a probability the range is one, and for an information gain the range is log c, where c is the number of classes). Suppose we have made n independent observations of this variable, and computed their mean \\(\\bar r\\) . The Hoeffding bound states that, with probability 1 \u2212 \u03b4, the true mean of the variable is at least \\(\\bar r \u2212 \\epsilon\\) , where \\(\\epsilon = \\sqrt{\\frac{R^2ln(\\frac{1}{\\lambda})}{2n}}\\) .\" This is useful while creating decision trees. Using hoeffding bound, we can identify which feature should we use to split the tree. We can find if a variable has sufficient gini index (or other metrics) greater (lesser) than other variables with a probability below a cutoff probability and split the tree based on that metric. This can be acheived with very few data points which can be deleted after splitting and creating child nodes. This algorithm is called Hoeffding trees algorithm.","title":"Pseudo online models"},{"location":"Python/Demonstrating%20online%20learning/#completely-online-models","text":"How can we update a model using only one data point? Let us look at Gradient Descent to understand this. In gradient descent, we want to minimise a convex loss function(MSE, regret, etc). As an example, consider the function \\(h(x) = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + ..\\) (or any convex function). The mean squared error is \\(J(\\theta) = \\frac{1}{2} \\sum_{i=1}^{m} (y_{(i)}-h_{\\theta}(x_{(i)}))^{2}\\) . In gradient descent, we find the \\(\\beta_i\\) that minimises \\(J(\\theta)\\) . In batch model, we consider all the data points that exist to identfy the optimal solution. In streaming learning, we initialise the \\(\\beta_i\\) as 0 and keep incrementally changing the \\(\\beta_i\\) 's using \\( \\(\\beta_{i, t} = \\beta_{i, t-1} + \\alpha \\times \\frac{\\partial}{\\partial \\theta_{j}} J(\\theta)\\) \\)","title":"Completely online models"},{"location":"Python/Demonstrating%20online%20learning/#steps-in-updating-the-model","text":"In online learning, there are 4 steps[3]. For every new datapoint, we will recursively run the following steps. For \\({\\displaystyle t=1,2,...,T}\\) Learner receives input \\({\\displaystyle x_{t}}\\) Learner outputs \\({\\displaystyle w_{t}}\\) from a fixed convex set \\({\\displaystyle S}\\) Nature sends back a convex loss function \\({\\displaystyle v_{t}:S\\rightarrow \\mathbb {R} }\\) . Learner suffers loss \\({\\displaystyle v_{t}(w_{t})}\\) and updates its model.","title":"Steps in updating the model"},{"location":"Python/Demonstrating%20online%20learning/#implimentation-using-river","text":"Every online machine learning model has the following basic 5 functions: dir ( linear_model . LogisticRegression )[ 50 : 55 ] ['learn_many', 'learn_one', 'predict_many', 'predict_one', 'predict_proba_many'] As the name mentions, learn_one and predict_one learn and predict from one data point, learn_many, predict_many and predict_prob_many learn and predict using multiple data points. River is the result of a merger between creme and scikit-multiflow, and the remaining functions in the library follow a similar pattern to the same.","title":"Implimentation using river"},{"location":"Python/Demonstrating%20online%20learning/#building-a-model","text":"Using the same data as above, let us build a sample model using river for streaming. from river import compose river_model = compose . Pipeline ( preprocessing . StandardScaler (), tree . HoeffdingTreeClassifier () ) from sklearn.metrics import accuracy_score acc_scores = [] cols_x = [ 'sepal length (cm)' , 'sepal width (cm)' , 'petal length (cm)' , 'petal width (cm)' ] def compute_accuracy ( data , model , truth_col ): predict_all = data . apply ( lambda row : model . predict_one ( row ), axis = 1 ) acc_scores . append ( accuracy_score ( np . array ( predict_all ), data [ truth_col ])) print ( 'Accuracy is ' , acc_scores [ - 1 ]) data_stream = data_feed ( data1 ) for n in range ( 20 ): data_point = next ( data_stream ) print ( data_point ) if ( n > 1 ): predict_one = river_model . predict_one ( data_point [ cols_x ]) print ( 'Current_prediction' , predict_one , data_point [ 'target' ]) river_model . learn_one ( data_point [ cols_x ], data_point [ 'target' ]) compute_accuracy ( data1 , river_model , 'target' ) print ( '------------------------' ) sepal length (cm) 5.8 sepal width (cm) 2.7 petal length (cm) 4.1 petal width (cm) 1.0 target 1.0 Name: 67, dtype: float64 Accuracy is 0.5 ------------------------ sepal length (cm) 5.7 sepal width (cm) 2.9 petal length (cm) 4.2 petal width (cm) 1.3 target 1.0 Name: 96, dtype: float64 Accuracy is 0.5 ------------------------ sepal length (cm) 5.1 sepal width (cm) 3.8 petal length (cm) 1.5 petal width (cm) 0.3 target 0.0 Name: 19, dtype: float64 Current_prediction 1.0 0.0 Accuracy is 0.5 ------------------------ sepal length (cm) 5.4 sepal width (cm) 3.9 petal length (cm) 1.7 petal width (cm) 0.4 target 0.0 Name: 5, dtype: float64 Current_prediction 1.0 0.0 Accuracy is 0.71 ------------------------ sepal length (cm) 5.6 sepal width (cm) 2.9 petal length (cm) 3.6 petal width (cm) 1.3 target 1.0 Name: 64, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 0.79 ------------------------ sepal length (cm) 6.3 sepal width (cm) 2.3 petal length (cm) 4.4 petal width (cm) 1.3 target 1.0 Name: 87, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 0.69 ------------------------ sepal length (cm) 5.5 sepal width (cm) 2.4 petal length (cm) 3.8 petal width (cm) 1.1 target 1.0 Name: 80, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 0.69 ------------------------ sepal length (cm) 5.1 sepal width (cm) 2.5 petal length (cm) 3.0 petal width (cm) 1.1 target 1.0 Name: 98, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 0.69 ------------------------ sepal length (cm) 5.7 sepal width (cm) 4.4 petal length (cm) 1.5 petal width (cm) 0.4 target 0.0 Name: 15, dtype: float64 Current_prediction 1.0 0.0 Accuracy is 0.99 ------------------------ sepal length (cm) 5.1 sepal width (cm) 3.3 petal length (cm) 1.7 petal width (cm) 0.5 target 0.0 Name: 23, dtype: float64 Current_prediction 0.0 0.0 Accuracy is 1.0 ------------------------ sepal length (cm) 4.8 sepal width (cm) 3.1 petal length (cm) 1.6 petal width (cm) 0.2 target 0.0 Name: 30, dtype: float64 Current_prediction 0.0 0.0 Accuracy is 1.0 ------------------------ sepal length (cm) 5.5 sepal width (cm) 2.5 petal length (cm) 4.0 petal width (cm) 1.3 target 1.0 Name: 89, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 1.0 ------------------------ sepal length (cm) 4.5 sepal width (cm) 2.3 petal length (cm) 1.3 petal width (cm) 0.3 target 0.0 Name: 41, dtype: float64 Current_prediction 0.0 0.0 Accuracy is 1.0 ------------------------ sepal length (cm) 6.1 sepal width (cm) 3.0 petal length (cm) 4.6 petal width (cm) 1.4 target 1.0 Name: 91, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 1.0 ------------------------ sepal length (cm) 5.2 sepal width (cm) 3.5 petal length (cm) 1.5 petal width (cm) 0.2 target 0.0 Name: 27, dtype: float64 Current_prediction 0.0 0.0 Accuracy is 1.0 ------------------------ sepal length (cm) 7.0 sepal width (cm) 3.2 petal length (cm) 4.7 petal width (cm) 1.4 target 1.0 Name: 50, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 1.0 ------------------------ sepal length (cm) 5.5 sepal width (cm) 4.2 petal length (cm) 1.4 petal width (cm) 0.2 target 0.0 Name: 33, dtype: float64 Current_prediction 0.0 0.0 Accuracy is 1.0 ------------------------ sepal length (cm) 5.9 sepal width (cm) 3.2 petal length (cm) 4.8 petal width (cm) 1.8 target 1.0 Name: 70, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 1.0 ------------------------ sepal length (cm) 6.6 sepal width (cm) 3.0 petal length (cm) 4.4 petal width (cm) 1.4 target 1.0 Name: 75, dtype: float64 Current_prediction 1.0 1.0 Accuracy is 1.0 ------------------------ sepal length (cm) 4.4 sepal width (cm) 3.0 petal length (cm) 1.3 petal width (cm) 0.2 target 0.0 Name: 38, dtype: float64 Current_prediction 0.0 0.0 Accuracy is 1.0 ------------------------ import matplotlib.pyplot as plt % matplotlib inline plt . plot ( acc_scores ) plt . ylabel ( 'Accuracy score' ) plt . xlabel ( 'Sample #' ) <matplotlib.text.Text at 0x340c5208> river_model2 = compose . Pipeline ( preprocessing . StandardScaler (), linear_model . LogisticRegression () ) acc_scores1 = [] def compute_accuracy ( data , model , truth_col ): predict_all = data . apply ( lambda row : model . predict_one ( row ), axis = 1 ) acc_scores1 . append ( accuracy_score ( np . array ( predict_all ), data [ truth_col ])) print ( 'Accuracy is ' , acc_scores1 [ - 1 ]) data_stream = data_feed ( data1 ) for n in range ( 10 ): data_point = next ( data_stream ) print ( data_point ) if ( n > 1 ): predict_one = river_model2 . predict_one ( data_point [ cols_x ]) print ( 'Current_prediction' , predict_one , data_point [ 'target' ]) river_model2 . learn_one ( data_point [ cols_x ], data_point [ 'target' ]) compute_accuracy ( data1 , river_model2 , 'target' ) print ( '------------------------' ) sepal length (cm) 5.8 sepal width (cm) 2.7 petal length (cm) 4.1 petal width (cm) 1.0 target 1.0 Name: 67, dtype: float64 Accuracy is 0.5 ------------------------ sepal length (cm) 5.7 sepal width (cm) 2.9 petal length (cm) 4.2 petal width (cm) 1.3 target 1.0 Name: 96, dtype: float64 Accuracy is 0.94 ------------------------ sepal length (cm) 5.1 sepal width (cm) 3.8 petal length (cm) 1.5 petal width (cm) 0.3 target 0.0 Name: 19, dtype: float64 Current_prediction False 0.0 Accuracy is 1.0 ------------------------ sepal length (cm) 5.4 sepal width (cm) 3.9 petal length (cm) 1.7 petal width (cm) 0.4 target 0.0 Name: 5, dtype: float64 Current_prediction False 0.0 Accuracy is 1.0 ------------------------ sepal length (cm) 5.6 sepal width (cm) 2.9 petal length (cm) 3.6 petal width (cm) 1.3 target 1.0 Name: 64, dtype: float64 Current_prediction True 1.0 Accuracy is 1.0 ------------------------ sepal length (cm) 6.3 sepal width (cm) 2.3 petal length (cm) 4.4 petal width (cm) 1.3 target 1.0 Name: 87, dtype: float64 Current_prediction True 1.0 Accuracy is 1.0 ------------------------ sepal length (cm) 5.5 sepal width (cm) 2.4 petal length (cm) 3.8 petal width (cm) 1.1 target 1.0 Name: 80, dtype: float64 Current_prediction True 1.0 Accuracy is 0.99 ------------------------ sepal length (cm) 5.1 sepal width (cm) 2.5 petal length (cm) 3.0 petal width (cm) 1.1 target 1.0 Name: 98, dtype: float64 Current_prediction True 1.0 Accuracy is 0.99 ------------------------ sepal length (cm) 5.7 sepal width (cm) 4.4 petal length (cm) 1.5 petal width (cm) 0.4 target 0.0 Name: 15, dtype: float64 Current_prediction False 0.0 Accuracy is 0.99 ------------------------ sepal length (cm) 5.1 sepal width (cm) 3.3 petal length (cm) 1.7 petal width (cm) 0.5 target 0.0 Name: 23, dtype: float64 Current_prediction False 0.0 Accuracy is 0.99 ------------------------ import matplotlib.pyplot as plt % matplotlib inline plt . plot ( acc_scores1 ) plt . ylabel ( 'Accuracy score' ) plt . xlabel ( 'Sample #' ) <matplotlib.text.Text at 0x34d304a8>","title":"Building a model"},{"location":"Python/Demonstrating%20online%20learning/#references","text":"Introductory material: https://towardsdatascience.com/machine-learning-for-streaming-data-with-creme-dacf5fb469df Hoeffding Trees: https://homes.cs.washington.edu/~pedrod/papers/kdd00.pdf Modelling under the hood: https://en.wikipedia.org/wiki/Online_machine_learning River Git: https://github.com/online-ml/river River installation steps: https://riverml.xyz/dev/getting-started/installation/ River documentation: https://riverml.xyz/dev/api/overview/ Batch decision trees: https://www.harshaash.com/cart-classification/","title":"References"},{"location":"Python/Diffusion%20on%20networks/","text":"MathJax.Hub.Config({ extensions: [\"tex2jax.js\",\"TeX/AMSmath.js\",\"TeX/AMSsymbols.js\"], jax: [\"input/TeX\", \"output/HTML-CSS\"], tex2jax: { inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ], displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"] ], }, \"HTML-CSS\": { availableFonts: [\"TeX\"] } }); Forecasting adoption of a new product \u00b6 Harsha Achyuthuni Introduction \u00b6 Forecasting new adoptions after a product introduction is an important marketing problem. I want to use a forecasting model developed by Frank Bass that has proven to be effective in forecasting the adoption of innovative and new technologies. I am going to use Nonlinear programming to estimate the parameters of the Bass forecasting model. Bass Forecasting model \u00b6 The model has three parameters that must be estimated. parameter explanation m the number of people estimated to eventually adopt the new product q the coefficient of imitation p the coefficient of innovation The coefficient of imitation (q) is a parameter that measures the likelihood of adoption due to a potential adopter being influenced by someone who has already adopted the product. It measures the \u201cword-of-mouth\u201d effect influencing purchases. The coefficient of innovation (p) measures the likelihood of adoption, assuming no influence from someone who has already purchased (adopted) the product. It is the likelihood of someone adopting the product due to her or his own interest in the innovation. If \\(C_{t\u22121}\\) is the number of people that adopted the product by time t-1, then the number of new adopters during time t is given by Bass forecasting model and it is: $$ F_t=(p+q[\\frac{C_{t\u22121}}{m}])(m\u2212C_{t\u22121}) $$ If \\(c_{t} = C_t/m\\) , then $$ c_{t} - c_{t-1} = (p+qc_{t-1})(1-c_{t-1})$$ Doing some maths, instead of one time period, we could consider \\(\\Delta t\\) time period, we can write as: \\[ c_{t+ \\Delta t} - c_{t} = (p+qc_{t})(1-c_{t}) \\Delta t \\] \\[ \\frac{c_{t+ \\Delta t} - c_{t}}{\\Delta t} = (p+qc_{t})(1-c_{t}) \\] \\[ \\frac{d}{dt}c_{t} = (p+qc_{t})(1-c_{t}) \\] Solving we get $$ c(t) = \\frac{1-e {-(p+q)t}}{1+\\frac{q}{p}e } $$ As an example, consider the following revenues for a product. import pandas as pd data = pd . DataFrame ({ 'week' : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ], 'revenues' : [ 0.1 , 3 , 5.2 , 7 , 5.25 , 4.9 , 3 , 2.4 , 1.9 , 1.3 , 0.8 , 0.6 ]}) data [ 'cum_sum' ] = data [ 'revenues' ] . cumsum () data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } week revenues cum_sum 0 1 0.10 0.10 1 2 3.00 3.10 2 3 5.20 8.30 3 4 7.00 15.30 4 5 5.25 20.55 5 6 4.90 25.45 6 7 3.00 28.45 7 8 2.40 30.85 8 9 1.90 32.75 9 10 1.30 34.05 10 11 0.80 34.85 11 12 0.60 35.45 Optimising for the ideal p, q and m values, we get from scipy.optimize import curve_fit def c_t ( x , p , q , m ): return ( p + ( q / m ) * ( x )) * ( m - x ) popt , pcov = curve_fit ( c_t , data . cum_sum [ 0 : 11 ], data . revenues [ 1 : 12 ]) popt array([ 0.11467648, 0.37950562, 35.22906717]) The optimal p,d and q are:0.11467648, 0.37950562, 35.22906717. We can use these to predict the future revenues of the product.","title":"Bass Forecasting model (Python)"},{"location":"Python/Diffusion%20on%20networks/#forecasting-adoption-of-a-new-product","text":"Harsha Achyuthuni","title":"Forecasting adoption of a new product"},{"location":"Python/Diffusion%20on%20networks/#introduction","text":"Forecasting new adoptions after a product introduction is an important marketing problem. I want to use a forecasting model developed by Frank Bass that has proven to be effective in forecasting the adoption of innovative and new technologies. I am going to use Nonlinear programming to estimate the parameters of the Bass forecasting model.","title":"Introduction"},{"location":"Python/Diffusion%20on%20networks/#bass-forecasting-model","text":"The model has three parameters that must be estimated. parameter explanation m the number of people estimated to eventually adopt the new product q the coefficient of imitation p the coefficient of innovation The coefficient of imitation (q) is a parameter that measures the likelihood of adoption due to a potential adopter being influenced by someone who has already adopted the product. It measures the \u201cword-of-mouth\u201d effect influencing purchases. The coefficient of innovation (p) measures the likelihood of adoption, assuming no influence from someone who has already purchased (adopted) the product. It is the likelihood of someone adopting the product due to her or his own interest in the innovation. If \\(C_{t\u22121}\\) is the number of people that adopted the product by time t-1, then the number of new adopters during time t is given by Bass forecasting model and it is: $$ F_t=(p+q[\\frac{C_{t\u22121}}{m}])(m\u2212C_{t\u22121}) $$ If \\(c_{t} = C_t/m\\) , then $$ c_{t} - c_{t-1} = (p+qc_{t-1})(1-c_{t-1})$$ Doing some maths, instead of one time period, we could consider \\(\\Delta t\\) time period, we can write as: \\[ c_{t+ \\Delta t} - c_{t} = (p+qc_{t})(1-c_{t}) \\Delta t \\] \\[ \\frac{c_{t+ \\Delta t} - c_{t}}{\\Delta t} = (p+qc_{t})(1-c_{t}) \\] \\[ \\frac{d}{dt}c_{t} = (p+qc_{t})(1-c_{t}) \\] Solving we get $$ c(t) = \\frac{1-e {-(p+q)t}}{1+\\frac{q}{p}e } $$ As an example, consider the following revenues for a product. import pandas as pd data = pd . DataFrame ({ 'week' : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ], 'revenues' : [ 0.1 , 3 , 5.2 , 7 , 5.25 , 4.9 , 3 , 2.4 , 1.9 , 1.3 , 0.8 , 0.6 ]}) data [ 'cum_sum' ] = data [ 'revenues' ] . cumsum () data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } week revenues cum_sum 0 1 0.10 0.10 1 2 3.00 3.10 2 3 5.20 8.30 3 4 7.00 15.30 4 5 5.25 20.55 5 6 4.90 25.45 6 7 3.00 28.45 7 8 2.40 30.85 8 9 1.90 32.75 9 10 1.30 34.05 10 11 0.80 34.85 11 12 0.60 35.45 Optimising for the ideal p, q and m values, we get from scipy.optimize import curve_fit def c_t ( x , p , q , m ): return ( p + ( q / m ) * ( x )) * ( m - x ) popt , pcov = curve_fit ( c_t , data . cum_sum [ 0 : 11 ], data . revenues [ 1 : 12 ]) popt array([ 0.11467648, 0.37950562, 35.22906717]) The optimal p,d and q are:0.11467648, 0.37950562, 35.22906717. We can use these to predict the future revenues of the product.","title":"Bass Forecasting model"},{"location":"Python/Introduction%20to%20Networkx/","text":"Networks in python \u00b6 Networks play an important role in data science, with Google (page rank), Uber (route optimisation), Amazon (supply chian optimisation) and other companies becoming technology giants using network and data related optimisations. This article is an introduction to using networks in python using networkx package. # Import networkx library and rename it as nx. import networkx as nx # Other packages required import numpy as np import pandas as pd import matplotlib.pyplot as plt Undirected graphs \u00b6 A network can be represented in many ways. Edgelist represents graphs as a list of edges. Graphs can be undirected or directed. Consider the below edgelist where there is a relation between edge 1 and edge 2, and the weight for that edge is also provided. edgelist_df = pd . DataFrame ({ 'node1' :[ 1 , 1 , 1 , 2 , 2 , 3 , 4 , 4 ], 'node2' :[ 2 , 3 , 4 , 4 , 5 , 5 , 3 , 5 ], 'weights' :[ 5 , 2 , 1 , 3 , 1 , 7 , 1 , 4 ]}) edgelist_df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } node1 node2 weights 0 1 2 5 1 1 3 2 2 1 4 1 3 2 4 3 4 2 5 1 5 3 5 7 6 4 3 1 7 4 5 4 One way to create a graph is to create an empty graph and add edges (and nodes) to the graph. g = nx . Graph () for i , elrow in edgelist_df . iterrows (): g . add_edge ( elrow [ 0 ], elrow [ 1 ], weight = elrow [ 2 ]) g . add_node ( 1 , pos = ( 0 , 5 )) g . edges ( data = True ) EdgeDataView([(1, 2, {'weight': 5}), (1, 3, {'weight': 2}), (1, 4, {'weight': 1}), (2, 4, {'weight': 3}), (2, 5, {'weight': 1}), (3, 5, {'weight': 7}), (3, 4, {'weight': 1}), (4, 5, {'weight': 4})]) # for each node we are trying to fix the coordinates g . add_node ( 1 , pos = ( 0 , 5 )) g . add_node ( 2 , pos = ( 5 , 10 )) g . add_node ( 3 , pos = ( 5 , 0 )) g . add_node ( 4 , pos = ( 10 , 5 )) g . add_node ( 5 , pos = ( 15 , 5 )) g . nodes ( data = True ) NodeDataView({1: {'pos': (0, 5)}, 2: {'pos': (5, 10)}, 3: {'pos': (5, 0)}, 4: {'pos': (10, 5)}, 5: {'pos': (15, 5)}}) This graph can be visualised as follows: # This function gets the coordinates for nodes pos = nx . get_node_attributes ( g , 'pos' ) # This function gets the weights for the edges weight = nx . get_edge_attributes ( g , 'weight' ) # The simplest way to draw a graph is by using nx.draw. nx . draw ( g , pos , with_labels = True ) # This adds edge lables nx . draw_networkx_edge_labels ( g , pos , edge_labels = weight ) plt . show () Mathematically this grah can be described in many ways. The most important are the adjacency matrix and incidence matrix. The adjacency matrix shows the relationship between the nodes in a matrix format where the nodes represent rows and columns. An edge between two nodes is represented by a positve number in the adjacency matrix, and the magnitude represents the weight. nx . linalg . graphmatrix . adj_matrix ( g ) . toarray () array([[0, 5, 2, 1, 0], [5, 0, 0, 3, 1], [2, 0, 0, 1, 7], [1, 3, 1, 0, 4], [0, 1, 7, 4, 0]], dtype=int64) The concurrency matrix represents the relationship between the nodes and edges. We have 8 edges as shown, and the relationship between the 5 nodes and 8 edges is shown below. g . edges EdgeView([(1, 2), (1, 3), (1, 4), (2, 4), (2, 5), (3, 5), (3, 4), (4, 5)]) nx . linalg . graphmatrix . incidence_matrix ( g ) . toarray () array([[1., 1., 1., 0., 0., 0., 0., 0.], [1., 0., 0., 1., 1., 0., 0., 0.], [0., 1., 0., 0., 0., 1., 1., 0.], [0., 0., 1., 1., 0., 0., 1., 1.], [0., 0., 0., 0., 1., 1., 0., 1.]]) Directed graph. \u00b6 A directed graph has edges which are in a particular direction. In this example, we are creating a DiGraph and reading a file where the edgelist is defined. An edge from a to b with a weight W exists when a line \"a b W\" can be found in the file. G1 = nx . DiGraph () # Read an directed graph from a list of edges, need to specify that using the parameter \u2018create_using\u2019 G1 = nx . read_edgelist ( \"edgelist1.txt\" , nodetype = str , create_using = nx . DiGraph (), data = [( 'weight' , int )]) print ( 'Edgelist' ) import sys nx . write_weighted_edgelist ( G1 , sys . stdout ) print ( 'nodes' ) print ( G1 . nodes ( data = True )) print ( 'edges' ) print ( G1 . edges ( data = True )) Edgelist 0 1 4 0 3 4 0 4 2 1 0 4 1 2 9 1 4 1 2 3 4 3 1 8 3 4 7 nodes [('0', {}), ('1', {}), ('2', {}), ('3', {}), ('4', {})] edges [('0', '1', {'weight': 4}), ('0', '3', {'weight': 4}), ('0', '4', {'weight': 2}), ('1', '0', {'weight': 4}), ('1', '2', {'weight': 9}), ('1', '4', {'weight': 1}), ('2', '3', {'weight': 4}), ('3', '1', {'weight': 8}), ('3', '4', {'weight': 7})] This graph can be visualised in many ways. Some of the visualisation patterns are (And these visualisations are same for directed or undirected graphs) 1. Spring layout (The length of edges is proportional to the weights) 2. Circular layout (The nodes are present in a circle) 3. Random layout All the three layouts are shown below nx . draw_spring ( G1 , with_labels = True , node_color = 'skyblue' , node_size = 200 , edge_color = 'black' ) nx . draw_circular ( G1 , with_labels = True , node_color = 'red' , node_size = 300 , edge_color = 'black' ) nx . draw_random ( G1 , with_labels = True , node_color = 'red' , node_size = 300 , edge_color = 'black' ) The concurrency matrix looks differently for directed graphs. If a edge is leaving a node it is represented by -1 and if it is incoming to a node i is +1. nx . linalg . graphmatrix . incidence_matrix ( G1 , oriented = True ) . toarray () array([[-1., -1., -1., 1., 0., 0., 0., 0., 0.], [ 1., 0., 0., -1., -1., -1., 0., 1., 0.], [ 0., 0., 0., 0., 1., 0., -1., 0., 0.], [ 0., 1., 0., 0., 0., 0., 1., -1., -1.], [ 0., 0., 1., 0., 0., 1., 0., 0., 1.]]) We can read from not just edgelists but also from adjacency matrix. For instance, we can create a new graph using the adjacency matrix from the directed graph. # Adjacencey matrix of the graph G1 M1 = nx . linalg . graphmatrix . adj_matrix ( G1 ) . toarray () print ( 'Adjacency matrix of G1' ) print ( M1 ) # convert the matrix into a graph G2 = nx . from_numpy_matrix ( M1 ) # Print the graph information print ( \"Printing G2\" ) nx . write_weighted_edgelist ( G2 , sys . stdout ) Adjacency matrix of G1 [[0 4 0 4 2] [4 0 9 0 1] [0 0 0 4 0] [0 8 0 0 7] [0 0 0 0 0]] Printing G2 0 1 4 0 3 4 0 4 2 1 2 9 1 4 1 1 3 8 2 3 4 3 4 7 Visualisation of graphs \u00b6 We can display the graphs using a variety of methods. The weights among the edges can be represented as thickness (or color) of the edges, the importance of nodes can be defined, etc. This will provide additional information of the graph. # get the outward degree for each node and store them as a list of (node_number, degree) out_deg = G1 . out_degree () # Making all the required parameters out_deg = [ int ( out_deg [ node ]) * 1000 for node in G1 . nodes ()] color = [ 'g' if val > np . mean ( out_deg ) else 'r' for val in out_deg ] weight = list ( nx . get_edge_attributes ( G1 , 'weight' ) . values ()) degree = dict ( G1 . degree ) # create the plot and title plt . subplots ( figsize = ( 10 , 10 )) plt . title ( 'Graph containing everything' ) nx . draw_circular ( G1 , with_labels = True , edge_color = color , width = weight , node_size = out_deg ) Anther different type of graph is the bipartite graph, which has a visualisation of its own. In the below example, we take an inbilt biparite graph to show how it can be visualised. B = nx . bipartite . gnmk_random_graph ( 3 , 5 , 10 , seed = 123 ) top = nx . bipartite . sets ( B )[ 0 ] pos = nx . bipartite_layout ( B , top ) nx . draw_networkx ( B , pos = nx . drawing . layout . bipartite_layout ( B , top ))","title":"Introduction to NetworkX (Python)"},{"location":"Python/Introduction%20to%20Networkx/#networks-in-python","text":"Networks play an important role in data science, with Google (page rank), Uber (route optimisation), Amazon (supply chian optimisation) and other companies becoming technology giants using network and data related optimisations. This article is an introduction to using networks in python using networkx package. # Import networkx library and rename it as nx. import networkx as nx # Other packages required import numpy as np import pandas as pd import matplotlib.pyplot as plt","title":"Networks in python"},{"location":"Python/Introduction%20to%20Networkx/#undirected-graphs","text":"A network can be represented in many ways. Edgelist represents graphs as a list of edges. Graphs can be undirected or directed. Consider the below edgelist where there is a relation between edge 1 and edge 2, and the weight for that edge is also provided. edgelist_df = pd . DataFrame ({ 'node1' :[ 1 , 1 , 1 , 2 , 2 , 3 , 4 , 4 ], 'node2' :[ 2 , 3 , 4 , 4 , 5 , 5 , 3 , 5 ], 'weights' :[ 5 , 2 , 1 , 3 , 1 , 7 , 1 , 4 ]}) edgelist_df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } node1 node2 weights 0 1 2 5 1 1 3 2 2 1 4 1 3 2 4 3 4 2 5 1 5 3 5 7 6 4 3 1 7 4 5 4 One way to create a graph is to create an empty graph and add edges (and nodes) to the graph. g = nx . Graph () for i , elrow in edgelist_df . iterrows (): g . add_edge ( elrow [ 0 ], elrow [ 1 ], weight = elrow [ 2 ]) g . add_node ( 1 , pos = ( 0 , 5 )) g . edges ( data = True ) EdgeDataView([(1, 2, {'weight': 5}), (1, 3, {'weight': 2}), (1, 4, {'weight': 1}), (2, 4, {'weight': 3}), (2, 5, {'weight': 1}), (3, 5, {'weight': 7}), (3, 4, {'weight': 1}), (4, 5, {'weight': 4})]) # for each node we are trying to fix the coordinates g . add_node ( 1 , pos = ( 0 , 5 )) g . add_node ( 2 , pos = ( 5 , 10 )) g . add_node ( 3 , pos = ( 5 , 0 )) g . add_node ( 4 , pos = ( 10 , 5 )) g . add_node ( 5 , pos = ( 15 , 5 )) g . nodes ( data = True ) NodeDataView({1: {'pos': (0, 5)}, 2: {'pos': (5, 10)}, 3: {'pos': (5, 0)}, 4: {'pos': (10, 5)}, 5: {'pos': (15, 5)}}) This graph can be visualised as follows: # This function gets the coordinates for nodes pos = nx . get_node_attributes ( g , 'pos' ) # This function gets the weights for the edges weight = nx . get_edge_attributes ( g , 'weight' ) # The simplest way to draw a graph is by using nx.draw. nx . draw ( g , pos , with_labels = True ) # This adds edge lables nx . draw_networkx_edge_labels ( g , pos , edge_labels = weight ) plt . show () Mathematically this grah can be described in many ways. The most important are the adjacency matrix and incidence matrix. The adjacency matrix shows the relationship between the nodes in a matrix format where the nodes represent rows and columns. An edge between two nodes is represented by a positve number in the adjacency matrix, and the magnitude represents the weight. nx . linalg . graphmatrix . adj_matrix ( g ) . toarray () array([[0, 5, 2, 1, 0], [5, 0, 0, 3, 1], [2, 0, 0, 1, 7], [1, 3, 1, 0, 4], [0, 1, 7, 4, 0]], dtype=int64) The concurrency matrix represents the relationship between the nodes and edges. We have 8 edges as shown, and the relationship between the 5 nodes and 8 edges is shown below. g . edges EdgeView([(1, 2), (1, 3), (1, 4), (2, 4), (2, 5), (3, 5), (3, 4), (4, 5)]) nx . linalg . graphmatrix . incidence_matrix ( g ) . toarray () array([[1., 1., 1., 0., 0., 0., 0., 0.], [1., 0., 0., 1., 1., 0., 0., 0.], [0., 1., 0., 0., 0., 1., 1., 0.], [0., 0., 1., 1., 0., 0., 1., 1.], [0., 0., 0., 0., 1., 1., 0., 1.]])","title":"Undirected graphs"},{"location":"Python/Introduction%20to%20Networkx/#directed-graph","text":"A directed graph has edges which are in a particular direction. In this example, we are creating a DiGraph and reading a file where the edgelist is defined. An edge from a to b with a weight W exists when a line \"a b W\" can be found in the file. G1 = nx . DiGraph () # Read an directed graph from a list of edges, need to specify that using the parameter \u2018create_using\u2019 G1 = nx . read_edgelist ( \"edgelist1.txt\" , nodetype = str , create_using = nx . DiGraph (), data = [( 'weight' , int )]) print ( 'Edgelist' ) import sys nx . write_weighted_edgelist ( G1 , sys . stdout ) print ( 'nodes' ) print ( G1 . nodes ( data = True )) print ( 'edges' ) print ( G1 . edges ( data = True )) Edgelist 0 1 4 0 3 4 0 4 2 1 0 4 1 2 9 1 4 1 2 3 4 3 1 8 3 4 7 nodes [('0', {}), ('1', {}), ('2', {}), ('3', {}), ('4', {})] edges [('0', '1', {'weight': 4}), ('0', '3', {'weight': 4}), ('0', '4', {'weight': 2}), ('1', '0', {'weight': 4}), ('1', '2', {'weight': 9}), ('1', '4', {'weight': 1}), ('2', '3', {'weight': 4}), ('3', '1', {'weight': 8}), ('3', '4', {'weight': 7})] This graph can be visualised in many ways. Some of the visualisation patterns are (And these visualisations are same for directed or undirected graphs) 1. Spring layout (The length of edges is proportional to the weights) 2. Circular layout (The nodes are present in a circle) 3. Random layout All the three layouts are shown below nx . draw_spring ( G1 , with_labels = True , node_color = 'skyblue' , node_size = 200 , edge_color = 'black' ) nx . draw_circular ( G1 , with_labels = True , node_color = 'red' , node_size = 300 , edge_color = 'black' ) nx . draw_random ( G1 , with_labels = True , node_color = 'red' , node_size = 300 , edge_color = 'black' ) The concurrency matrix looks differently for directed graphs. If a edge is leaving a node it is represented by -1 and if it is incoming to a node i is +1. nx . linalg . graphmatrix . incidence_matrix ( G1 , oriented = True ) . toarray () array([[-1., -1., -1., 1., 0., 0., 0., 0., 0.], [ 1., 0., 0., -1., -1., -1., 0., 1., 0.], [ 0., 0., 0., 0., 1., 0., -1., 0., 0.], [ 0., 1., 0., 0., 0., 0., 1., -1., -1.], [ 0., 0., 1., 0., 0., 1., 0., 0., 1.]]) We can read from not just edgelists but also from adjacency matrix. For instance, we can create a new graph using the adjacency matrix from the directed graph. # Adjacencey matrix of the graph G1 M1 = nx . linalg . graphmatrix . adj_matrix ( G1 ) . toarray () print ( 'Adjacency matrix of G1' ) print ( M1 ) # convert the matrix into a graph G2 = nx . from_numpy_matrix ( M1 ) # Print the graph information print ( \"Printing G2\" ) nx . write_weighted_edgelist ( G2 , sys . stdout ) Adjacency matrix of G1 [[0 4 0 4 2] [4 0 9 0 1] [0 0 0 4 0] [0 8 0 0 7] [0 0 0 0 0]] Printing G2 0 1 4 0 3 4 0 4 2 1 2 9 1 4 1 1 3 8 2 3 4 3 4 7","title":"Directed graph."},{"location":"Python/Introduction%20to%20Networkx/#visualisation-of-graphs","text":"We can display the graphs using a variety of methods. The weights among the edges can be represented as thickness (or color) of the edges, the importance of nodes can be defined, etc. This will provide additional information of the graph. # get the outward degree for each node and store them as a list of (node_number, degree) out_deg = G1 . out_degree () # Making all the required parameters out_deg = [ int ( out_deg [ node ]) * 1000 for node in G1 . nodes ()] color = [ 'g' if val > np . mean ( out_deg ) else 'r' for val in out_deg ] weight = list ( nx . get_edge_attributes ( G1 , 'weight' ) . values ()) degree = dict ( G1 . degree ) # create the plot and title plt . subplots ( figsize = ( 10 , 10 )) plt . title ( 'Graph containing everything' ) nx . draw_circular ( G1 , with_labels = True , edge_color = color , width = weight , node_size = out_deg ) Anther different type of graph is the bipartite graph, which has a visualisation of its own. In the below example, we take an inbilt biparite graph to show how it can be visualised. B = nx . bipartite . gnmk_random_graph ( 3 , 5 , 10 , seed = 123 ) top = nx . bipartite . sets ( B )[ 0 ] pos = nx . bipartite_layout ( B , top ) nx . draw_networkx ( B , pos = nx . drawing . layout . bipartite_layout ( B , top ))","title":"Visualisation of graphs"},{"location":"Python/Network%20Flow%20problems/","text":"MathJax.Hub.Config({ extensions: [\"tex2jax.js\",\"TeX/AMSmath.js\",\"TeX/AMSsymbols.js\"], jax: [\"input/TeX\", \"output/HTML-CSS\"], tex2jax: { inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ], displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"] ], }, \"HTML-CSS\": { availableFonts: [\"TeX\"] } }); Flow maximisation problems \u00b6 A directed graph has the capacities on all the edges and our job is to find the maximum amount of flow that can happen from one node (starting node) to another node(outflow node). There are two types of flow maximisation problems: 1. Max flow: What is the maximum flow that can be sent from source to outfow without exceeding capacity. 2. Min cost flow: We have the cost along wih capacities on each edge. We want to find the minimum cost path of sending f uits of flow from source to outflow. We can use integer programming to solve both these problems. import networkx as nx # Other packages for manupulating data import numpy as np import pandas as pd # packages for plotting import matplotlib.pyplot as plt Maximum flow problem \u00b6 Let us first consider the max flow problem. Consider the below graph. edgelist_df = pd . DataFrame ({ 'node1' :[ 's' , 's' , 'u' , 'u' , 'v' ], 'node2' :[ 'u' , 'v' , 'v' , 't' , 't' ], 'weights' :[ 20 , 10 , 30 , 10 , 20 ] }) edgelist_df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } node1 node2 weights 0 s u 20 1 s v 10 2 u v 30 3 u t 10 4 v t 20 g = nx . DiGraph () for i , elrow in edgelist_df . iterrows (): g . add_edge ( elrow [ 0 ], elrow [ 1 ], weight = elrow [ 2 ]) g . edges ( data = True ) OutEdgeDataView([('s', 'u', {'weight': 20}), ('s', 'v', {'weight': 10}), ('u', 'v', {'weight': 30}), ('u', 't', {'weight': 10}), ('v', 't', {'weight': 20})]) # for each node we are trying to fix the coordinates g . add_node ( 's' , pos = ( 0 , 1 )) g . add_node ( 'u' , pos = ( 1 , 2 )) g . add_node ( 'v' , pos = ( 1 , 0 )) g . add_node ( 't' , pos = ( 2 , 1 )) g . nodes ( data = True ) NodeDataView({'s': {'pos': (0, 1)}, 'u': {'pos': (1, 2)}, 'v': {'pos': (1, 0)}, 't': {'pos': (2, 1)}}) pos = nx . get_node_attributes ( g , 'pos' ) weight = nx . get_edge_attributes ( g , 'weight' ) nx . draw ( g , pos , with_labels = True ) nx . draw_networkx_edge_labels ( g , pos , edge_labels = weight ) plt . show () We want to find the maximum flow between s and t. This can be formulated as an integer programming problem, with Decision variable 1. Integer variable \\(edge_{i,j}\\) representing the amount of flow in edge ij. 2. Integer variable f representing the maximum flow from ortools.sat.python import cp_model max_flow_model = cp_model . CpModel () # Creating one integer decision variable for each edge edge_int_vars = {} for edge in g . edges : edge_int_vars [ edge [ 0 ], edge [ 1 ]] = max_flow_model . NewIntVar ( 0 , 100 , 'edge_ %s _ %s ' % edge ) print ( 'Creating the integer variable ' , edge_int_vars [ edge [ 0 ], edge [ 1 ]], 'representing the amount to flow in edge' , ( edge [ 0 ], edge [ 1 ])) Creating the integer variable edge_s_u representing the amount to flow in edge ('s', 'u') Creating the integer variable edge_s_v representing the amount to flow in edge ('s', 'v') Creating the integer variable edge_u_v representing the amount to flow in edge ('u', 'v') Creating the integer variable edge_u_t representing the amount to flow in edge ('u', 't') Creating the integer variable edge_v_t representing the amount to flow in edge ('v', 't') Constraints The first set of constraints are flow constraints, 1. At the input node, the net flow should be -f 2. At the output node, the net flow should be +f 3. The net flow in all other nodes should be 0 input_node = 's' output_node = 't' # Adding constraints on the nodes flow = max_flow_model . NewIntVar ( 0 , 100 , 'flow' ) # Initialising flow this will be maximised later for node in g . nodes : in_edges = g . in_edges ( node ) out_edges = g . out_edges ( node ) print ( 'Adding the constraint on node ' , node ) equation_at_this_edge = sum ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] for edge in in_edges ) - \\ sum ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] for edge in out_edges ) if ( node == input_node ): max_flow_model . Add ( equation_at_this_edge == - flow ) print ( equation_at_this_edge == - flow ) elif ( node == output_node ): max_flow_model . Add ( equation_at_this_edge == flow ) print ( equation_at_this_edge == flow ) else : max_flow_model . Add ( equation_at_this_edge == 0 ) print ( equation_at_this_edge , '== 0' ) print ( '' ) Adding the constraint on node s ((-((edge_s_u) + edge_s_v)) + (1 * flow)) == 0 Adding the constraint on node u ((edge_s_u) + -((edge_u_v) + edge_u_t)) == 0 Adding the constraint on node v (((edge_s_v) + edge_u_v) + -(edge_v_t)) == 0 Adding the constraint on node t ((((edge_u_t) + edge_v_t)) + -flow) == 0 Another set of constraints are the capacity restrictions on every edge. # Adding constraints on the edges for edge in g . edges : print ( 'Adding constraint on edge ' , edge ) max_flow_in_edge = g . get_edge_data ( * edge )[ 'weight' ] max_flow_model . Add ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] <= max_flow_in_edge ) print ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] <= max_flow_in_edge ) Adding constraint on edge ('s', 'u') edge_s_u <= 20 Adding constraint on edge ('s', 'v') edge_s_v <= 10 Adding constraint on edge ('u', 'v') edge_u_v <= 30 Adding constraint on edge ('u', 't') edge_u_t <= 10 Adding constraint on edge ('v', 't') edge_v_t <= 20 Objective The objective is to maximise flow. # The objective is to maximise flow max_flow_model . Maximize ( flow ) Solving the problem, we get # Solving the problem solver = cp_model . CpSolver () solution_printer = cp_model . ObjectiveSolutionPrinter () status = solver . SolveWithSolutionCallback ( max_flow_model , solution_printer ) Solution 0, time = 0.44 s, objective = 30 cp_model . OPTIMAL == status True result_edges = {} for edge in g . edges : result_edges [ edge [ 0 ], edge [ 1 ]] = solver . Value ( edge_int_vars [ edge [ 0 ], edge [ 1 ]]) result_edges {('s', 'u'): 20, ('s', 'v'): 10, ('u', 'v'): 10, ('u', 't'): 10, ('v', 't'): 20} The flow in each of the nodes is shown in the figure pos = nx . get_node_attributes ( g , 'pos' ) nx . draw ( g , pos , with_labels = True ) nx . draw_networkx_edge_labels ( g , pos , edge_labels = result_edges ) plt . show () Minimum cost flow problems \u00b6 We want to find the minimum cost to transfer a fixed amount of flow from one edge to another. The costs are given int he table bwlow. The costs are also displayed in the network below. edgelist_df = pd . DataFrame ({ 'node1' :[ 's' , 's' , 'u' , 'u' , 'v' ], 'node2' :[ 'u' , 'v' , 'v' , 't' , 't' ], 'weights' :[ 20 , 10 , 30 , 10 , 20 ], 'costs' :[ 3 , 2 , 0.7 , 1 , 7 ] }) edgelist_df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } node1 node2 weights costs 0 s u 20 3.0 1 s v 10 2.0 2 u v 30 0.7 3 u t 10 1.0 4 v t 20 7.0 g = nx . DiGraph () for i , elrow in edgelist_df . iterrows (): g . add_edge ( elrow [ 0 ], elrow [ 1 ], weight = elrow [ 2 ], cost = elrow [ 3 ]) g . edges ( data = True ) OutEdgeDataView([('s', 'u', {'weight': 20, 'cost': 3.0}), ('s', 'v', {'weight': 10, 'cost': 2.0}), ('u', 'v', {'weight': 30, 'cost': 0.7}), ('u', 't', {'weight': 10, 'cost': 1.0}), ('v', 't', {'weight': 20, 'cost': 7.0})]) # for each node we are trying to fix the coordinates g . add_node ( 's' , pos = ( 0 , 1 )) g . add_node ( 'u' , pos = ( 1 , 2 )) g . add_node ( 'v' , pos = ( 1 , 0 )) g . add_node ( 't' , pos = ( 2 , 1 )) g . nodes ( data = True ) NodeDataView({'s': {'pos': (0, 1)}, 'u': {'pos': (1, 2)}, 'v': {'pos': (1, 0)}, 't': {'pos': (2, 1)}}) pos = nx . get_node_attributes ( g , 'pos' ) weight = nx . get_edge_attributes ( g , 'weight' ) cost = nx . get_edge_attributes ( g , 'cost' ) res = { key : str ( weight [ key ]) + '/$' + str ( cost . get ( key , '' )) for key in cost . keys ()} nx . draw ( g , pos , with_labels = True ) nx . draw_networkx_edge_labels ( g , pos , edge_labels = res ) plt . show () Just like maximum flow, we can use integer programming to find out the solution in this scenario also. Decision variables Integer variables \\(edge_{i,j}\\) representing the amount of flow in edge (i,j) Constraints Capacity restrictions on every edge Objective The objective is to minimise the overall cost from ortools.sat.python import cp_model min_cost_flow_model = cp_model . CpModel () # Creating one integer decision variable for each edge edge_int_vars = {} for edge in g . edges : edge_int_vars [ edge [ 0 ], edge [ 1 ]] = min_cost_flow_model . NewIntVar ( 0 , 100 , 'edge_ %s _ %s ' % edge ) print ( 'Creating the integer variable ' , edge_int_vars [ edge [ 0 ], edge [ 1 ]], 'representing the amount to flow in edge' , ( edge [ 0 ], edge [ 1 ])) Creating the integer variable edge_s_u representing the amount to flow in edge ('s', 'u') Creating the integer variable edge_s_v representing the amount to flow in edge ('s', 'v') Creating the integer variable edge_u_v representing the amount to flow in edge ('u', 'v') Creating the integer variable edge_u_t representing the amount to flow in edge ('u', 't') Creating the integer variable edge_v_t representing the amount to flow in edge ('v', 't') input_node = 's' output_node = 't' flow = 20 # Assuming a constant flow of 20 units # Adding constraints on the nodes for node in g . nodes : in_edges = g . in_edges ( node ) out_edges = g . out_edges ( node ) print ( 'Adding the constraint on node ' , node ) print ( 'This node has %i in-edges and %i out-edges' % ( len ( in_edges ), len ( out_edges ))) equation_at_this_edge = sum ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] for edge in in_edges ) - \\ sum ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] for edge in out_edges ) if ( node == input_node ): min_cost_flow_model . Add ( equation_at_this_edge == - flow ) print ( equation_at_this_edge == - flow ) elif ( node == output_node ): min_cost_flow_model . Add ( equation_at_this_edge == flow ) print ( equation_at_this_edge == flow ) else : min_cost_flow_model . Add ( equation_at_this_edge == 0 ) print ( equation_at_this_edge , '== 0' ) print ( '' ) Adding the constraint on node s This node has 0 in-edges and 2 out-edges (-((edge_s_u) + edge_s_v)) == -20 Adding the constraint on node u This node has 1 in-edges and 2 out-edges ((edge_s_u) + -((edge_u_v) + edge_u_t)) == 0 Adding the constraint on node v This node has 2 in-edges and 1 out-edges (((edge_s_v) + edge_u_v) + -(edge_v_t)) == 0 Adding the constraint on node t This node has 2 in-edges and 0 out-edges (((edge_u_t) + edge_v_t)) == 20 # Adding constraints on the edges for edge in g . edges : print ( 'Adding constraint on edge ' , edge ) max_flow_in_edge = g . get_edge_data ( * edge )[ 'weight' ] min_cost_flow_model . Add ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] <= max_flow_in_edge ) print ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] <= max_flow_in_edge ) Adding constraint on edge ('s', 'u') edge_s_u <= 20 Adding constraint on edge ('s', 'v') edge_s_v <= 10 Adding constraint on edge ('u', 'v') edge_u_v <= 30 Adding constraint on edge ('u', 't') edge_u_t <= 10 Adding constraint on edge ('v', 't') edge_v_t <= 20 # factor to make everything including costs integer factor_to_int = 10 # The objective is to maximise flow total_cost = sum ( int ( g . get_edge_data ( * edge )[ 'cost' ] * factor_to_int ) * edge_int_vars [ edge [ 0 ], edge [ 1 ]] for edge in g . edges ) print ( 'Objective is to optimise cost' ) print ( total_cost ) min_cost_flow_model . Minimize ( total_cost ) Objective is to optimise cost ((((((30 * edge_s_u)) + (20 * edge_s_v)) + (7 * edge_u_v)) + (10 * edge_u_t)) + (70 * edge_v_t)) # Solving the problem solver = cp_model . CpSolver () solution_printer = cp_model . ObjectiveSolutionPrinter () status = solver . SolveWithSolutionCallback ( min_cost_flow_model , solution_printer ) Solution 0, time = 0.24 s, objective = 1300 cp_model . OPTIMAL == status True The solution to the minimum flow problem is result_edges = {} for edge in g . edges : result_edges [ edge [ 0 ], edge [ 1 ]] = solver . Value ( edge_int_vars [ edge [ 0 ], edge [ 1 ]]) result_edges {('s', 'u'): 10, ('s', 'v'): 10, ('u', 'v'): 0, ('u', 't'): 10, ('v', 't'): 10} # This function gets the coordinates for nodes pos = nx . get_node_attributes ( g , 'pos' ) # The simplest way to draw a graph is by using nx.draw. nx . draw ( g , pos , with_labels = True ) # This adds edge lables nx . draw_networkx_edge_labels ( g , pos , edge_labels = result_edges ) plt . show ()","title":"Network flow problems (Python)"},{"location":"Python/Network%20Flow%20problems/#flow-maximisation-problems","text":"A directed graph has the capacities on all the edges and our job is to find the maximum amount of flow that can happen from one node (starting node) to another node(outflow node). There are two types of flow maximisation problems: 1. Max flow: What is the maximum flow that can be sent from source to outfow without exceeding capacity. 2. Min cost flow: We have the cost along wih capacities on each edge. We want to find the minimum cost path of sending f uits of flow from source to outflow. We can use integer programming to solve both these problems. import networkx as nx # Other packages for manupulating data import numpy as np import pandas as pd # packages for plotting import matplotlib.pyplot as plt","title":"Flow maximisation problems"},{"location":"Python/Network%20Flow%20problems/#maximum-flow-problem","text":"Let us first consider the max flow problem. Consider the below graph. edgelist_df = pd . DataFrame ({ 'node1' :[ 's' , 's' , 'u' , 'u' , 'v' ], 'node2' :[ 'u' , 'v' , 'v' , 't' , 't' ], 'weights' :[ 20 , 10 , 30 , 10 , 20 ] }) edgelist_df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } node1 node2 weights 0 s u 20 1 s v 10 2 u v 30 3 u t 10 4 v t 20 g = nx . DiGraph () for i , elrow in edgelist_df . iterrows (): g . add_edge ( elrow [ 0 ], elrow [ 1 ], weight = elrow [ 2 ]) g . edges ( data = True ) OutEdgeDataView([('s', 'u', {'weight': 20}), ('s', 'v', {'weight': 10}), ('u', 'v', {'weight': 30}), ('u', 't', {'weight': 10}), ('v', 't', {'weight': 20})]) # for each node we are trying to fix the coordinates g . add_node ( 's' , pos = ( 0 , 1 )) g . add_node ( 'u' , pos = ( 1 , 2 )) g . add_node ( 'v' , pos = ( 1 , 0 )) g . add_node ( 't' , pos = ( 2 , 1 )) g . nodes ( data = True ) NodeDataView({'s': {'pos': (0, 1)}, 'u': {'pos': (1, 2)}, 'v': {'pos': (1, 0)}, 't': {'pos': (2, 1)}}) pos = nx . get_node_attributes ( g , 'pos' ) weight = nx . get_edge_attributes ( g , 'weight' ) nx . draw ( g , pos , with_labels = True ) nx . draw_networkx_edge_labels ( g , pos , edge_labels = weight ) plt . show () We want to find the maximum flow between s and t. This can be formulated as an integer programming problem, with Decision variable 1. Integer variable \\(edge_{i,j}\\) representing the amount of flow in edge ij. 2. Integer variable f representing the maximum flow from ortools.sat.python import cp_model max_flow_model = cp_model . CpModel () # Creating one integer decision variable for each edge edge_int_vars = {} for edge in g . edges : edge_int_vars [ edge [ 0 ], edge [ 1 ]] = max_flow_model . NewIntVar ( 0 , 100 , 'edge_ %s _ %s ' % edge ) print ( 'Creating the integer variable ' , edge_int_vars [ edge [ 0 ], edge [ 1 ]], 'representing the amount to flow in edge' , ( edge [ 0 ], edge [ 1 ])) Creating the integer variable edge_s_u representing the amount to flow in edge ('s', 'u') Creating the integer variable edge_s_v representing the amount to flow in edge ('s', 'v') Creating the integer variable edge_u_v representing the amount to flow in edge ('u', 'v') Creating the integer variable edge_u_t representing the amount to flow in edge ('u', 't') Creating the integer variable edge_v_t representing the amount to flow in edge ('v', 't') Constraints The first set of constraints are flow constraints, 1. At the input node, the net flow should be -f 2. At the output node, the net flow should be +f 3. The net flow in all other nodes should be 0 input_node = 's' output_node = 't' # Adding constraints on the nodes flow = max_flow_model . NewIntVar ( 0 , 100 , 'flow' ) # Initialising flow this will be maximised later for node in g . nodes : in_edges = g . in_edges ( node ) out_edges = g . out_edges ( node ) print ( 'Adding the constraint on node ' , node ) equation_at_this_edge = sum ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] for edge in in_edges ) - \\ sum ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] for edge in out_edges ) if ( node == input_node ): max_flow_model . Add ( equation_at_this_edge == - flow ) print ( equation_at_this_edge == - flow ) elif ( node == output_node ): max_flow_model . Add ( equation_at_this_edge == flow ) print ( equation_at_this_edge == flow ) else : max_flow_model . Add ( equation_at_this_edge == 0 ) print ( equation_at_this_edge , '== 0' ) print ( '' ) Adding the constraint on node s ((-((edge_s_u) + edge_s_v)) + (1 * flow)) == 0 Adding the constraint on node u ((edge_s_u) + -((edge_u_v) + edge_u_t)) == 0 Adding the constraint on node v (((edge_s_v) + edge_u_v) + -(edge_v_t)) == 0 Adding the constraint on node t ((((edge_u_t) + edge_v_t)) + -flow) == 0 Another set of constraints are the capacity restrictions on every edge. # Adding constraints on the edges for edge in g . edges : print ( 'Adding constraint on edge ' , edge ) max_flow_in_edge = g . get_edge_data ( * edge )[ 'weight' ] max_flow_model . Add ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] <= max_flow_in_edge ) print ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] <= max_flow_in_edge ) Adding constraint on edge ('s', 'u') edge_s_u <= 20 Adding constraint on edge ('s', 'v') edge_s_v <= 10 Adding constraint on edge ('u', 'v') edge_u_v <= 30 Adding constraint on edge ('u', 't') edge_u_t <= 10 Adding constraint on edge ('v', 't') edge_v_t <= 20 Objective The objective is to maximise flow. # The objective is to maximise flow max_flow_model . Maximize ( flow ) Solving the problem, we get # Solving the problem solver = cp_model . CpSolver () solution_printer = cp_model . ObjectiveSolutionPrinter () status = solver . SolveWithSolutionCallback ( max_flow_model , solution_printer ) Solution 0, time = 0.44 s, objective = 30 cp_model . OPTIMAL == status True result_edges = {} for edge in g . edges : result_edges [ edge [ 0 ], edge [ 1 ]] = solver . Value ( edge_int_vars [ edge [ 0 ], edge [ 1 ]]) result_edges {('s', 'u'): 20, ('s', 'v'): 10, ('u', 'v'): 10, ('u', 't'): 10, ('v', 't'): 20} The flow in each of the nodes is shown in the figure pos = nx . get_node_attributes ( g , 'pos' ) nx . draw ( g , pos , with_labels = True ) nx . draw_networkx_edge_labels ( g , pos , edge_labels = result_edges ) plt . show ()","title":"Maximum flow problem"},{"location":"Python/Network%20Flow%20problems/#minimum-cost-flow-problems","text":"We want to find the minimum cost to transfer a fixed amount of flow from one edge to another. The costs are given int he table bwlow. The costs are also displayed in the network below. edgelist_df = pd . DataFrame ({ 'node1' :[ 's' , 's' , 'u' , 'u' , 'v' ], 'node2' :[ 'u' , 'v' , 'v' , 't' , 't' ], 'weights' :[ 20 , 10 , 30 , 10 , 20 ], 'costs' :[ 3 , 2 , 0.7 , 1 , 7 ] }) edgelist_df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } node1 node2 weights costs 0 s u 20 3.0 1 s v 10 2.0 2 u v 30 0.7 3 u t 10 1.0 4 v t 20 7.0 g = nx . DiGraph () for i , elrow in edgelist_df . iterrows (): g . add_edge ( elrow [ 0 ], elrow [ 1 ], weight = elrow [ 2 ], cost = elrow [ 3 ]) g . edges ( data = True ) OutEdgeDataView([('s', 'u', {'weight': 20, 'cost': 3.0}), ('s', 'v', {'weight': 10, 'cost': 2.0}), ('u', 'v', {'weight': 30, 'cost': 0.7}), ('u', 't', {'weight': 10, 'cost': 1.0}), ('v', 't', {'weight': 20, 'cost': 7.0})]) # for each node we are trying to fix the coordinates g . add_node ( 's' , pos = ( 0 , 1 )) g . add_node ( 'u' , pos = ( 1 , 2 )) g . add_node ( 'v' , pos = ( 1 , 0 )) g . add_node ( 't' , pos = ( 2 , 1 )) g . nodes ( data = True ) NodeDataView({'s': {'pos': (0, 1)}, 'u': {'pos': (1, 2)}, 'v': {'pos': (1, 0)}, 't': {'pos': (2, 1)}}) pos = nx . get_node_attributes ( g , 'pos' ) weight = nx . get_edge_attributes ( g , 'weight' ) cost = nx . get_edge_attributes ( g , 'cost' ) res = { key : str ( weight [ key ]) + '/$' + str ( cost . get ( key , '' )) for key in cost . keys ()} nx . draw ( g , pos , with_labels = True ) nx . draw_networkx_edge_labels ( g , pos , edge_labels = res ) plt . show () Just like maximum flow, we can use integer programming to find out the solution in this scenario also. Decision variables Integer variables \\(edge_{i,j}\\) representing the amount of flow in edge (i,j) Constraints Capacity restrictions on every edge Objective The objective is to minimise the overall cost from ortools.sat.python import cp_model min_cost_flow_model = cp_model . CpModel () # Creating one integer decision variable for each edge edge_int_vars = {} for edge in g . edges : edge_int_vars [ edge [ 0 ], edge [ 1 ]] = min_cost_flow_model . NewIntVar ( 0 , 100 , 'edge_ %s _ %s ' % edge ) print ( 'Creating the integer variable ' , edge_int_vars [ edge [ 0 ], edge [ 1 ]], 'representing the amount to flow in edge' , ( edge [ 0 ], edge [ 1 ])) Creating the integer variable edge_s_u representing the amount to flow in edge ('s', 'u') Creating the integer variable edge_s_v representing the amount to flow in edge ('s', 'v') Creating the integer variable edge_u_v representing the amount to flow in edge ('u', 'v') Creating the integer variable edge_u_t representing the amount to flow in edge ('u', 't') Creating the integer variable edge_v_t representing the amount to flow in edge ('v', 't') input_node = 's' output_node = 't' flow = 20 # Assuming a constant flow of 20 units # Adding constraints on the nodes for node in g . nodes : in_edges = g . in_edges ( node ) out_edges = g . out_edges ( node ) print ( 'Adding the constraint on node ' , node ) print ( 'This node has %i in-edges and %i out-edges' % ( len ( in_edges ), len ( out_edges ))) equation_at_this_edge = sum ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] for edge in in_edges ) - \\ sum ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] for edge in out_edges ) if ( node == input_node ): min_cost_flow_model . Add ( equation_at_this_edge == - flow ) print ( equation_at_this_edge == - flow ) elif ( node == output_node ): min_cost_flow_model . Add ( equation_at_this_edge == flow ) print ( equation_at_this_edge == flow ) else : min_cost_flow_model . Add ( equation_at_this_edge == 0 ) print ( equation_at_this_edge , '== 0' ) print ( '' ) Adding the constraint on node s This node has 0 in-edges and 2 out-edges (-((edge_s_u) + edge_s_v)) == -20 Adding the constraint on node u This node has 1 in-edges and 2 out-edges ((edge_s_u) + -((edge_u_v) + edge_u_t)) == 0 Adding the constraint on node v This node has 2 in-edges and 1 out-edges (((edge_s_v) + edge_u_v) + -(edge_v_t)) == 0 Adding the constraint on node t This node has 2 in-edges and 0 out-edges (((edge_u_t) + edge_v_t)) == 20 # Adding constraints on the edges for edge in g . edges : print ( 'Adding constraint on edge ' , edge ) max_flow_in_edge = g . get_edge_data ( * edge )[ 'weight' ] min_cost_flow_model . Add ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] <= max_flow_in_edge ) print ( edge_int_vars [ edge [ 0 ], edge [ 1 ]] <= max_flow_in_edge ) Adding constraint on edge ('s', 'u') edge_s_u <= 20 Adding constraint on edge ('s', 'v') edge_s_v <= 10 Adding constraint on edge ('u', 'v') edge_u_v <= 30 Adding constraint on edge ('u', 't') edge_u_t <= 10 Adding constraint on edge ('v', 't') edge_v_t <= 20 # factor to make everything including costs integer factor_to_int = 10 # The objective is to maximise flow total_cost = sum ( int ( g . get_edge_data ( * edge )[ 'cost' ] * factor_to_int ) * edge_int_vars [ edge [ 0 ], edge [ 1 ]] for edge in g . edges ) print ( 'Objective is to optimise cost' ) print ( total_cost ) min_cost_flow_model . Minimize ( total_cost ) Objective is to optimise cost ((((((30 * edge_s_u)) + (20 * edge_s_v)) + (7 * edge_u_v)) + (10 * edge_u_t)) + (70 * edge_v_t)) # Solving the problem solver = cp_model . CpSolver () solution_printer = cp_model . ObjectiveSolutionPrinter () status = solver . SolveWithSolutionCallback ( min_cost_flow_model , solution_printer ) Solution 0, time = 0.24 s, objective = 1300 cp_model . OPTIMAL == status True The solution to the minimum flow problem is result_edges = {} for edge in g . edges : result_edges [ edge [ 0 ], edge [ 1 ]] = solver . Value ( edge_int_vars [ edge [ 0 ], edge [ 1 ]]) result_edges {('s', 'u'): 10, ('s', 'v'): 10, ('u', 'v'): 0, ('u', 't'): 10, ('v', 't'): 10} # This function gets the coordinates for nodes pos = nx . get_node_attributes ( g , 'pos' ) # The simplest way to draw a graph is by using nx.draw. nx . draw ( g , pos , with_labels = True ) # This adds edge lables nx . draw_networkx_edge_labels ( g , pos , edge_labels = result_edges ) plt . show ()","title":"Minimum cost flow problems"},{"location":"Python/Network%20Science/","text":"Network Science We live in a highly connected world where social networks significantly affect our lives, from getting jobs, connecting with friends, and dating and news. Network science is the study of such complex networks. There is some common phenomenon that applies to social networks: How do networks evolve \u00b6 A social network is constantly evolving; people make new friends and lose touch with other friends. Many external factors in life, like marriage, new college, school, workplace or club, can spark the creation of new friends. This phenomenon is observed in vast networks such as the internet. Is there any model that can explain the growth of networks? If so, we can simulate new networks, identify what parameters influence the growth of new networks etc. Power law explains some real-world examples of the growth and scale of networks. Small World Phenomena \u00b6 Small world phenomenon states that everyone in the world can be reached thru a short chain of acquaintances. This was first demonstrated in the Milgram experiment where random people were asked to send a letter to a stockbroker in Boston by passing it through people they know. Of the letters received, they went thru an average of 6 people. Facebook repeated this on a large scale later, which validated this with a lower number of connections. This indicates that most people are connected to every other random person on earth within six common friends. Homophily \u00b6 This can be described as \"Birds of a feather flock together\". We tend to be friends with friends who are similar to us, especially people from the same socio-economic background, social background, etc. Strength of weak ties \u00b6 If two people in a social network have a friend in common, then there is an increased likelihood that they will become friends at some point in the future. This also depends on the strength of the friendship(ties). Generally, people in the same network will have the same kind of information. Take an example of jobs; everyone in the same friend circle will have the same information about open positions for jobs. It is the weak ties, friends whom we have not interacted with within some time, who have new information which will help most people to find jobs. This is called as the strength of weak ties. Let us look at a small network of friends in Zachary karate club . Zachary's karate club is a university-based karate club consisting of a social network of 34 members. W.W. Zachary famously observed the karate club for three years (from 1970 to 1972), documenting links between pairs of members who interacted outside the everyday activities of the club. The nodes in the graph represent people, and the edges represent friendships (interactions) between them. import matplotlib.pyplot as plt % matplotlib inline import networkx as nx G = nx . karate_club_graph () nx . draw_kamada_kawai ( G , with_labels = True ) We can understand the network using some statistics about the network. Network Statistics \u00b6 Degree Distribution \u00b6 The degree of a node is the number of nodes a particular node is connected to. For example, node 11 has one degree in the karate club network as it is connected to one node only(node 0). The degree distribution is the relative frequencies of the nodes that have particular degrees. There are two types of degree distributions generally, Poisson and scale-free. For the karate club network, the degree distribution is: degree_dist = nx . degree_histogram ( G ) plt . bar ( range ( len ( degree_dist )), degree_dist ) plt . ylabel ( 'No of people' ) plt . xlabel ( 'No of friends' ); This indicates that most people have 2-5 friends while a few people are connected to >15 people in the network. Clustering coefficient \u00b6 Another statistic that we can understand is the clustering coefficient. This is the degree to which nodes cluster together. If A is friends with B and C, then B and c have a high probability of being friends if they belong to the same cluster. the clustering coefficient captures the fraction of triads (connected A, B and C) in the network. The clustering coefficient of all the nodes is calculated. The clustering coefficient of a node is the percentage of triangles that are there among the nodes that it is connected to. For example, node 11 is connected to node 6 and 5, both of which are connected. So the percentage of triads is 100%. Node 4 is connected to 0, 6 and 10. 0-6-4 and 0-10-0 make a triad, but 0-10-4 does not exist. Therefore the percentage is 66.6%. The clustering coefficient of the network is the average of the clustering coefficient across all the nodes, and it is 57% for the karate club. nx . clustering ( G ) {0: 0.15, 1: 0.3333333333333333, 2: 0.24444444444444444, 3: 0.6666666666666666, 4: 0.6666666666666666, 5: 0.5, 6: 0.5, 7: 1.0, 8: 0.5, 9: 0, 10: 0.6666666666666666, 11: 0, 12: 1.0, 13: 0.6, 14: 1.0, 15: 1.0, 16: 1.0, 17: 1.0, 18: 1.0, 19: 0.3333333333333333, 20: 1.0, 21: 1.0, 22: 1.0, 23: 0.4, 24: 0.3333333333333333, 25: 0.3333333333333333, 26: 1.0, 27: 0.16666666666666666, 28: 0.3333333333333333, 29: 0.6666666666666666, 30: 0.5, 31: 0.2, 32: 0.19696969696969696, 33: 0.11029411764705882} nx . algorithms . cluster . average_clustering ( G ) 0.5706384782076823 Community Detection \u00b6 During the study in Karate club, a conflict arose between the club president 'A' and instructor 'B' (pseudonyms), which led to a split in the club. Half of the members formed a new club around A (group one) and the remaining members under B. Can we identify the 2 communities in this network? Girvan Newman \u00b6 Community detection is close to clustering in machine learning. In clustering, we do the clustering based on the distance between the points when placed in an n-dimensional space. Similar to clustering, in community detection, we want to cluster the nodes closer to each other than others. The only difference is the concept of distance is based on the topology of the network. Like clustering, we can divide the network into two communities using top-down and bottom-up methods. This is represented by a dendrogram where we can draw a horizontal line to split the communities. This is discussed in more detail in a different blog. The two groups based on Girvan Newman are: karate_club_split = nx . algorithms . community . centrality . girvan_newman ( G ) karate_club_split_tuple = tuple ( sorted ( c ) for c in next ( karate_club_split )) karate_club_split_tuple ([0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 19, 21], [2, 8, 9, 14, 15, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]) # To get colors in the graph color_list = [ 'r' if node in karate_club_split_tuple [ 0 ] else 'g' for node in G . nodes ] nx . draw_kamada_kawai ( G , node_color = color_list , with_labels = True ) Ratio cut \u00b6 Another method is the ratio cut method. A cut is a set of edges such that if we remove them, the network breaks into two components. A network will have many cuts, and to find an optimal split, we need to: 1. Find the min-balanced-cut (cut with the minimum number of edges with an almost equal number of nodes on each side) among all pairs of nodes 2. Repeat over each of the two parts This is discussed in more detail in a different blog. References 1. Zachary, W. W. (1977). An Information Flow Model for Conflict and Fission in Small Groups. Journal of Anthropological Research. 33 (4), pp. 452-473. 2. Networkx Karate club","title":"Network Science (Python)"},{"location":"Python/Network%20Science/#how-do-networks-evolve","text":"A social network is constantly evolving; people make new friends and lose touch with other friends. Many external factors in life, like marriage, new college, school, workplace or club, can spark the creation of new friends. This phenomenon is observed in vast networks such as the internet. Is there any model that can explain the growth of networks? If so, we can simulate new networks, identify what parameters influence the growth of new networks etc. Power law explains some real-world examples of the growth and scale of networks.","title":"How do networks evolve"},{"location":"Python/Network%20Science/#small-world-phenomena","text":"Small world phenomenon states that everyone in the world can be reached thru a short chain of acquaintances. This was first demonstrated in the Milgram experiment where random people were asked to send a letter to a stockbroker in Boston by passing it through people they know. Of the letters received, they went thru an average of 6 people. Facebook repeated this on a large scale later, which validated this with a lower number of connections. This indicates that most people are connected to every other random person on earth within six common friends.","title":"Small World Phenomena"},{"location":"Python/Network%20Science/#homophily","text":"This can be described as \"Birds of a feather flock together\". We tend to be friends with friends who are similar to us, especially people from the same socio-economic background, social background, etc.","title":"Homophily"},{"location":"Python/Network%20Science/#strength-of-weak-ties","text":"If two people in a social network have a friend in common, then there is an increased likelihood that they will become friends at some point in the future. This also depends on the strength of the friendship(ties). Generally, people in the same network will have the same kind of information. Take an example of jobs; everyone in the same friend circle will have the same information about open positions for jobs. It is the weak ties, friends whom we have not interacted with within some time, who have new information which will help most people to find jobs. This is called as the strength of weak ties. Let us look at a small network of friends in Zachary karate club . Zachary's karate club is a university-based karate club consisting of a social network of 34 members. W.W. Zachary famously observed the karate club for three years (from 1970 to 1972), documenting links between pairs of members who interacted outside the everyday activities of the club. The nodes in the graph represent people, and the edges represent friendships (interactions) between them. import matplotlib.pyplot as plt % matplotlib inline import networkx as nx G = nx . karate_club_graph () nx . draw_kamada_kawai ( G , with_labels = True ) We can understand the network using some statistics about the network.","title":"Strength of weak ties"},{"location":"Python/Network%20Science/#network-statistics","text":"","title":"Network Statistics"},{"location":"Python/Network%20Science/#degree-distribution","text":"The degree of a node is the number of nodes a particular node is connected to. For example, node 11 has one degree in the karate club network as it is connected to one node only(node 0). The degree distribution is the relative frequencies of the nodes that have particular degrees. There are two types of degree distributions generally, Poisson and scale-free. For the karate club network, the degree distribution is: degree_dist = nx . degree_histogram ( G ) plt . bar ( range ( len ( degree_dist )), degree_dist ) plt . ylabel ( 'No of people' ) plt . xlabel ( 'No of friends' ); This indicates that most people have 2-5 friends while a few people are connected to >15 people in the network.","title":"Degree Distribution"},{"location":"Python/Network%20Science/#clustering-coefficient","text":"Another statistic that we can understand is the clustering coefficient. This is the degree to which nodes cluster together. If A is friends with B and C, then B and c have a high probability of being friends if they belong to the same cluster. the clustering coefficient captures the fraction of triads (connected A, B and C) in the network. The clustering coefficient of all the nodes is calculated. The clustering coefficient of a node is the percentage of triangles that are there among the nodes that it is connected to. For example, node 11 is connected to node 6 and 5, both of which are connected. So the percentage of triads is 100%. Node 4 is connected to 0, 6 and 10. 0-6-4 and 0-10-0 make a triad, but 0-10-4 does not exist. Therefore the percentage is 66.6%. The clustering coefficient of the network is the average of the clustering coefficient across all the nodes, and it is 57% for the karate club. nx . clustering ( G ) {0: 0.15, 1: 0.3333333333333333, 2: 0.24444444444444444, 3: 0.6666666666666666, 4: 0.6666666666666666, 5: 0.5, 6: 0.5, 7: 1.0, 8: 0.5, 9: 0, 10: 0.6666666666666666, 11: 0, 12: 1.0, 13: 0.6, 14: 1.0, 15: 1.0, 16: 1.0, 17: 1.0, 18: 1.0, 19: 0.3333333333333333, 20: 1.0, 21: 1.0, 22: 1.0, 23: 0.4, 24: 0.3333333333333333, 25: 0.3333333333333333, 26: 1.0, 27: 0.16666666666666666, 28: 0.3333333333333333, 29: 0.6666666666666666, 30: 0.5, 31: 0.2, 32: 0.19696969696969696, 33: 0.11029411764705882} nx . algorithms . cluster . average_clustering ( G ) 0.5706384782076823","title":"Clustering coefficient"},{"location":"Python/Network%20Science/#community-detection","text":"During the study in Karate club, a conflict arose between the club president 'A' and instructor 'B' (pseudonyms), which led to a split in the club. Half of the members formed a new club around A (group one) and the remaining members under B. Can we identify the 2 communities in this network?","title":"Community Detection"},{"location":"Python/Network%20Science/#girvan-newman","text":"Community detection is close to clustering in machine learning. In clustering, we do the clustering based on the distance between the points when placed in an n-dimensional space. Similar to clustering, in community detection, we want to cluster the nodes closer to each other than others. The only difference is the concept of distance is based on the topology of the network. Like clustering, we can divide the network into two communities using top-down and bottom-up methods. This is represented by a dendrogram where we can draw a horizontal line to split the communities. This is discussed in more detail in a different blog. The two groups based on Girvan Newman are: karate_club_split = nx . algorithms . community . centrality . girvan_newman ( G ) karate_club_split_tuple = tuple ( sorted ( c ) for c in next ( karate_club_split )) karate_club_split_tuple ([0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 19, 21], [2, 8, 9, 14, 15, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]) # To get colors in the graph color_list = [ 'r' if node in karate_club_split_tuple [ 0 ] else 'g' for node in G . nodes ] nx . draw_kamada_kawai ( G , node_color = color_list , with_labels = True )","title":"Girvan Newman"},{"location":"Python/Network%20Science/#ratio-cut","text":"Another method is the ratio cut method. A cut is a set of edges such that if we remove them, the network breaks into two components. A network will have many cuts, and to find an optimal split, we need to: 1. Find the min-balanced-cut (cut with the minimum number of edges with an almost equal number of nodes on each side) among all pairs of nodes 2. Repeat over each of the two parts This is discussed in more detail in a different blog. References 1. Zachary, W. W. (1977). An Information Flow Model for Conflict and Fission in Small Groups. Journal of Anthropological Research. 33 (4), pp. 452-473. 2. Networkx Karate club","title":"Ratio cut"},{"location":"Python/Shortest%20path%20problems/","text":"MathJax.Hub.Config({ extensions: [\"tex2jax.js\",\"TeX/AMSmath.js\",\"TeX/AMSsymbols.js\"], jax: [\"input/TeX\", \"output/HTML-CSS\"], tex2jax: { inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ], displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"] ], }, \"HTML-CSS\": { availableFonts: [\"TeX\"] } }); Shortest path problems \u00b6 Shortest path is one problem in networks which appears in many forms across many industries. It tells the user how to find the shortest path between two pair of nodes. In this particular example, we will look at finding the shortest path between a pair of nodes in a directed network using an integer programming solver. import networkx as nx import numpy as np import pandas as pd import matplotlib.pyplot as plt Consider the following simple weighted directed network, with four nodes and five edges. edgelist_df = pd . DataFrame ({ 'node1' :[ 's' , 's' , 'u' , 'u' , 'v' ], 'node2' :[ 'u' , 'v' , 'v' , 't' , 't' ], 'weights' :[ 3 , 2 , 0.7 , 1 , 7 ] }) edgelist_df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } node1 node2 weights 0 s u 3.0 1 s v 2.0 2 u v 0.7 3 u t 1.0 4 v t 7.0 g = nx . DiGraph () for i , elrow in edgelist_df . iterrows (): g . add_edge ( elrow [ 0 ], elrow [ 1 ], weight = elrow [ 2 ]) g . edges ( data = True ) OutEdgeDataView([('s', 'u', {'weight': 3.0}), ('s', 'v', {'weight': 2.0}), ('u', 'v', {'weight': 0.7}), ('u', 't', {'weight': 1.0}), ('v', 't', {'weight': 7.0})]) # for each node we are trying to fix the coordinates g . add_node ( 's' , pos = ( 0 , 1 )) g . add_node ( 'u' , pos = ( 1 , 2 )) g . add_node ( 'v' , pos = ( 1 , 0 )) g . add_node ( 't' , pos = ( 2 , 1 )) g . nodes ( data = True ) NodeDataView({'s': {'pos': (0, 1)}, 'u': {'pos': (1, 2)}, 'v': {'pos': (1, 0)}, 't': {'pos': (2, 1)}}) # This function gets the coordinates for nodes pos = nx . get_node_attributes ( g , 'pos' ) # This function gets the weights for the edges weight = nx . get_edge_attributes ( g , 'weight' ) nx . draw ( g , pos , with_labels = True ) nx . draw_networkx_edge_labels ( g , pos , edge_labels = weight ) plt . show () Now, we want to find the shortest path between the node 's' and 't'. In this network, edge-weights represent the costs for each edge. The weights could be distance, or time. NetworkX has an inbuilt function shortest_path which returs the shortest path. Using networkX, we get the following shortest path: path_2_0 = nx . shortest_path ( g , source = 's' , target = 't' ) path_2_0 ['s', 'u', 't'] Formulating the problem using integer programming \u00b6 We have n nodes V and m edges E (n=4, m=5 for this example). OR tools is an open source software built by Google for solving integer programming problems. Cp-Sat solver is one such model by OR Tools, which we are going to use today. We can use binary decision variables \\(edge_{i,j}\\) representing the edge that goes from node i to node j. If \\(edge_{i,j}=1\\) the shortest path belongs to the path between i and j, 0 otherwise. from ortools.sat.python import cp_model shortest_path_model = cp_model . CpModel () # Creating one integer decision variable for each edge edge_bool_vars = {} for edge in g . edges : edge_bool_vars [ edge [ 0 ], edge [ 1 ]] = shortest_path_model . NewBoolVar ( 'edge_ %s _ %s ' % edge ) print ( 'Creating the boolean variable ' , edge_bool_vars [ edge [ 0 ], edge [ 1 ]], 'representing the if we should travel through ' , ( edge [ 0 ], edge [ 1 ])) Creating the boolean variable edge_s_u representing the if we should travel through ('s', 'u') Creating the boolean variable edge_s_v representing the if we should travel through ('s', 'v') Creating the boolean variable edge_u_v representing the if we should travel through ('u', 'v') Creating the boolean variable edge_u_t representing the if we should travel through ('u', 't') Creating the boolean variable edge_v_t representing the if we should travel through ('v', 't') The shortest path (in isolation) will have the following properties: 1. Starting node has a degree -1 2. Ending node has a degree +1 3. All intermediatory nodes have degree 0 This can be written in the form of flow balance constraints as follows: input_node = 's' output_node = 't' # Adding constraints on the nodes for node in g . nodes : in_edges = g . in_edges ( node ) out_edges = g . out_edges ( node ) print ( 'Adding the constraint on node ' , node ) print ( 'This node has %i in-edges and %i out-edges' % ( len ( in_edges ), len ( out_edges ))) equation_at_this_edge = sum ( edge_bool_vars [ edge [ 0 ], edge [ 1 ]] for edge in in_edges ) - \\ sum ( edge_bool_vars [ edge [ 0 ], edge [ 1 ]] for edge in out_edges ) if ( node == input_node ): shortest_path_model . Add ( equation_at_this_edge == - 1 ) print ( equation_at_this_edge == - 1 ) elif ( node == output_node ): shortest_path_model . Add ( equation_at_this_edge == 1 ) print ( equation_at_this_edge == 1 ) else : shortest_path_model . Add ( equation_at_this_edge == 0 ) print ( equation_at_this_edge , '== 0' ) print ( '' ) Adding the constraint on node s This node has 0 in-edges and 2 out-edges (-((edge_s_u) + edge_s_v)) == -1 Adding the constraint on node u This node has 1 in-edges and 2 out-edges ((edge_s_u) + -((edge_u_v) + edge_u_t)) == 0 Adding the constraint on node v This node has 2 in-edges and 1 out-edges (((edge_s_v) + edge_u_v) + -(edge_v_t)) == 0 Adding the constraint on node t This node has 2 in-edges and 0 out-edges (((edge_u_t) + edge_v_t)) == 1 The objective of the shortest path problem is to find the path with the minimum cost. This can be written as minimising the costs as follows: # factor to make everything including costs integer factor_to_int = 10 # The objective is to maximise flow total_cost = sum ( int ( g . get_edge_data ( * edge )[ 'weight' ] * factor_to_int ) * edge_bool_vars [ edge [ 0 ], edge [ 1 ]] for edge in g . edges ) print ( 'Objective is to optimise cost' ) print ( total_cost ) shortest_path_model . Minimize ( total_cost ) Objective is to optimise cost ((((((30 * edge_s_u)) + (20 * edge_s_v)) + (7 * edge_u_v)) + (10 * edge_u_t)) + (70 * edge_v_t)) Solving the problem, we have an optimal solution with the overall cost as 40 units. # Solving the problem solver = cp_model . CpSolver () solution_printer = cp_model . ObjectiveSolutionPrinter () status = solver . SolveWithSolutionCallback ( shortest_path_model , solution_printer ) Solution 0, time = 0.02 s, objective = 40 cp_model . OPTIMAL == status True The solution is given as result_edges = {} for edge in g . edges : result_edges [ edge [ 0 ], edge [ 1 ]] = solver . Value ( edge_bool_vars [ edge [ 0 ], edge [ 1 ]]) result_edges {('s', 'u'): 1, ('s', 'v'): 0, ('u', 'v'): 0, ('u', 't'): 1, ('v', 't'): 0} Plotting the network in such a way that the green lines represent the shortest path, we get pos = nx . get_node_attributes ( g , 'pos' ) color = [ 'g' if val == 1 else 'r' for val in result_edges . values ()] nx . draw ( g , pos , with_labels = True , edge_color = color ) nx . draw_networkx_edge_labels ( g , pos , edge_labels = result_edges ) plt . show ()","title":"Shortest path using integer programming (Python)"},{"location":"Python/Shortest%20path%20problems/#shortest-path-problems","text":"Shortest path is one problem in networks which appears in many forms across many industries. It tells the user how to find the shortest path between two pair of nodes. In this particular example, we will look at finding the shortest path between a pair of nodes in a directed network using an integer programming solver. import networkx as nx import numpy as np import pandas as pd import matplotlib.pyplot as plt Consider the following simple weighted directed network, with four nodes and five edges. edgelist_df = pd . DataFrame ({ 'node1' :[ 's' , 's' , 'u' , 'u' , 'v' ], 'node2' :[ 'u' , 'v' , 'v' , 't' , 't' ], 'weights' :[ 3 , 2 , 0.7 , 1 , 7 ] }) edgelist_df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } node1 node2 weights 0 s u 3.0 1 s v 2.0 2 u v 0.7 3 u t 1.0 4 v t 7.0 g = nx . DiGraph () for i , elrow in edgelist_df . iterrows (): g . add_edge ( elrow [ 0 ], elrow [ 1 ], weight = elrow [ 2 ]) g . edges ( data = True ) OutEdgeDataView([('s', 'u', {'weight': 3.0}), ('s', 'v', {'weight': 2.0}), ('u', 'v', {'weight': 0.7}), ('u', 't', {'weight': 1.0}), ('v', 't', {'weight': 7.0})]) # for each node we are trying to fix the coordinates g . add_node ( 's' , pos = ( 0 , 1 )) g . add_node ( 'u' , pos = ( 1 , 2 )) g . add_node ( 'v' , pos = ( 1 , 0 )) g . add_node ( 't' , pos = ( 2 , 1 )) g . nodes ( data = True ) NodeDataView({'s': {'pos': (0, 1)}, 'u': {'pos': (1, 2)}, 'v': {'pos': (1, 0)}, 't': {'pos': (2, 1)}}) # This function gets the coordinates for nodes pos = nx . get_node_attributes ( g , 'pos' ) # This function gets the weights for the edges weight = nx . get_edge_attributes ( g , 'weight' ) nx . draw ( g , pos , with_labels = True ) nx . draw_networkx_edge_labels ( g , pos , edge_labels = weight ) plt . show () Now, we want to find the shortest path between the node 's' and 't'. In this network, edge-weights represent the costs for each edge. The weights could be distance, or time. NetworkX has an inbuilt function shortest_path which returs the shortest path. Using networkX, we get the following shortest path: path_2_0 = nx . shortest_path ( g , source = 's' , target = 't' ) path_2_0 ['s', 'u', 't']","title":"Shortest path problems"},{"location":"Python/Shortest%20path%20problems/#formulating-the-problem-using-integer-programming","text":"We have n nodes V and m edges E (n=4, m=5 for this example). OR tools is an open source software built by Google for solving integer programming problems. Cp-Sat solver is one such model by OR Tools, which we are going to use today. We can use binary decision variables \\(edge_{i,j}\\) representing the edge that goes from node i to node j. If \\(edge_{i,j}=1\\) the shortest path belongs to the path between i and j, 0 otherwise. from ortools.sat.python import cp_model shortest_path_model = cp_model . CpModel () # Creating one integer decision variable for each edge edge_bool_vars = {} for edge in g . edges : edge_bool_vars [ edge [ 0 ], edge [ 1 ]] = shortest_path_model . NewBoolVar ( 'edge_ %s _ %s ' % edge ) print ( 'Creating the boolean variable ' , edge_bool_vars [ edge [ 0 ], edge [ 1 ]], 'representing the if we should travel through ' , ( edge [ 0 ], edge [ 1 ])) Creating the boolean variable edge_s_u representing the if we should travel through ('s', 'u') Creating the boolean variable edge_s_v representing the if we should travel through ('s', 'v') Creating the boolean variable edge_u_v representing the if we should travel through ('u', 'v') Creating the boolean variable edge_u_t representing the if we should travel through ('u', 't') Creating the boolean variable edge_v_t representing the if we should travel through ('v', 't') The shortest path (in isolation) will have the following properties: 1. Starting node has a degree -1 2. Ending node has a degree +1 3. All intermediatory nodes have degree 0 This can be written in the form of flow balance constraints as follows: input_node = 's' output_node = 't' # Adding constraints on the nodes for node in g . nodes : in_edges = g . in_edges ( node ) out_edges = g . out_edges ( node ) print ( 'Adding the constraint on node ' , node ) print ( 'This node has %i in-edges and %i out-edges' % ( len ( in_edges ), len ( out_edges ))) equation_at_this_edge = sum ( edge_bool_vars [ edge [ 0 ], edge [ 1 ]] for edge in in_edges ) - \\ sum ( edge_bool_vars [ edge [ 0 ], edge [ 1 ]] for edge in out_edges ) if ( node == input_node ): shortest_path_model . Add ( equation_at_this_edge == - 1 ) print ( equation_at_this_edge == - 1 ) elif ( node == output_node ): shortest_path_model . Add ( equation_at_this_edge == 1 ) print ( equation_at_this_edge == 1 ) else : shortest_path_model . Add ( equation_at_this_edge == 0 ) print ( equation_at_this_edge , '== 0' ) print ( '' ) Adding the constraint on node s This node has 0 in-edges and 2 out-edges (-((edge_s_u) + edge_s_v)) == -1 Adding the constraint on node u This node has 1 in-edges and 2 out-edges ((edge_s_u) + -((edge_u_v) + edge_u_t)) == 0 Adding the constraint on node v This node has 2 in-edges and 1 out-edges (((edge_s_v) + edge_u_v) + -(edge_v_t)) == 0 Adding the constraint on node t This node has 2 in-edges and 0 out-edges (((edge_u_t) + edge_v_t)) == 1 The objective of the shortest path problem is to find the path with the minimum cost. This can be written as minimising the costs as follows: # factor to make everything including costs integer factor_to_int = 10 # The objective is to maximise flow total_cost = sum ( int ( g . get_edge_data ( * edge )[ 'weight' ] * factor_to_int ) * edge_bool_vars [ edge [ 0 ], edge [ 1 ]] for edge in g . edges ) print ( 'Objective is to optimise cost' ) print ( total_cost ) shortest_path_model . Minimize ( total_cost ) Objective is to optimise cost ((((((30 * edge_s_u)) + (20 * edge_s_v)) + (7 * edge_u_v)) + (10 * edge_u_t)) + (70 * edge_v_t)) Solving the problem, we have an optimal solution with the overall cost as 40 units. # Solving the problem solver = cp_model . CpSolver () solution_printer = cp_model . ObjectiveSolutionPrinter () status = solver . SolveWithSolutionCallback ( shortest_path_model , solution_printer ) Solution 0, time = 0.02 s, objective = 40 cp_model . OPTIMAL == status True The solution is given as result_edges = {} for edge in g . edges : result_edges [ edge [ 0 ], edge [ 1 ]] = solver . Value ( edge_bool_vars [ edge [ 0 ], edge [ 1 ]]) result_edges {('s', 'u'): 1, ('s', 'v'): 0, ('u', 'v'): 0, ('u', 't'): 1, ('v', 't'): 0} Plotting the network in such a way that the green lines represent the shortest path, we get pos = nx . get_node_attributes ( g , 'pos' ) color = [ 'g' if val == 1 else 'r' for val in result_edges . values ()] nx . draw ( g , pos , with_labels = True , edge_color = color ) nx . draw_networkx_edge_labels ( g , pos , edge_labels = result_edges ) plt . show ()","title":"Formulating the problem using integer programming"},{"location":"R/Univariate-analysis/","text":"Introduction \u00b6 Uni-variate analysis is the simplest form of EDA. \"Uni\" means \"one\", so in other words your data has only one variable. It doesn't deal with causes or relationships and it's major purpose is to describe; it takes data, summarizes that data and finds patterns in the data. In describing or characterizing the observations of an individual variable, there are three basic properties that are of interest: The location of observations, or how large or small the values of the individual observations are The dispersion (sometimes called scale or spread) of the observations The distribution of the observations Uni-variate plots provide one way to find out about those properties. There are two basic kinds of uni variate plots: Enumeration plots, or plots that show every observation Summary plots, that generalize the data into a simplified representation. For the current tutorial, I will be using my office attendance data set. The data set contains the time when I swiped into office and the time when I swiped out of office. Data from 4 th October 2017 to 29 th November 2018. After some manipulation on the data set, I will get the difference between policy out-time and my actual out-time. I can leave from 15 minutes before the policy out time. A sample of the data after manipulation is as follows: (Actual data is not shown for security reasons. This is mock data which is very similar to the actual one.) ## Attendance.Date diff.in.time diff.out.time ## 1 2018-03-22 18 mins 226 mins ## 2 2018-08-14 -9 mins 5 mins ## 3 2017-12-04 42 mins 11 mins ## 4 2018-03-01 26 mins -6 mins ## 5 2018-01-23 35 mins -4 mins Summary Statistics \u00b6 Some basic summary statistics before further analysis would me the basic mean and standard deviation of the data. For this tutorial, I will use diff.in.time (difference between actual in-time and policy in-time) mean ( as.numeric ( attendance $ diff.out.time )) # Mean in minutes ## [1] 20.3227 sd ( as.numeric ( attendance $ diff.out.time )) # Standard Deviation in minutes ## [1] 69.06549 nrow ( attendance ) # Length of the data set ## [1] 282 Enumerative plots \u00b6 \"Enumerative plots\" are called such because they enumerate or show every individual data point Index Plot/Univariate Scatter Diagram \u00b6 Displays the values of a single variable for each observation using symbols plotted relative to the observation number. ggplot ( attendance , aes ( x = Attendance.Date , y = as.numeric ( diff.out.time ), color = ( diff.out.time >= -15 ))) + geom_point ( show.legend = FALSE ) + labs ( x = 'Time' , y = 'Out-time difference (Minutes)' ) + theme_minimal () Just looking at this plot I can say the following: I could cluster into three parts, One cluster would be before December 2017, where I used to leave office way after my out-time, second cluster would be from December 2017 to June 2018, where I used to leave office 15 minutes before my out time, and after June 2018, when I was leaving way after my out-time. The red dots indicate the days when I came to office after 15 minutes from in-time. They are anomalies, days when I took half days etc.. We can exclude them from our current analysis. Y Zero High-Density Plot \u00b6 Another way to look at the same data is by using a Y Zero High-Density Plot. It displays the values of a single variable plotted as thin vertical lines. Here the magnitude of the observations are highlighted. ggplot ( attendance , aes ( x = Attendance.Date , y = 0 , color = ( diff.out.time >= -15 ), xend = Attendance.Date , yend = as.numeric ( diff.out.time ))) + geom_segment ( show.legend = FALSE ) + labs ( x = 'Time' , y = 'Out-time difference (Minutes)' ) + theme_minimal () Removing half-days as outliers attendance <- attendance %>% filter ( diff.out.time >= -15 ) Strip Plot/Strip Chart (univariate scatter diagram) \u00b6 Displays the values of a single variable as symbols plotted along a line. This is a basic plot where we can see the spread of the data. stripchart ( x = as.numeric ( attendance $ diff.out.time ), xlab = 'Out-time difference (minutes)' ) Sometimes it is more visually apparent when the points are stacked. ggplot ( attendance , aes ( x = as.numeric ( diff.out.time ), y = ..density.. )) + geom_dotplot ( binwidth = 3 , method = 'histodot' ) + labs ( x = 'Out-time difference (minutes)' ) + theme_minimal () We can observe that the number of observations are high at the starting and slowly tend to drop as time progresses. Dot Plot/Dot Chart \u00b6 Displays the values of a single variable as symbols plotted along a line. With a separate line for each observation, it is generally constructed after sorting the rows of the data table. df = attendance %>% arrange ( as.numeric ( diff.out.time )) ggplot ( df , aes ( x = as.numeric ( row.names ( df )), y = as.numeric ( diff.out.time ))) + geom_point () + labs ( x = 'count' , y = 'Out time difference (min)' ) + theme_minimal () From the graph I can observe that the distribution initially seems to be a exponential distribution. A sample normal distribution is plotted for reference. We can see that the distribution looks no where like a normal distribution. I suspect that it is close to a exponential distribution. Univariate Summary Plots \u00b6 Summary plots display an object or a graph that gives a more concise expression of the location, dispersion, and distribution of a variable than an enumerative plot, but this comes at the expense of some loss of information: In a summary plot, it is no longer possible to retrieve the individual data value, but this loss is usually matched by the gain in understanding that results from the efficient representation of the data. Summary plots generally prove to be much better than the enumerative plots in revealing the distribution of the data. Box plot \u00b6 A simple way of representing statistical data on a plot in which a rectangle is drawn to represent the second and third quartiles, usually with a vertical line inside to indicate the median value. The lower and upper quartiles are shown as horizontal lines either side of the rectangle. ggplot ( attendance , aes ( x = \"Box Plot\" , y = as.numeric ( diff.out.time ), group = 123 )) + geom_boxplot () + labs ( y = 'Out time difference (min)' ) + theme_minimal () Histograms \u00b6 The other summary plots are of various types: Histograms: Histograms are a type of bar chart that displays the counts or relative frequencies of values falling in different class intervals or ranges. Density Plots: A density plot is a plot of the local relative frequency or density of points along the number line or x-axis of a plot. The local density is determined by summing the individual \"kernel\" densities for each point. Where points occur more frequently, this sum, and consequently the local density, will be greater. legendcols <- c ( \"Normal distribution\" = \"darkred\" , \"Density\" = \"darkBlue\" , \"Histogram\" = \"lightBlue\" ) ggplot ( attendance , aes ( x = as.numeric ( diff.out.time ))) + geom_histogram ( aes ( y = ..density.. , fill = \"Histogram\" ), bins = 50 ) + stat_function ( fun = dnorm , aes ( color = \"Normal distribution\" ), size = 1 , args = list ( mean = mean ( as.numeric ( attendance $ diff.out.time )), sd = sd ( as.numeric ( attendance $ diff.out.time )) )) + geom_density ( aes ( y = ..density.. , color = \"Density\" ), size = 1 ) + scale_colour_manual ( name = \"Distribution\" , values = legendcols ) + scale_fill_manual ( name = \"Bar\" , values = legendcols ) + labs ( x = 'Out-time difference (minutes)' , y = 'Density' ) + theme_minimal () + theme ( legend.position = \"bottom\" ) In the above graph, the red line is normal distribution(with the same mean and sd) while the blue line is the density plot of in-time. Q-Q plot \u00b6 In statistics, a Q-Q (quantile-quantile) plot is a probability plot, which is a graphical method for comparing two probability distributions by plotting their quantiles against each other. If the two distributions being compared are similar, the points in the Q-Q plot will approximately lie on the line y = x. If the distributions are linearly related, the points in the Q-Q plot will approximately lie on a line, but not necessarily on the line y = x. Q-Q plots can also be used as a graphical means of estimating parameters in a location-scale family of distributions. A Q-Q plot is used to compare the shapes of distributions, providing a graphical view of how properties such as location, scale, and skewness are similar or different in the two distributions. Below is a Q-Q plot with a normal distribution ggplot ( attendance , aes ( sample = as.numeric ( diff.out.time ))) + stat_qq () + stat_qq_line () + ggtitle ( \"Normal distribution Q-Q plot\" ) + theme_minimal () We can clearly see that the distribution is not a normal distribution. Trying to check with exponential distribution params <- as.list ( fitdistr ( rexp ( nrow ( attendance ), rate = 2 ), \"exponential\" ) $ estimate ) ggplot ( attendance , aes ( sample = as.numeric ( diff.out.time ))) + stat_qq ( distribution = qexp , dparams = params ) + stat_qq_line ( distribution = qexp , dparams = params ) + ggtitle ( \"Exponential distribution Q-Q plot\" ) + theme_minimal () From the above graph I am approximating my distribution to an exponential distribution. lamda <- 1 / mean ( sd ( as.numeric ( attendance $ diff.out.time )), mean ( as.numeric ( attendance $ diff.out.time ))) exp.curve <- function ( x ){ lamda * exp ( - lamda * ( x +15 )) } legendcols <- c ( \"Exponential distribution\" = \"darkred\" , \"Density\" = \"darkBlue\" , \"Histogram\" = \"lightBlue\" ) ggplot ( attendance , aes ( x = as.numeric ( diff.out.time ))) + geom_histogram ( aes ( y = ..density.. , fill = \"Histogram\" ), bins = 50 ) + stat_function ( fun = exp.curve , aes ( color = \"Exponential distribution\" ), size = 1 ) + geom_density ( aes ( y = ..density.. , color = \"Density\" ), size = 1 ) + scale_colour_manual ( name = \"Distribution\" , values = legendcols ) + scale_fill_manual ( name = \"Bar\" , values = legendcols ) + labs ( x = 'Out-time difference (minutes)' , y = 'Density' ) + theme_minimal () + theme ( legend.position = \"bottom\" ) In the above graph, the red line is exponential distribution( lambda = 1/mean, mean = mean of the distribution) while the blue line is the density plot of in-time. Created using RMarkdown","title":"Univariate Analysis (R)"},{"location":"R/Univariate-analysis/#introduction","text":"Uni-variate analysis is the simplest form of EDA. \"Uni\" means \"one\", so in other words your data has only one variable. It doesn't deal with causes or relationships and it's major purpose is to describe; it takes data, summarizes that data and finds patterns in the data. In describing or characterizing the observations of an individual variable, there are three basic properties that are of interest: The location of observations, or how large or small the values of the individual observations are The dispersion (sometimes called scale or spread) of the observations The distribution of the observations Uni-variate plots provide one way to find out about those properties. There are two basic kinds of uni variate plots: Enumeration plots, or plots that show every observation Summary plots, that generalize the data into a simplified representation. For the current tutorial, I will be using my office attendance data set. The data set contains the time when I swiped into office and the time when I swiped out of office. Data from 4 th October 2017 to 29 th November 2018. After some manipulation on the data set, I will get the difference between policy out-time and my actual out-time. I can leave from 15 minutes before the policy out time. A sample of the data after manipulation is as follows: (Actual data is not shown for security reasons. This is mock data which is very similar to the actual one.) ## Attendance.Date diff.in.time diff.out.time ## 1 2018-03-22 18 mins 226 mins ## 2 2018-08-14 -9 mins 5 mins ## 3 2017-12-04 42 mins 11 mins ## 4 2018-03-01 26 mins -6 mins ## 5 2018-01-23 35 mins -4 mins","title":"Introduction"},{"location":"R/Univariate-analysis/#summary-statistics","text":"Some basic summary statistics before further analysis would me the basic mean and standard deviation of the data. For this tutorial, I will use diff.in.time (difference between actual in-time and policy in-time) mean ( as.numeric ( attendance $ diff.out.time )) # Mean in minutes ## [1] 20.3227 sd ( as.numeric ( attendance $ diff.out.time )) # Standard Deviation in minutes ## [1] 69.06549 nrow ( attendance ) # Length of the data set ## [1] 282","title":"Summary Statistics"},{"location":"R/Univariate-analysis/#enumerative-plots","text":"\"Enumerative plots\" are called such because they enumerate or show every individual data point","title":"Enumerative plots"},{"location":"R/Univariate-analysis/#index-plotunivariate-scatter-diagram","text":"Displays the values of a single variable for each observation using symbols plotted relative to the observation number. ggplot ( attendance , aes ( x = Attendance.Date , y = as.numeric ( diff.out.time ), color = ( diff.out.time >= -15 ))) + geom_point ( show.legend = FALSE ) + labs ( x = 'Time' , y = 'Out-time difference (Minutes)' ) + theme_minimal () Just looking at this plot I can say the following: I could cluster into three parts, One cluster would be before December 2017, where I used to leave office way after my out-time, second cluster would be from December 2017 to June 2018, where I used to leave office 15 minutes before my out time, and after June 2018, when I was leaving way after my out-time. The red dots indicate the days when I came to office after 15 minutes from in-time. They are anomalies, days when I took half days etc.. We can exclude them from our current analysis.","title":"Index Plot/Univariate Scatter Diagram"},{"location":"R/Univariate-analysis/#y-zero-high-density-plot","text":"Another way to look at the same data is by using a Y Zero High-Density Plot. It displays the values of a single variable plotted as thin vertical lines. Here the magnitude of the observations are highlighted. ggplot ( attendance , aes ( x = Attendance.Date , y = 0 , color = ( diff.out.time >= -15 ), xend = Attendance.Date , yend = as.numeric ( diff.out.time ))) + geom_segment ( show.legend = FALSE ) + labs ( x = 'Time' , y = 'Out-time difference (Minutes)' ) + theme_minimal () Removing half-days as outliers attendance <- attendance %>% filter ( diff.out.time >= -15 )","title":"Y Zero High-Density Plot"},{"location":"R/Univariate-analysis/#strip-plotstrip-chart-univariate-scatter-diagram","text":"Displays the values of a single variable as symbols plotted along a line. This is a basic plot where we can see the spread of the data. stripchart ( x = as.numeric ( attendance $ diff.out.time ), xlab = 'Out-time difference (minutes)' ) Sometimes it is more visually apparent when the points are stacked. ggplot ( attendance , aes ( x = as.numeric ( diff.out.time ), y = ..density.. )) + geom_dotplot ( binwidth = 3 , method = 'histodot' ) + labs ( x = 'Out-time difference (minutes)' ) + theme_minimal () We can observe that the number of observations are high at the starting and slowly tend to drop as time progresses.","title":"Strip Plot/Strip Chart (univariate scatter diagram)"},{"location":"R/Univariate-analysis/#dot-plotdot-chart","text":"Displays the values of a single variable as symbols plotted along a line. With a separate line for each observation, it is generally constructed after sorting the rows of the data table. df = attendance %>% arrange ( as.numeric ( diff.out.time )) ggplot ( df , aes ( x = as.numeric ( row.names ( df )), y = as.numeric ( diff.out.time ))) + geom_point () + labs ( x = 'count' , y = 'Out time difference (min)' ) + theme_minimal () From the graph I can observe that the distribution initially seems to be a exponential distribution. A sample normal distribution is plotted for reference. We can see that the distribution looks no where like a normal distribution. I suspect that it is close to a exponential distribution.","title":"Dot Plot/Dot Chart"},{"location":"R/Univariate-analysis/#univariate-summary-plots","text":"Summary plots display an object or a graph that gives a more concise expression of the location, dispersion, and distribution of a variable than an enumerative plot, but this comes at the expense of some loss of information: In a summary plot, it is no longer possible to retrieve the individual data value, but this loss is usually matched by the gain in understanding that results from the efficient representation of the data. Summary plots generally prove to be much better than the enumerative plots in revealing the distribution of the data.","title":"Univariate Summary Plots"},{"location":"R/Univariate-analysis/#box-plot","text":"A simple way of representing statistical data on a plot in which a rectangle is drawn to represent the second and third quartiles, usually with a vertical line inside to indicate the median value. The lower and upper quartiles are shown as horizontal lines either side of the rectangle. ggplot ( attendance , aes ( x = \"Box Plot\" , y = as.numeric ( diff.out.time ), group = 123 )) + geom_boxplot () + labs ( y = 'Out time difference (min)' ) + theme_minimal ()","title":"Box plot"},{"location":"R/Univariate-analysis/#histograms","text":"The other summary plots are of various types: Histograms: Histograms are a type of bar chart that displays the counts or relative frequencies of values falling in different class intervals or ranges. Density Plots: A density plot is a plot of the local relative frequency or density of points along the number line or x-axis of a plot. The local density is determined by summing the individual \"kernel\" densities for each point. Where points occur more frequently, this sum, and consequently the local density, will be greater. legendcols <- c ( \"Normal distribution\" = \"darkred\" , \"Density\" = \"darkBlue\" , \"Histogram\" = \"lightBlue\" ) ggplot ( attendance , aes ( x = as.numeric ( diff.out.time ))) + geom_histogram ( aes ( y = ..density.. , fill = \"Histogram\" ), bins = 50 ) + stat_function ( fun = dnorm , aes ( color = \"Normal distribution\" ), size = 1 , args = list ( mean = mean ( as.numeric ( attendance $ diff.out.time )), sd = sd ( as.numeric ( attendance $ diff.out.time )) )) + geom_density ( aes ( y = ..density.. , color = \"Density\" ), size = 1 ) + scale_colour_manual ( name = \"Distribution\" , values = legendcols ) + scale_fill_manual ( name = \"Bar\" , values = legendcols ) + labs ( x = 'Out-time difference (minutes)' , y = 'Density' ) + theme_minimal () + theme ( legend.position = \"bottom\" ) In the above graph, the red line is normal distribution(with the same mean and sd) while the blue line is the density plot of in-time.","title":"Histograms"},{"location":"R/Univariate-analysis/#q-q-plot","text":"In statistics, a Q-Q (quantile-quantile) plot is a probability plot, which is a graphical method for comparing two probability distributions by plotting their quantiles against each other. If the two distributions being compared are similar, the points in the Q-Q plot will approximately lie on the line y = x. If the distributions are linearly related, the points in the Q-Q plot will approximately lie on a line, but not necessarily on the line y = x. Q-Q plots can also be used as a graphical means of estimating parameters in a location-scale family of distributions. A Q-Q plot is used to compare the shapes of distributions, providing a graphical view of how properties such as location, scale, and skewness are similar or different in the two distributions. Below is a Q-Q plot with a normal distribution ggplot ( attendance , aes ( sample = as.numeric ( diff.out.time ))) + stat_qq () + stat_qq_line () + ggtitle ( \"Normal distribution Q-Q plot\" ) + theme_minimal () We can clearly see that the distribution is not a normal distribution. Trying to check with exponential distribution params <- as.list ( fitdistr ( rexp ( nrow ( attendance ), rate = 2 ), \"exponential\" ) $ estimate ) ggplot ( attendance , aes ( sample = as.numeric ( diff.out.time ))) + stat_qq ( distribution = qexp , dparams = params ) + stat_qq_line ( distribution = qexp , dparams = params ) + ggtitle ( \"Exponential distribution Q-Q plot\" ) + theme_minimal () From the above graph I am approximating my distribution to an exponential distribution. lamda <- 1 / mean ( sd ( as.numeric ( attendance $ diff.out.time )), mean ( as.numeric ( attendance $ diff.out.time ))) exp.curve <- function ( x ){ lamda * exp ( - lamda * ( x +15 )) } legendcols <- c ( \"Exponential distribution\" = \"darkred\" , \"Density\" = \"darkBlue\" , \"Histogram\" = \"lightBlue\" ) ggplot ( attendance , aes ( x = as.numeric ( diff.out.time ))) + geom_histogram ( aes ( y = ..density.. , fill = \"Histogram\" ), bins = 50 ) + stat_function ( fun = exp.curve , aes ( color = \"Exponential distribution\" ), size = 1 ) + geom_density ( aes ( y = ..density.. , color = \"Density\" ), size = 1 ) + scale_colour_manual ( name = \"Distribution\" , values = legendcols ) + scale_fill_manual ( name = \"Bar\" , values = legendcols ) + labs ( x = 'Out-time difference (minutes)' , y = 'Density' ) + theme_minimal () + theme ( legend.position = \"bottom\" ) In the above graph, the red line is exponential distribution( lambda = 1/mean, mean = mean of the distribution) while the blue line is the density plot of in-time. Created using RMarkdown","title":"Q-Q plot"},{"location":"R/multivariateAnalysis/","text":"Introduction \u00b6 Multivariate EDA techniques generally show the relationship between two or more variables with the depandant variable in the form of either cross-tabulation, statistics or visually. In the current problem it will help us look at relationships between our data. This blog is a part of in-time analysis problem . I want to analyse my entry time at office and understand what factors effect it. After integrating Google maps data with attendence dataset , I currently have the factors 1. date (month / week day / season etc) 2. main_activity (means of transport) 3. hours.worked (of the previous day) 4. travelling.time (time it took to travel from house to office) 5. home.addr (the place of residence) The dependent variable is diff.in.time (difference between my actual in time vs policy in-time) A sample of the data is shown Sample Data diff.in.time date main_activity hours.worked travelling.time home.addr diff.out.time -9 2018-08-14 IN_VEHICLE 8.933333 900.719 Old House 5 17 2018-03-16 ON_FOOT 9.116667 930.126 Old House -10 -14 2018-09-10 ON_FOOT 4.583333 1179.873 Old House -251 -7 2018-10-19 ON_BICYCLE 9.583333 1501.060 New House 42 -9 2018-06-28 IN_VEHICLE 9.783333 670.700 Old House 56 Cross-tabulation \u00b6 For categorical data cross-tabulation is very useful. For two variables, cross-tabulation is performed by making a two-way table with column headings that match the levels of one variable and row headings that match the levels of the other variable, then filling in the counts of all subjects that share a pair of levels. The two variables might be both explanatory, both outcome, or one of each. I am using Kable to make cool tables. cross_table <- travel %>% group_by ( home.addr , main_activity ) %>% summarise ( avg.travel.time = mean ( travelling.time ), avg.in.time.diff = mean ( diff.in.time ), median.in.time.diff = median ( diff.in.time )) %>% arrange ( home.addr , main_activity ) library ( kableExtra ) kable ( cross_table , caption = 'Cross Tabulation' ) %>% kable_styling ( full_width = F ) %>% column_spec ( 1 , bold = T ) %>% collapse_rows ( columns = 1 : 2 , valign = \"middle\" ) %>% scroll_box () Cross Tabulation home.addr main_activity avg.travel.time avg.in.time.diff median.in.time.diff New House IN_VEHICLE 1285.0264 -1.800000 -3 New House ON_BICYCLE 1547.5557 -4.000000 -6 New House ON_FOOT 1695.7091 5.285714 5 Old House IN_VEHICLE 771.1752 2.857143 -4 Old House ON_BICYCLE 1029.6329 14.941176 18 Old House ON_FOOT 1170.4783 17.433628 17 Scatter plots \u00b6 Scatter plots show how much one variable is affected by another. To see how travelling time affects in-time ggplot ( travel , aes ( x = diff.in.time , y = travelling.time , color = main_activity )) + geom_point ( show.legend = TRUE ) + labs ( x = 'In-time difference (Minutes)' , y = 'Travelling time (seconds)' , title = \"Travelling time vs in-time\" , color = 'Mode of transport' ) + theme_minimal () + theme ( legend.position = \"bottom\" ) From the above graph, I can see that: 1. For bicycle, as travelling time decreases(low traffic) in-time difference increases(coming earlier to office) 2. There seems to be no relationship between travelling time (traffic) and in-time difference when on foot. 3. Travelling time has little affect on it-time difference when travelling on vehicle. To see how hours worked(on previous day) affects in-time From the above graph, I can observe that irrespective of mode of transport, my in-time difference increases (coming earlier to office) as hours worked on the previous day increases. Box plots \u00b6 Similarly, I want to see how mode of transport affects in-time difference. For categorical variable, box plots display this information in the most ideal manner. ggplot ( travel , aes ( x = main_activity , y = diff.in.time , group = main_activity )) + geom_boxplot () + labs ( x = 'Mode of transport' , y = 'In time difference (min)' ) + theme_minimal () From the above graph, I can observe that: 1. On vehicle, I went to office on average, ~12 minutes after the policy in-time (in-time difference is -12) 2. On cycle, I went to office almost close to the policy in-time 3. While walking, I was almost always before the policy in-time Similarly for place of residence. From this graph, I can understand that from New house I was close to ~5 minutes after the policy in-time while I used to be on-time while living in Old house. Created using R Markdown. Credits: Thinkstats Experimental Design and Analysis","title":"Multivariate Analysis (R)"},{"location":"R/multivariateAnalysis/#introduction","text":"Multivariate EDA techniques generally show the relationship between two or more variables with the depandant variable in the form of either cross-tabulation, statistics or visually. In the current problem it will help us look at relationships between our data. This blog is a part of in-time analysis problem . I want to analyse my entry time at office and understand what factors effect it. After integrating Google maps data with attendence dataset , I currently have the factors 1. date (month / week day / season etc) 2. main_activity (means of transport) 3. hours.worked (of the previous day) 4. travelling.time (time it took to travel from house to office) 5. home.addr (the place of residence) The dependent variable is diff.in.time (difference between my actual in time vs policy in-time) A sample of the data is shown Sample Data diff.in.time date main_activity hours.worked travelling.time home.addr diff.out.time -9 2018-08-14 IN_VEHICLE 8.933333 900.719 Old House 5 17 2018-03-16 ON_FOOT 9.116667 930.126 Old House -10 -14 2018-09-10 ON_FOOT 4.583333 1179.873 Old House -251 -7 2018-10-19 ON_BICYCLE 9.583333 1501.060 New House 42 -9 2018-06-28 IN_VEHICLE 9.783333 670.700 Old House 56","title":"Introduction"},{"location":"R/multivariateAnalysis/#cross-tabulation","text":"For categorical data cross-tabulation is very useful. For two variables, cross-tabulation is performed by making a two-way table with column headings that match the levels of one variable and row headings that match the levels of the other variable, then filling in the counts of all subjects that share a pair of levels. The two variables might be both explanatory, both outcome, or one of each. I am using Kable to make cool tables. cross_table <- travel %>% group_by ( home.addr , main_activity ) %>% summarise ( avg.travel.time = mean ( travelling.time ), avg.in.time.diff = mean ( diff.in.time ), median.in.time.diff = median ( diff.in.time )) %>% arrange ( home.addr , main_activity ) library ( kableExtra ) kable ( cross_table , caption = 'Cross Tabulation' ) %>% kable_styling ( full_width = F ) %>% column_spec ( 1 , bold = T ) %>% collapse_rows ( columns = 1 : 2 , valign = \"middle\" ) %>% scroll_box () Cross Tabulation home.addr main_activity avg.travel.time avg.in.time.diff median.in.time.diff New House IN_VEHICLE 1285.0264 -1.800000 -3 New House ON_BICYCLE 1547.5557 -4.000000 -6 New House ON_FOOT 1695.7091 5.285714 5 Old House IN_VEHICLE 771.1752 2.857143 -4 Old House ON_BICYCLE 1029.6329 14.941176 18 Old House ON_FOOT 1170.4783 17.433628 17","title":"Cross-tabulation"},{"location":"R/multivariateAnalysis/#scatter-plots","text":"Scatter plots show how much one variable is affected by another. To see how travelling time affects in-time ggplot ( travel , aes ( x = diff.in.time , y = travelling.time , color = main_activity )) + geom_point ( show.legend = TRUE ) + labs ( x = 'In-time difference (Minutes)' , y = 'Travelling time (seconds)' , title = \"Travelling time vs in-time\" , color = 'Mode of transport' ) + theme_minimal () + theme ( legend.position = \"bottom\" ) From the above graph, I can see that: 1. For bicycle, as travelling time decreases(low traffic) in-time difference increases(coming earlier to office) 2. There seems to be no relationship between travelling time (traffic) and in-time difference when on foot. 3. Travelling time has little affect on it-time difference when travelling on vehicle. To see how hours worked(on previous day) affects in-time From the above graph, I can observe that irrespective of mode of transport, my in-time difference increases (coming earlier to office) as hours worked on the previous day increases.","title":"Scatter plots"},{"location":"R/multivariateAnalysis/#box-plots","text":"Similarly, I want to see how mode of transport affects in-time difference. For categorical variable, box plots display this information in the most ideal manner. ggplot ( travel , aes ( x = main_activity , y = diff.in.time , group = main_activity )) + geom_boxplot () + labs ( x = 'Mode of transport' , y = 'In time difference (min)' ) + theme_minimal () From the above graph, I can observe that: 1. On vehicle, I went to office on average, ~12 minutes after the policy in-time (in-time difference is -12) 2. On cycle, I went to office almost close to the policy in-time 3. While walking, I was almost always before the policy in-time Similarly for place of residence. From this graph, I can understand that from New house I was close to ~5 minutes after the policy in-time while I used to be on-time while living in Old house. Created using R Markdown. Credits: Thinkstats Experimental Design and Analysis","title":"Box plots"},{"location":"R/time-series/","text":"MathJax.Hub.Config({ extensions: [\"tex2jax.js\",\"TeX/AMSmath.js\",\"TeX/AMSsymbols.js\"], jax: [\"input/TeX\", \"output/HTML-CSS\"], tex2jax: { inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ], displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"] ], }, \"HTML-CSS\": { availableFonts: [\"TeX\"] } }); Time Series \u00b6 A time series is a series of data points captured in time order. Most commonly, a time series is a sequence taken at successive equally spaced points in time. This post is the first in a series of blogs on time series methods and forecasting. In this blog, we will discuss about stationarity, random walk, deterministic drift and other vocabulary which form as foundation to time series: Stochastic processes \u00b6 A random or stochastic process is a collection of random variables ordered in time. It is denoted as \\(Y_t\\) . For example, in-time of an employee is a stochastic process. How is in-time a stochastic process? Consider the in-time on a particular day is 9:00 AM. In theory, the in-time could be any particular value which depends on many factors like traffic, work load, weather etc. The figure 9:00 AM is a particular realization of many such possibilities. Therefore we can say that in-time is a stochastic process where as the actual values observed are a particular realization (sample) of the process. Stationary Processes \u00b6 A stochastic process is said to be stationary if the following conditions are met: 1. Mean is constant over time 2. Variance is constant over time 3. Value of the co-variance between two time periods depends only on the distance or gap or lag between the two time periods and not the actual time at which the co variance is computed This type of process is also called weakly stationary, or co variance stationary, or second-order stationary or wide sense stationary process. Written mathematically, the conditions are: $$ Mean: E(Y_t) = \\mu $$ $$ Variance: var(Y_t) = E(Y_t-\\mu)^2 = \\sigma^2 $$ $$ Covariance: \\gamma_k = E[(Y_y - \\mu)(Y_{t+k} - \\mu)] $$ Purely random or white noise process \u00b6 A stochastic process is purely random if it has zero mean, constant variance, and is serially uncorrelated. An example of white noise is the error term in a linear regression which has zero mean, constant standard deviation and no auto-correlation. Simulation \u00b6 For simulating a stationary process, I am creating 100 realizations(samples) and comparing their mean, variance and co-variance. The data for 6 days and 5 realizations is shown: Samples of Stationary process date realization_1 realization_2 realization_25 realization_50 realization_100 1 2021-08-22 0.8567523 0.0640669 0.7249642 0.3505523 0.8072590 2 2021-08-23 0.1086189 0.3813137 0.5232923 0.4626156 0.7855022 3 2021-08-24 0.4652674 0.3546999 0.2091995 0.2395056 0.9567884 10 2021-08-31 0.8191081 0.1502863 0.1491222 0.6095235 0.3435151 15 2021-09-05 0.9950261 0.1406165 0.1177429 0.9329218 0.4191168 30 2021-09-20 0.8800055 0.9952208 0.7189119 0.7209880 0.6886932 The mean, variance and co-variance between the samples (realizations) across are as follows: For a stationary process, the mean, variance and co variance are constant. Non-stationary Processes \u00b6 If a time series is not stationary, it is called a non-stationary time series. In other words, a non-stationary time series will have a time-varying mean or a time-varying variance or both. Random walk, random walk with drift etc are examples of non-stationary processes. Random walk \u00b6 Suppose \\(\\epsilon_t\\) is a white noise error term with mean 0 and variance \\(\u03c3_2\\) . Then the series \\(Y_t\\) is said to be a random walk if $$ Y_t = Y_{t\u22121} + \\epsilon_t $$ In the random walk model, the value of Y at time t is equal to its value at time (t \u2212 1) plus a random shock. For a random walk, $$ Y_1 = Y_0 + \\epsilon_1 $$ $$ Y_2 = Y_1 + \\epsilon_2 = Y_0 + \\epsilon_1 + \\epsilon_2 $$ $$ Y_3 = Y_2 + \\epsilon_3 = Y_0 + \\epsilon_1 + \\epsilon_2 + \\epsilon_3 $$ and so on.. In general we could write $$ Y_t = Y_0 + \\sum \\epsilon_t $$ As $$ E(Y_t) = E(Y_0 + \\sum \\epsilon_t) = Y_0 $$ $$ var(Y_t) = t\\times \\sigma^2 $$ Although the mean is constant with time, the variance is proportional to time. For simulating a random walk process, I am creating 100 realizations(samples) and comparing their mean, variance and co-variance. The data for 6 days of 5 realizations (samples) is shown: Samples of Random walk process date realization_1 realization_2 realization_25 realization_50 realization_100 1 2021-08-22 4.0000000 4.000000 4.000000 4.000000 4.000000 2 2021-08-23 2.8539208 3.176672 5.446530 5.983017 4.092452 3 2021-08-24 2.9712968 2.009320 5.349939 5.785329 3.451442 10 2021-08-31 -0.7251274 2.289063 2.809076 7.623148 3.587220 15 2021-09-05 -0.5766986 2.559916 5.796322 11.124585 3.992667 30 2021-09-20 0.8613258 6.340583 7.554369 12.667196 9.039007 The mean, variance and covariances between the samples (realizations) across time would look like follows: From the above plot, the mean of Y is equal to its initial, or starting value, which is constant, but as t increases, its variance increases indefinitely, thus violating a condition of stationarity. A random walk process is also called as a unit root process . Random walk with drift \u00b6 If the random walk model predicts that the value at time t will equal the last period's value plus a constant, or drift ( \\(\\delta\\) ), and a white noise term ( \\(\u03b5_t\\) ), then the process is random walk with a drift. $$ Y_t = \\delta + Y_{t\u22121} + \\epsilon_t $$ The mean $$ E(Y_t) = E(Y_0 + \\sum \\epsilon_t + \\delta) = Y_0 + t\\times\\delta $$ so mean is dependent on time and the variance $$ var(Y_t) = t\\times \\sigma^2 $$ is also dependent on time. As random walk with drift violates the conditions of stationary process, it is a non-stationary process. Samples of Random walk with drift process date realization_1 realization_2 realization_25 realization_50 realization_100 1 2021-08-22 4.000000 4.000000 4.000000 4.000000 4.000000 2 2021-08-23 5.801028 5.137174 5.133682 4.186611 4.148583 3 2021-08-24 5.668875 5.741908 4.304969 1.706955 4.467738 10 2021-08-31 11.843748 12.207555 6.289473 5.411678 6.595657 15 2021-09-05 15.982235 15.516312 10.664175 5.937640 11.215054 30 2021-09-20 25.507838 22.875968 20.498484 11.750327 16.976809 The mean, variance and the co-variance are all dependent on time. Unit root stochastic process \u00b6 Unit root stochastic process is another name for Random walk process. A random walk process can be written as $$ Y_t = \\rho \\times Y_{t\u22121} + \\epsilon_t $$ Where \\(\\rho = 1\\) . If \\(|\\rho| < 1\\) then the process represents Markov first order auto regressive model which is stationary. Only for \\(\\rho = 1\\) we get non-stationary. The distribution of mean, variance and co-variance for \\(\\rho =0.5\\) is Deterministic trend process \u00b6 In the above random walk and random walk with drift, the trend component is stochastic in nature. If instead the trend is deterministic in nature, it will follow a deterministic trend process. $$ Y_t = \u03b2_1 + \u03b2_2\\times t + \\epsilon_t$$ In a deterministic trend process, the mean is \\(\u03b2_1 + \u03b2_2\\times t\\) which is proportional with time but the variance is constant. This type of process is also called as trend seasonality as subtracting mean of \\(Y_t\\) from \\(Y_t\\) will give us a stationary process. This procedure is called de-trending. Samples of Deterministic trend process date realization_1 realization_2 realization_25 realization_50 realization_100 1 2021-08-22 0.6408252 0.4380591 3.145050 0.5609335 1.175747 2 2021-08-23 0.7580409 1.5146209 1.939386 2.3880532 2.137324 3 2021-08-24 1.7964618 4.6772129 5.069398 4.7261802 2.939012 10 2021-08-31 7.7861035 9.3627214 8.584801 10.7855074 9.830755 15 2021-09-05 15.8649412 14.2029992 15.279319 13.5478111 14.647241 30 2021-09-20 30.9469391 30.6891297 29.446486 28.9586901 31.170632 A combination of deterministic and stochastic trend could also exist in a process. Comparison. \u00b6 A comparison of all the processes is shown below: References \u00b6 Basic Ecnometrics - Damodar N Gujarati (textbook for reference) Business Analytics: The Science of Data-Driven Decision Making - Dinesh Kumar (textbook for reference) Customer Analytics at Flipkart.Com - Naveen Bhansali (case study in Harvard business review)","title":"Introduction to stationarity (Python)"},{"location":"R/time-series/#time-series","text":"A time series is a series of data points captured in time order. Most commonly, a time series is a sequence taken at successive equally spaced points in time. This post is the first in a series of blogs on time series methods and forecasting. In this blog, we will discuss about stationarity, random walk, deterministic drift and other vocabulary which form as foundation to time series:","title":"Time Series"},{"location":"R/time-series/#stochastic-processes","text":"A random or stochastic process is a collection of random variables ordered in time. It is denoted as \\(Y_t\\) . For example, in-time of an employee is a stochastic process. How is in-time a stochastic process? Consider the in-time on a particular day is 9:00 AM. In theory, the in-time could be any particular value which depends on many factors like traffic, work load, weather etc. The figure 9:00 AM is a particular realization of many such possibilities. Therefore we can say that in-time is a stochastic process where as the actual values observed are a particular realization (sample) of the process.","title":"Stochastic processes"},{"location":"R/time-series/#stationary-processes","text":"A stochastic process is said to be stationary if the following conditions are met: 1. Mean is constant over time 2. Variance is constant over time 3. Value of the co-variance between two time periods depends only on the distance or gap or lag between the two time periods and not the actual time at which the co variance is computed This type of process is also called weakly stationary, or co variance stationary, or second-order stationary or wide sense stationary process. Written mathematically, the conditions are: $$ Mean: E(Y_t) = \\mu $$ $$ Variance: var(Y_t) = E(Y_t-\\mu)^2 = \\sigma^2 $$ $$ Covariance: \\gamma_k = E[(Y_y - \\mu)(Y_{t+k} - \\mu)] $$","title":"Stationary Processes"},{"location":"R/time-series/#purely-random-or-white-noise-process","text":"A stochastic process is purely random if it has zero mean, constant variance, and is serially uncorrelated. An example of white noise is the error term in a linear regression which has zero mean, constant standard deviation and no auto-correlation.","title":"Purely random or white noise process"},{"location":"R/time-series/#simulation","text":"For simulating a stationary process, I am creating 100 realizations(samples) and comparing their mean, variance and co-variance. The data for 6 days and 5 realizations is shown: Samples of Stationary process date realization_1 realization_2 realization_25 realization_50 realization_100 1 2021-08-22 0.8567523 0.0640669 0.7249642 0.3505523 0.8072590 2 2021-08-23 0.1086189 0.3813137 0.5232923 0.4626156 0.7855022 3 2021-08-24 0.4652674 0.3546999 0.2091995 0.2395056 0.9567884 10 2021-08-31 0.8191081 0.1502863 0.1491222 0.6095235 0.3435151 15 2021-09-05 0.9950261 0.1406165 0.1177429 0.9329218 0.4191168 30 2021-09-20 0.8800055 0.9952208 0.7189119 0.7209880 0.6886932 The mean, variance and co-variance between the samples (realizations) across are as follows: For a stationary process, the mean, variance and co variance are constant.","title":"Simulation"},{"location":"R/time-series/#non-stationary-processes","text":"If a time series is not stationary, it is called a non-stationary time series. In other words, a non-stationary time series will have a time-varying mean or a time-varying variance or both. Random walk, random walk with drift etc are examples of non-stationary processes.","title":"Non-stationary Processes"},{"location":"R/time-series/#random-walk","text":"Suppose \\(\\epsilon_t\\) is a white noise error term with mean 0 and variance \\(\u03c3_2\\) . Then the series \\(Y_t\\) is said to be a random walk if $$ Y_t = Y_{t\u22121} + \\epsilon_t $$ In the random walk model, the value of Y at time t is equal to its value at time (t \u2212 1) plus a random shock. For a random walk, $$ Y_1 = Y_0 + \\epsilon_1 $$ $$ Y_2 = Y_1 + \\epsilon_2 = Y_0 + \\epsilon_1 + \\epsilon_2 $$ $$ Y_3 = Y_2 + \\epsilon_3 = Y_0 + \\epsilon_1 + \\epsilon_2 + \\epsilon_3 $$ and so on.. In general we could write $$ Y_t = Y_0 + \\sum \\epsilon_t $$ As $$ E(Y_t) = E(Y_0 + \\sum \\epsilon_t) = Y_0 $$ $$ var(Y_t) = t\\times \\sigma^2 $$ Although the mean is constant with time, the variance is proportional to time. For simulating a random walk process, I am creating 100 realizations(samples) and comparing their mean, variance and co-variance. The data for 6 days of 5 realizations (samples) is shown: Samples of Random walk process date realization_1 realization_2 realization_25 realization_50 realization_100 1 2021-08-22 4.0000000 4.000000 4.000000 4.000000 4.000000 2 2021-08-23 2.8539208 3.176672 5.446530 5.983017 4.092452 3 2021-08-24 2.9712968 2.009320 5.349939 5.785329 3.451442 10 2021-08-31 -0.7251274 2.289063 2.809076 7.623148 3.587220 15 2021-09-05 -0.5766986 2.559916 5.796322 11.124585 3.992667 30 2021-09-20 0.8613258 6.340583 7.554369 12.667196 9.039007 The mean, variance and covariances between the samples (realizations) across time would look like follows: From the above plot, the mean of Y is equal to its initial, or starting value, which is constant, but as t increases, its variance increases indefinitely, thus violating a condition of stationarity. A random walk process is also called as a unit root process .","title":"Random walk"},{"location":"R/time-series/#random-walk-with-drift","text":"If the random walk model predicts that the value at time t will equal the last period's value plus a constant, or drift ( \\(\\delta\\) ), and a white noise term ( \\(\u03b5_t\\) ), then the process is random walk with a drift. $$ Y_t = \\delta + Y_{t\u22121} + \\epsilon_t $$ The mean $$ E(Y_t) = E(Y_0 + \\sum \\epsilon_t + \\delta) = Y_0 + t\\times\\delta $$ so mean is dependent on time and the variance $$ var(Y_t) = t\\times \\sigma^2 $$ is also dependent on time. As random walk with drift violates the conditions of stationary process, it is a non-stationary process. Samples of Random walk with drift process date realization_1 realization_2 realization_25 realization_50 realization_100 1 2021-08-22 4.000000 4.000000 4.000000 4.000000 4.000000 2 2021-08-23 5.801028 5.137174 5.133682 4.186611 4.148583 3 2021-08-24 5.668875 5.741908 4.304969 1.706955 4.467738 10 2021-08-31 11.843748 12.207555 6.289473 5.411678 6.595657 15 2021-09-05 15.982235 15.516312 10.664175 5.937640 11.215054 30 2021-09-20 25.507838 22.875968 20.498484 11.750327 16.976809 The mean, variance and the co-variance are all dependent on time.","title":"Random walk with drift"},{"location":"R/time-series/#unit-root-stochastic-process","text":"Unit root stochastic process is another name for Random walk process. A random walk process can be written as $$ Y_t = \\rho \\times Y_{t\u22121} + \\epsilon_t $$ Where \\(\\rho = 1\\) . If \\(|\\rho| < 1\\) then the process represents Markov first order auto regressive model which is stationary. Only for \\(\\rho = 1\\) we get non-stationary. The distribution of mean, variance and co-variance for \\(\\rho =0.5\\) is","title":"Unit root stochastic process"},{"location":"R/time-series/#deterministic-trend-process","text":"In the above random walk and random walk with drift, the trend component is stochastic in nature. If instead the trend is deterministic in nature, it will follow a deterministic trend process. $$ Y_t = \u03b2_1 + \u03b2_2\\times t + \\epsilon_t$$ In a deterministic trend process, the mean is \\(\u03b2_1 + \u03b2_2\\times t\\) which is proportional with time but the variance is constant. This type of process is also called as trend seasonality as subtracting mean of \\(Y_t\\) from \\(Y_t\\) will give us a stationary process. This procedure is called de-trending. Samples of Deterministic trend process date realization_1 realization_2 realization_25 realization_50 realization_100 1 2021-08-22 0.6408252 0.4380591 3.145050 0.5609335 1.175747 2 2021-08-23 0.7580409 1.5146209 1.939386 2.3880532 2.137324 3 2021-08-24 1.7964618 4.6772129 5.069398 4.7261802 2.939012 10 2021-08-31 7.7861035 9.3627214 8.584801 10.7855074 9.830755 15 2021-09-05 15.8649412 14.2029992 15.279319 13.5478111 14.647241 30 2021-09-20 30.9469391 30.6891297 29.446486 28.9586901 31.170632 A combination of deterministic and stochastic trend could also exist in a process.","title":"Deterministic trend process"},{"location":"R/time-series/#comparison","text":"A comparison of all the processes is shown below:","title":"Comparison."},{"location":"R/time-series/#references","text":"Basic Ecnometrics - Damodar N Gujarati (textbook for reference) Business Analytics: The Science of Data-Driven Decision Making - Dinesh Kumar (textbook for reference) Customer Analytics at Flipkart.Com - Naveen Bhansali (case study in Harvard business review)","title":"References"},{"location":"reference/abbreviations/","text":"Abbreviations \u00b6 Technical documentation often incurs the usage of a lot of acronyms, which may need additional explanation, especially for new user of your project. For these matters, Material for MkDocs uses a combination of Markdown extensions to enable site-wide glossaries. Configuration \u00b6 Abbreviations \u00b6 Source \u00b7 Extension The Abbreviations extension, which is part of the standard Markdown library, allows to add additional content to parts of the text which are then shown on hover , e.g. for glossaries: markdown_extensions : - abbr Snippets \u00b6 The Snippets extension, which is part of Python Markdown Extensions , allows to insert content from other files or other, regular content, and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.snippets Usage \u00b6 Adding abbreviations \u00b6 When the Abbreviations extension is enabled, abbreviations can be defined with a special syntax similar to URLs and footnotes at any point in the Markdown document. Example : The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium Result : The HTML specification is maintained by the W3C . Adding a glossary \u00b6 When Snippets is enabled, content from other files can be embedded, which is especially useful to include abbreviations from a central file \u2013 a glossary \u2013 and embed them into any other file. Example : docs/page.md The HTML specification is maintained by the W3C. --8<-- \"includes/abbreviations.md\" includes/abbreviations.md *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium Result : The HTML specification is maintained by the W3C . Remember to locate the Markdown file containing the definitions outside of the docs folder (here includes is used), or MkDocs may complain about an unreferenced file.","title":"Abbreviations"},{"location":"reference/abbreviations/#abbreviations","text":"Technical documentation often incurs the usage of a lot of acronyms, which may need additional explanation, especially for new user of your project. For these matters, Material for MkDocs uses a combination of Markdown extensions to enable site-wide glossaries.","title":"Abbreviations"},{"location":"reference/abbreviations/#configuration","text":"","title":"Configuration"},{"location":"reference/abbreviations/#abbreviations_1","text":"Source \u00b7 Extension The Abbreviations extension, which is part of the standard Markdown library, allows to add additional content to parts of the text which are then shown on hover , e.g. for glossaries: markdown_extensions : - abbr","title":"Abbreviations"},{"location":"reference/abbreviations/#snippets","text":"The Snippets extension, which is part of Python Markdown Extensions , allows to insert content from other files or other, regular content, and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.snippets","title":"Snippets"},{"location":"reference/abbreviations/#usage","text":"","title":"Usage"},{"location":"reference/abbreviations/#adding-abbreviations","text":"When the Abbreviations extension is enabled, abbreviations can be defined with a special syntax similar to URLs and footnotes at any point in the Markdown document. Example : The HTML specification is maintained by the W3C. *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium Result : The HTML specification is maintained by the W3C .","title":"Adding abbreviations"},{"location":"reference/abbreviations/#adding-a-glossary","text":"When Snippets is enabled, content from other files can be embedded, which is especially useful to include abbreviations from a central file \u2013 a glossary \u2013 and embed them into any other file. Example : docs/page.md The HTML specification is maintained by the W3C. --8<-- \"includes/abbreviations.md\" includes/abbreviations.md *[HTML]: Hyper Text Markup Language *[W3C]: World Wide Web Consortium Result : The HTML specification is maintained by the W3C . Remember to locate the Markdown file containing the definitions outside of the docs folder (here includes is used), or MkDocs may complain about an unreferenced file.","title":"Adding a glossary"},{"location":"reference/admonitions/","text":"Admonitions \u00b6 Admonitions, also known as call-outs , are an excellent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several different types of admonitions and allows for the inclusion and nesting of arbitrary content. Configuration \u00b6 Admonition \u00b6 Source \u00b7 Extension The Admonition extension, which is part of the standard Markdown library, is integrated with Material for MkDocs and can be enabled via mkdocs.yml : markdown_extensions : - admonition Details \u00b6 Source \u00b7 Extension The Details extension, which is part of Python Markdown Extensions , adds the ability to make admonitions collapsible . It can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.details SuperFences \u00b6 The SuperFences extension, which is also part of Python Markdown Extensions , allows for the nesting of code and content blocks inside admonitions , and is therefore strongly recommended: markdown_extensions : - pymdownx.superfences Usage \u00b6 Admonitions follow a simple syntax: a block must start with !!! , followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces. Example : !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Changing the title \u00b6 By default, the title will equal the type qualifier in titlecase. However, it can be changed by adding a quoted string containing valid Markdown (including links, formatting, ...) after the type qualifier. Example : !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Removing the title \u00b6 Similar to changing the title , the icon and title can be omitted entirely by adding an empty string directly after the type qualifier. Note that this will not work for collapsible blocks . Example : !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Embedded content \u00b6 Admonitions can contain all kinds of text content, including headlines, lists, paragraphs and other blocks. While the parser from the standard Markdown library doesn't account for nested blocks, the SuperFences extension adds the ability to nest arbitrary content inside admonitions. Example : !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` python def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Result : Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Collapsible blocks \u00b6 The Details extension adds support for rendering collapsible admonition blocks. This is useful for FAQs or content that is of secondary nature. A details block follows the syntax and semantics of admonition blocks, but must start with ??? . Example : ??? note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Adding a + after ??? will render the block as open on page load: Example : ???+ note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Inline blocks \u00b6 Source \u00b7 Experimental Admonitions and Details can also be rendered as inline blocks (i.e. sidebars), placing them to the right using the inline + end modifiers, or to the left using only the inline modifier. Important : Admonitions that use the inline modifiers must be declared prior to the content block you want to place them beside. If there's insufficient space to render the admonition next to the block, the admonition will stretch to the full width of the viewport, e.g. on mobile viewports. inline end Example / Result : Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. !!! info inline end Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Use inline end to align to the right (left for rtl languages). inline Example / Result : Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. !!! info inline Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Use inline to align to the left (right for rtl languages). Supported types \u00b6 Following is a list of type qualifiers provided by Material for MkDocs, whereas the default type, and thus fallback for unknown type qualifiers, is note : note , seealso 1 Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. abstract , summary , tldr Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. info , todo Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. tip , hint , important Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. success , check , done Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. question , help , faq Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. warning , caution , attention Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. failure , fail , missing Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. danger , error Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. bug Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. example Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. quote , cite Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Changing the icons \u00b6 Source \u00b7 Insiders only Each of the supported admonition types has a distinct icon, which can be changed to any icon bundled with the theme. Just set the name of the admonition type to a valid icon in mkdocs.yml : Octicons Example : theme : icon : admonition : note : octicons/tag-16 abstract : octicons/checklist-16 info : octicons/info-16 tip : octicons/squirrel-16 success : octicons/check-16 question : octicons/question-16 warning : octicons/alert-16 failure : octicons/x-circle-16 danger : octicons/zap-16 bug : octicons/bug-16 example : octicons/beaker-16 quote : octicons/quote-16 Result : FontAwesome Example : theme : icon : admonition : note : fontawesome/solid/sticky-note abstract : fontawesome/solid/book info : fontawesome/solid/info-circle tip : fontawesome/solid/bullhorn success : fontawesome/solid/check question : fontawesome/solid/question-circle warning : fontawesome/solid/exclamation-triangle failure : fontawesome/solid/bomb danger : fontawesome/solid/skull bug : fontawesome/solid/robot example : fontawesome/solid/flask quote : fontawesome/solid/quote-left Result : Customization \u00b6 Custom admonitions \u00b6 If you want to add a custom admonition type, all you need is a color and an svg icon. Copy the icon's svg code from the .icons folder and add the following CSS to an additional stylesheet : : root { --md-admonition-icon--pied-piper : url ( 'data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M244 246c-3.2-2-6.3-2.9-10.1-2.9-6.6 0-12.6 3.2-19.3 3.7l1.7 4.9zm135.9 197.9c-19 0-64.1 9.5-79.9 19.8l6.9 45.1c35.7 6.1 70.1 3.6 106-9.8-4.8-10-23.5-55.1-33-55.1zM340.8 177c6.6 2.8 11.5 9.2 22.7 22.1 2-1.4 7.5-5.2 7.5-8.6 0-4.9-11.8-13.2-13.2-23 11.2-5.7 25.2-6 37.6-8.9 68.1-16.4 116.3-52.9 146.8-116.7C548.3 29.3 554 16.1 554.6 2l-2 2.6c-28.4 50-33 63.2-81.3 100-31.9 24.4-69.2 40.2-106.6 54.6l-6.3-.3v-21.8c-19.6 1.6-19.7-14.6-31.6-23-18.7 20.6-31.6 40.8-58.9 51.1-12.7 4.8-19.6 10-25.9 21.8 34.9-16.4 91.2-13.5 98.8-10zM555.5 0l-.6 1.1-.3.9.6-.6zm-59.2 382.1c-33.9-56.9-75.3-118.4-150-115.5l-.3-6c-1.1-13.5 32.8 3.2 35.1-31l-14.4 7.2c-19.8-45.7-8.6-54.3-65.5-54.3-14.7 0-26.7 1.7-41.4 4.6 2.9 18.6 2.2 36.7-10.9 50.3l19.5 5.5c-1.7 3.2-2.9 6.3-2.9 9.8 0 21 42.8 2.9 42.8 33.6 0 18.4-36.8 60.1-54.9 60.1-8 0-53.7-50-53.4-60.1l.3-4.6 52.3-11.5c13-2.6 12.3-22.7-2.9-22.7-3.7 0-43.1 9.2-49.4 10.6-2-5.2-7.5-14.1-13.8-14.1-3.2 0-6.3 3.2-9.5 4-9.2 2.6-31 2.9-21.5 20.1L15.9 298.5c-5.5 1.1-8.9 6.3-8.9 11.8 0 6 5.5 10.9 11.5 10.9 8 0 131.3-28.4 147.4-32.2 2.6 3.2 4.6 6.3 7.8 8.6 20.1 14.4 59.8 85.9 76.4 85.9 24.1 0 58-22.4 71.3-41.9 3.2-4.3 6.9-7.5 12.4-6.9.6 13.8-31.6 34.2-33 43.7-1.4 10.2-1 35.2-.3 41.1 26.7 8.1 52-3.6 77.9-2.9 4.3-21 10.6-41.9 9.8-63.5l-.3-9.5c-1.4-34.2-10.9-38.5-34.8-58.6-1.1-1.1-2.6-2.6-3.7-4 2.2-1.4 1.1-1 4.6-1.7 88.5 0 56.3 183.6 111.5 229.9 33.1-15 72.5-27.9 103.5-47.2-29-25.6-52.6-45.7-72.7-79.9zm-196.2 46.1v27.2l11.8-3.4-2.9-23.8zm-68.7-150.4l24.1 61.2 21-13.8-31.3-50.9zm84.4 154.9l2 12.4c9-1.5 58.4-6.6 58.4-14.1 0-1.4-.6-3.2-.9-4.6-26.8 0-36.9 3.8-59.5 6.3z\"/></svg>' ) } . md-typeset . admonition . pied-piper , . md-typeset details . pied-piper { border-color : rgb ( 43 , 155 , 70 ); } . md-typeset . pied-piper > . admonition-title , . md-typeset . pied-piper > summary { background-color : rgba ( 43 , 155 , 70 , 0.1 ); border-color : rgb ( 43 , 155 , 70 ); } . md-typeset . pied-piper > . admonition-title :: before , . md-typeset . pied-piper > summary :: before { background-color : rgb ( 43 , 155 , 70 ); -webkit- mask-image : var ( --md-admonition-icon--pied-piper ); mask-image : var ( --md-admonition-icon--pied-piper ); } You should now be able to create an admonition of the pied-piper type. Note that you can also use this technique to override existing admonition icons or colors. You can even add animations . :root { --md-admonition-icon--pied-piper: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M244 246c-3.2-2-6.3-2.9-10.1-2.9-6.6 0-12.6 3.2-19.3 3.7l1.7 4.9zm135.9 197.9c-19 0-64.1 9.5-79.9 19.8l6.9 45.1c35.7 6.1 70.1 3.6 106-9.8-4.8-10-23.5-55.1-33-55.1zM340.8 177c6.6 2.8 11.5 9.2 22.7 22.1 2-1.4 7.5-5.2 7.5-8.6 0-4.9-11.8-13.2-13.2-23 11.2-5.7 25.2-6 37.6-8.9 68.1-16.4 116.3-52.9 146.8-116.7C548.3 29.3 554 16.1 554.6 2l-2 2.6c-28.4 50-33 63.2-81.3 100-31.9 24.4-69.2 40.2-106.6 54.6l-6.3-.3v-21.8c-19.6 1.6-19.7-14.6-31.6-23-18.7 20.6-31.6 40.8-58.9 51.1-12.7 4.8-19.6 10-25.9 21.8 34.9-16.4 91.2-13.5 98.8-10zM555.5 0l-.6 1.1-.3.9.6-.6zm-59.2 382.1c-33.9-56.9-75.3-118.4-150-115.5l-.3-6c-1.1-13.5 32.8 3.2 35.1-31l-14.4 7.2c-19.8-45.7-8.6-54.3-65.5-54.3-14.7 0-26.7 1.7-41.4 4.6 2.9 18.6 2.2 36.7-10.9 50.3l19.5 5.5c-1.7 3.2-2.9 6.3-2.9 9.8 0 21 42.8 2.9 42.8 33.6 0 18.4-36.8 60.1-54.9 60.1-8 0-53.7-50-53.4-60.1l.3-4.6 52.3-11.5c13-2.6 12.3-22.7-2.9-22.7-3.7 0-43.1 9.2-49.4 10.6-2-5.2-7.5-14.1-13.8-14.1-3.2 0-6.3 3.2-9.5 4-9.2 2.6-31 2.9-21.5 20.1L15.9 298.5c-5.5 1.1-8.9 6.3-8.9 11.8 0 6 5.5 10.9 11.5 10.9 8 0 131.3-28.4 147.4-32.2 2.6 3.2 4.6 6.3 7.8 8.6 20.1 14.4 59.8 85.9 76.4 85.9 24.1 0 58-22.4 71.3-41.9 3.2-4.3 6.9-7.5 12.4-6.9.6 13.8-31.6 34.2-33 43.7-1.4 10.2-1 35.2-.3 41.1 26.7 8.1 52-3.6 77.9-2.9 4.3-21 10.6-41.9 9.8-63.5l-.3-9.5c-1.4-34.2-10.9-38.5-34.8-58.6-1.1-1.1-2.6-2.6-3.7-4 2.2-1.4 1.1-1 4.6-1.7 88.5 0 56.3 183.6 111.5 229.9 33.1-15 72.5-27.9 103.5-47.2-29-25.6-52.6-45.7-72.7-79.9zm-196.2 46.1v27.2l11.8-3.4-2.9-23.8zm-68.7-150.4l24.1 61.2 21-13.8-31.3-50.9zm84.4 154.9l2 12.4c9-1.5 58.4-6.6 58.4-14.1 0-1.4-.6-3.2-.9-4.6-26.8 0-36.9 3.8-59.5 6.3z\"/></svg>') } .md-typeset .admonition.pied-piper, .md-typeset details.pied-piper { border-color: rgb(43, 155, 70); } .md-typeset .pied-piper > .admonition-title, .md-typeset .pied-piper > summary { background-color: rgba(43, 155, 70, 0.1); border-color: rgb(43, 155, 70); } .md-typeset .pied-piper > .admonition-title::before, .md-typeset .pied-piper > summary::before { background-color: rgb(43, 155, 70); -webkit-mask-image: var(--md-admonition-icon--pied-piper); mask-image: var(--md-admonition-icon--pied-piper); } Example : !!! pied-piper \"Pied Piper\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Pied Piper Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. The seealso qualifier was originally adapted from the readthedocs theme, in order to make it easier for authors to migrate to Material for MkDocs. However, when the title is omitted, the admonition extension will render it as Seealso , which is incorrect English. For this reason, it was deprecated as of 7.1.5 and will be removed in 8.x. \u21a9","title":"Admonitions"},{"location":"reference/admonitions/#admonitions","text":"Admonitions, also known as call-outs , are an excellent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several different types of admonitions and allows for the inclusion and nesting of arbitrary content.","title":"Admonitions"},{"location":"reference/admonitions/#configuration","text":"","title":"Configuration"},{"location":"reference/admonitions/#admonition","text":"Source \u00b7 Extension The Admonition extension, which is part of the standard Markdown library, is integrated with Material for MkDocs and can be enabled via mkdocs.yml : markdown_extensions : - admonition","title":"Admonition"},{"location":"reference/admonitions/#details","text":"Source \u00b7 Extension The Details extension, which is part of Python Markdown Extensions , adds the ability to make admonitions collapsible . It can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.details","title":"Details"},{"location":"reference/admonitions/#superfences","text":"The SuperFences extension, which is also part of Python Markdown Extensions , allows for the nesting of code and content blocks inside admonitions , and is therefore strongly recommended: markdown_extensions : - pymdownx.superfences","title":"SuperFences"},{"location":"reference/admonitions/#usage","text":"Admonitions follow a simple syntax: a block must start with !!! , followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces. Example : !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Usage"},{"location":"reference/admonitions/#changing-the-title","text":"By default, the title will equal the type qualifier in titlecase. However, it can be changed by adding a quoted string containing valid Markdown (including links, formatting, ...) after the type qualifier. Example : !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Changing the title"},{"location":"reference/admonitions/#removing-the-title","text":"Similar to changing the title , the icon and title can be omitted entirely by adding an empty string directly after the type qualifier. Note that this will not work for collapsible blocks . Example : !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Removing the title"},{"location":"reference/admonitions/#embedded-content","text":"Admonitions can contain all kinds of text content, including headlines, lists, paragraphs and other blocks. While the parser from the standard Markdown library doesn't account for nested blocks, the SuperFences extension adds the ability to nest arbitrary content inside admonitions. Example : !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. ``` python def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Result : Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.","title":"Embedded content"},{"location":"reference/admonitions/#collapsible-blocks","text":"The Details extension adds support for rendering collapsible admonition blocks. This is useful for FAQs or content that is of secondary nature. A details block follows the syntax and semantics of admonition blocks, but must start with ??? . Example : ??? note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Adding a + after ??? will render the block as open on page load: Example : ???+ note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Collapsible blocks"},{"location":"reference/admonitions/#inline-blocks","text":"Source \u00b7 Experimental Admonitions and Details can also be rendered as inline blocks (i.e. sidebars), placing them to the right using the inline + end modifiers, or to the left using only the inline modifier. Important : Admonitions that use the inline modifiers must be declared prior to the content block you want to place them beside. If there's insufficient space to render the admonition next to the block, the admonition will stretch to the full width of the viewport, e.g. on mobile viewports. inline end Example / Result : Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. !!! info inline end Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Use inline end to align to the right (left for rtl languages). inline Example / Result : Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. !!! info inline Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Use inline to align to the left (right for rtl languages).","title":"Inline blocks"},{"location":"reference/admonitions/#supported-types","text":"Following is a list of type qualifiers provided by Material for MkDocs, whereas the default type, and thus fallback for unknown type qualifiers, is note : note , seealso 1 Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. abstract , summary , tldr Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. info , todo Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. tip , hint , important Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. success , check , done Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. question , help , faq Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. warning , caution , attention Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. failure , fail , missing Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. danger , error Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. bug Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. example Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. quote , cite Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Supported types"},{"location":"reference/admonitions/#changing-the-icons","text":"Source \u00b7 Insiders only Each of the supported admonition types has a distinct icon, which can be changed to any icon bundled with the theme. Just set the name of the admonition type to a valid icon in mkdocs.yml : Octicons Example : theme : icon : admonition : note : octicons/tag-16 abstract : octicons/checklist-16 info : octicons/info-16 tip : octicons/squirrel-16 success : octicons/check-16 question : octicons/question-16 warning : octicons/alert-16 failure : octicons/x-circle-16 danger : octicons/zap-16 bug : octicons/bug-16 example : octicons/beaker-16 quote : octicons/quote-16 Result : FontAwesome Example : theme : icon : admonition : note : fontawesome/solid/sticky-note abstract : fontawesome/solid/book info : fontawesome/solid/info-circle tip : fontawesome/solid/bullhorn success : fontawesome/solid/check question : fontawesome/solid/question-circle warning : fontawesome/solid/exclamation-triangle failure : fontawesome/solid/bomb danger : fontawesome/solid/skull bug : fontawesome/solid/robot example : fontawesome/solid/flask quote : fontawesome/solid/quote-left Result :","title":"Changing the icons"},{"location":"reference/admonitions/#customization","text":"","title":"Customization"},{"location":"reference/admonitions/#custom-admonitions","text":"If you want to add a custom admonition type, all you need is a color and an svg icon. Copy the icon's svg code from the .icons folder and add the following CSS to an additional stylesheet : : root { --md-admonition-icon--pied-piper : url ( 'data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M244 246c-3.2-2-6.3-2.9-10.1-2.9-6.6 0-12.6 3.2-19.3 3.7l1.7 4.9zm135.9 197.9c-19 0-64.1 9.5-79.9 19.8l6.9 45.1c35.7 6.1 70.1 3.6 106-9.8-4.8-10-23.5-55.1-33-55.1zM340.8 177c6.6 2.8 11.5 9.2 22.7 22.1 2-1.4 7.5-5.2 7.5-8.6 0-4.9-11.8-13.2-13.2-23 11.2-5.7 25.2-6 37.6-8.9 68.1-16.4 116.3-52.9 146.8-116.7C548.3 29.3 554 16.1 554.6 2l-2 2.6c-28.4 50-33 63.2-81.3 100-31.9 24.4-69.2 40.2-106.6 54.6l-6.3-.3v-21.8c-19.6 1.6-19.7-14.6-31.6-23-18.7 20.6-31.6 40.8-58.9 51.1-12.7 4.8-19.6 10-25.9 21.8 34.9-16.4 91.2-13.5 98.8-10zM555.5 0l-.6 1.1-.3.9.6-.6zm-59.2 382.1c-33.9-56.9-75.3-118.4-150-115.5l-.3-6c-1.1-13.5 32.8 3.2 35.1-31l-14.4 7.2c-19.8-45.7-8.6-54.3-65.5-54.3-14.7 0-26.7 1.7-41.4 4.6 2.9 18.6 2.2 36.7-10.9 50.3l19.5 5.5c-1.7 3.2-2.9 6.3-2.9 9.8 0 21 42.8 2.9 42.8 33.6 0 18.4-36.8 60.1-54.9 60.1-8 0-53.7-50-53.4-60.1l.3-4.6 52.3-11.5c13-2.6 12.3-22.7-2.9-22.7-3.7 0-43.1 9.2-49.4 10.6-2-5.2-7.5-14.1-13.8-14.1-3.2 0-6.3 3.2-9.5 4-9.2 2.6-31 2.9-21.5 20.1L15.9 298.5c-5.5 1.1-8.9 6.3-8.9 11.8 0 6 5.5 10.9 11.5 10.9 8 0 131.3-28.4 147.4-32.2 2.6 3.2 4.6 6.3 7.8 8.6 20.1 14.4 59.8 85.9 76.4 85.9 24.1 0 58-22.4 71.3-41.9 3.2-4.3 6.9-7.5 12.4-6.9.6 13.8-31.6 34.2-33 43.7-1.4 10.2-1 35.2-.3 41.1 26.7 8.1 52-3.6 77.9-2.9 4.3-21 10.6-41.9 9.8-63.5l-.3-9.5c-1.4-34.2-10.9-38.5-34.8-58.6-1.1-1.1-2.6-2.6-3.7-4 2.2-1.4 1.1-1 4.6-1.7 88.5 0 56.3 183.6 111.5 229.9 33.1-15 72.5-27.9 103.5-47.2-29-25.6-52.6-45.7-72.7-79.9zm-196.2 46.1v27.2l11.8-3.4-2.9-23.8zm-68.7-150.4l24.1 61.2 21-13.8-31.3-50.9zm84.4 154.9l2 12.4c9-1.5 58.4-6.6 58.4-14.1 0-1.4-.6-3.2-.9-4.6-26.8 0-36.9 3.8-59.5 6.3z\"/></svg>' ) } . md-typeset . admonition . pied-piper , . md-typeset details . pied-piper { border-color : rgb ( 43 , 155 , 70 ); } . md-typeset . pied-piper > . admonition-title , . md-typeset . pied-piper > summary { background-color : rgba ( 43 , 155 , 70 , 0.1 ); border-color : rgb ( 43 , 155 , 70 ); } . md-typeset . pied-piper > . admonition-title :: before , . md-typeset . pied-piper > summary :: before { background-color : rgb ( 43 , 155 , 70 ); -webkit- mask-image : var ( --md-admonition-icon--pied-piper ); mask-image : var ( --md-admonition-icon--pied-piper ); } You should now be able to create an admonition of the pied-piper type. Note that you can also use this technique to override existing admonition icons or colors. You can even add animations . :root { --md-admonition-icon--pied-piper: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M244 246c-3.2-2-6.3-2.9-10.1-2.9-6.6 0-12.6 3.2-19.3 3.7l1.7 4.9zm135.9 197.9c-19 0-64.1 9.5-79.9 19.8l6.9 45.1c35.7 6.1 70.1 3.6 106-9.8-4.8-10-23.5-55.1-33-55.1zM340.8 177c6.6 2.8 11.5 9.2 22.7 22.1 2-1.4 7.5-5.2 7.5-8.6 0-4.9-11.8-13.2-13.2-23 11.2-5.7 25.2-6 37.6-8.9 68.1-16.4 116.3-52.9 146.8-116.7C548.3 29.3 554 16.1 554.6 2l-2 2.6c-28.4 50-33 63.2-81.3 100-31.9 24.4-69.2 40.2-106.6 54.6l-6.3-.3v-21.8c-19.6 1.6-19.7-14.6-31.6-23-18.7 20.6-31.6 40.8-58.9 51.1-12.7 4.8-19.6 10-25.9 21.8 34.9-16.4 91.2-13.5 98.8-10zM555.5 0l-.6 1.1-.3.9.6-.6zm-59.2 382.1c-33.9-56.9-75.3-118.4-150-115.5l-.3-6c-1.1-13.5 32.8 3.2 35.1-31l-14.4 7.2c-19.8-45.7-8.6-54.3-65.5-54.3-14.7 0-26.7 1.7-41.4 4.6 2.9 18.6 2.2 36.7-10.9 50.3l19.5 5.5c-1.7 3.2-2.9 6.3-2.9 9.8 0 21 42.8 2.9 42.8 33.6 0 18.4-36.8 60.1-54.9 60.1-8 0-53.7-50-53.4-60.1l.3-4.6 52.3-11.5c13-2.6 12.3-22.7-2.9-22.7-3.7 0-43.1 9.2-49.4 10.6-2-5.2-7.5-14.1-13.8-14.1-3.2 0-6.3 3.2-9.5 4-9.2 2.6-31 2.9-21.5 20.1L15.9 298.5c-5.5 1.1-8.9 6.3-8.9 11.8 0 6 5.5 10.9 11.5 10.9 8 0 131.3-28.4 147.4-32.2 2.6 3.2 4.6 6.3 7.8 8.6 20.1 14.4 59.8 85.9 76.4 85.9 24.1 0 58-22.4 71.3-41.9 3.2-4.3 6.9-7.5 12.4-6.9.6 13.8-31.6 34.2-33 43.7-1.4 10.2-1 35.2-.3 41.1 26.7 8.1 52-3.6 77.9-2.9 4.3-21 10.6-41.9 9.8-63.5l-.3-9.5c-1.4-34.2-10.9-38.5-34.8-58.6-1.1-1.1-2.6-2.6-3.7-4 2.2-1.4 1.1-1 4.6-1.7 88.5 0 56.3 183.6 111.5 229.9 33.1-15 72.5-27.9 103.5-47.2-29-25.6-52.6-45.7-72.7-79.9zm-196.2 46.1v27.2l11.8-3.4-2.9-23.8zm-68.7-150.4l24.1 61.2 21-13.8-31.3-50.9zm84.4 154.9l2 12.4c9-1.5 58.4-6.6 58.4-14.1 0-1.4-.6-3.2-.9-4.6-26.8 0-36.9 3.8-59.5 6.3z\"/></svg>') } .md-typeset .admonition.pied-piper, .md-typeset details.pied-piper { border-color: rgb(43, 155, 70); } .md-typeset .pied-piper > .admonition-title, .md-typeset .pied-piper > summary { background-color: rgba(43, 155, 70, 0.1); border-color: rgb(43, 155, 70); } .md-typeset .pied-piper > .admonition-title::before, .md-typeset .pied-piper > summary::before { background-color: rgb(43, 155, 70); -webkit-mask-image: var(--md-admonition-icon--pied-piper); mask-image: var(--md-admonition-icon--pied-piper); } Example : !!! pied-piper \"Pied Piper\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Pied Piper Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. The seealso qualifier was originally adapted from the readthedocs theme, in order to make it easier for authors to migrate to Material for MkDocs. However, when the title is omitted, the admonition extension will render it as Seealso , which is incorrect English. For this reason, it was deprecated as of 7.1.5 and will be removed in 8.x. \u21a9","title":"Custom admonitions"},{"location":"reference/buttons/","text":"Buttons \u00b6 Material for MkDocs provides dedicated styles for primary and secondary buttons that can be added to any link, label or button element. This is especially useful for documents or landing pages with dedicated call-to-actions . Configuration \u00b6 Attribute List \u00b6 The Attribute List extension, which is part of the standard Markdown library, allows to add HTML attributes and CSS classes to Markdown elements , and can be enabled via mkdocs.yml markdown_extensions : - attr_list Usage \u00b6 Adding buttons \u00b6 When the Attribute List extension is enabled, any clickable element can be converted into a button by adding the .md-button CSS class, which will receive the selected primary color . Example : [ Subscribe to our mailing list ]( # ){ .md-button } Result : Subscribe to our mailing list Adding primary buttons \u00b6 If you want to display a filled, primary button (like on the landing page of Material for MkDocs), add both the .md-button and .md-button--primary CSS classes. Example : [ Subscribe to our mailing list ]( # ){ .md-button .md-button--primary } Result : Subscribe to our mailing list Adding icon buttons \u00b6 Of course, icons can be added to both types of buttons by using the regular icon syntax and referencing a valid path to any icon bundled with the theme . Example : [ Submit :fontawesome-solid-paper-plane: ]( # ){ .md-button .md-button--primary } Result : Submit","title":"Buttons"},{"location":"reference/buttons/#buttons","text":"Material for MkDocs provides dedicated styles for primary and secondary buttons that can be added to any link, label or button element. This is especially useful for documents or landing pages with dedicated call-to-actions .","title":"Buttons"},{"location":"reference/buttons/#configuration","text":"","title":"Configuration"},{"location":"reference/buttons/#attribute-list","text":"The Attribute List extension, which is part of the standard Markdown library, allows to add HTML attributes and CSS classes to Markdown elements , and can be enabled via mkdocs.yml markdown_extensions : - attr_list","title":"Attribute List"},{"location":"reference/buttons/#usage","text":"","title":"Usage"},{"location":"reference/buttons/#adding-buttons","text":"When the Attribute List extension is enabled, any clickable element can be converted into a button by adding the .md-button CSS class, which will receive the selected primary color . Example : [ Subscribe to our mailing list ]( # ){ .md-button } Result : Subscribe to our mailing list","title":"Adding buttons"},{"location":"reference/buttons/#adding-primary-buttons","text":"If you want to display a filled, primary button (like on the landing page of Material for MkDocs), add both the .md-button and .md-button--primary CSS classes. Example : [ Subscribe to our mailing list ]( # ){ .md-button .md-button--primary } Result : Subscribe to our mailing list","title":"Adding primary buttons"},{"location":"reference/buttons/#adding-icon-buttons","text":"Of course, icons can be added to both types of buttons by using the regular icon syntax and referencing a valid path to any icon bundled with the theme . Example : [ Submit :fontawesome-solid-paper-plane: ]( # ){ .md-button .md-button--primary } Result : Submit","title":"Adding icon buttons"},{"location":"reference/code-blocks/","text":"Code blocks \u00b6 Code blocks and examples are an essential part of technical project documentation. Material for MkDocs provides different ways to set up syntax highlighting for code blocks, either during build time using Pygments or during runtime using a JavaScript syntax highlighter. Configuration \u00b6 Highlight \u00b6 Source \u00b7 Extension \u00b7 Supersedes: CodeHilite The Highlight extension, which is part of Python Markdown Extensions , integrates with Material for MkDocs and provides several options for configuring syntax highlighting of code blocks: use_pygments Default: true \u2013 This option allows to control whether highlighting should be carried out during build time by Pygments or runtime with a JavaScript highlighter. Remember to add the necessary additional stylesheets and JavaScript if you want to use the latter: Pygments markdown_extensions : - pymdownx.highlight - pymdownx.superfences JavaScript markdown_extensions : - pymdownx.highlight : use_pygments : false Syntax highlighting with Highlight.js Highlight.js can be integrated by creating an additional JavaScript file initializing the highlighter and including the respective stylesheet and JavaScript from a CDN serving Highlight.js in mkdocs.yml : docs/javascripts/config.js document $ . subscribe (() => { hljs . highlightAll () }) mkdocs.yml extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/highlight.min.js - javascripts/config.js extra_css : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/default.min.css Note that Highlight.js has no affiliation with the Highlight extension. linenums Default: false \u2013 This option will add line numbers to all code blocks. If you wish to add line numbers to some , but not all code blocks, consult the section on adding line numbers later in this document, which also contains some tips on working with line numbers: markdown_extensions : - pymdownx.highlight : linenums : true linenums_style Default: table \u2013 The Highlight extension provides three ways to add line numbers, all of which are supported by Material for MkDocs. While table wraps a code block in a table, inline and pymdownx-inline render line numbers as part of the line itself: markdown_extensions : - pymdownx.highlight : linenums_style : pymdownx-inline Note that inline will put line numbers next to the actual code, which means that they will be included when selecting text with the cursor or copying a code block to the clipboard. Thus, the usage of table or pymdownx-inline is recommended. Material for MkDocs doesn't provide official support for the other options of this extension, so they may be supported but might yield unexpected results. Use them at your own risk. InlineHilite \u00b6 Source \u00b7 Extension The InlineHilite extension, which is part of Python Markdown Extensions also integrates with Material for MkDocs and adds support for syntax highlighting of inline code blocks . It's built on top of the Highlight extension and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.inlinehilite See the section on inline code blocks for usage information. Keys \u00b6 Source \u00b7 Extension The Keys extension, which is part of Python Markdown Extensions , allows for inserting keyboard keys , e.g. Ctrl + Alt + Del , and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.keys SuperFences \u00b6 The SuperFences extension, which is also part of Python Markdown Extensions , allows for the nesting of code blocks inside other blocks , and is therefore strongly recommended: markdown_extensions : - pymdownx.superfences Snippets \u00b6 The Snippets extension, which is also part of Python Markdown Extensions , allows to insert content from other files or other, regular content, and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.snippets Usage \u00b6 This section discusses how to use different syntax highlighting features with Pygments \u2013 the default highlighter \u2013 so they don't apply when using a JavaScript syntax highlighter. Specifying the language \u00b6 Code blocks must be enclosed with two separate lines containing three backticks. To add code highlighting to those blocks, add the language short name directly after the opening block. See the list of available lexers to find the short name for a given language. Example : ``` python import tensorflow as tf ``` Result : import tensorflow as tf Adding annotations \u00b6 Source \u00b7 Experimental \u00b7 Insiders only Annotations offer a comfortable and friendly way to attach explanations to arbitrary sections of code blocks by adding simple markers within block/inline comments that refer to items of a list following the code block, i.e. (1) , (2) , etc. Material for MkDocs detaches the list from the flow of the document, injects the content of each list item into a tooltip, and links each list marker to the corresponding tooltip. In order to opt-in to annotation support, a slightly different syntax is required \u2013 just add the respective language short code and the .annotate class, after the three backticks. Alternatively, if you want to enable annotations globally, add the following to mkdocs.yml : theme : features : - content.code.annotate Note that annotations can be placed anywhere in a code block where a comment for the language can be placed, which for JavaScript is // (1) and /* (2) */ , for Yaml # (3) , etc. Example : ``` js document$.subscribe(function() { // (1) var tables = document.querySelectorAll(/* (2) */ \"article table\") tables.forEach(function(table) { new Tablesort(table) }) }) ``` 1. ... 2. ... Result : document $ . subscribe ( function () { // (1) var tables = document . querySelectorAll ( /* (2) */ \"article table\" ) tables . forEach ( function ( table ) { new Tablesort ( table ) // (3) }) }) Annotations can contain arbitrary content which is shown when the marker is focussed, including any kind of formatting, links, admonitions, details, and even diagrams: graph LR A[I'm] --> B{a} --> C[diagram]; Tip: You can use Tab to navigate annotations. Annotations can be placed anywhere in a code block were a comment for the underlying language can be placed. Python # (1) JavaScript // (2) /* (2) */ Lua -- (3) We're working on a solution for languages without comments, which will be available shortly. Of course, this can be combined with line numbers , highlighting and all other code block related features. Annotations require syntax highlighting with Pygments \u2013 they're currently not compatible with other JavaScript-based syntax highlighters. Support may be added later on. Adding line numbers \u00b6 Line numbers can be added to a code block by using the linenums=\"<start>\" option directly after the short name, whereas <start> represents the starting line number. A code block can start from a line number other than 1 , which allows splitting large code blocks for readability. Example : ``` python linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Highlighting specific lines \u00b6 Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language short name. Note that line counts start at 1 , regardless of the starting line number specified as part of linenums . Example : ``` python hl_lines=\"2 3\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Line ranges can also be used for conveniently specifying multiple lines. Example : ``` python hl_lines=\"2-5\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Highlighting inline code blocks \u00b6 When InlineHilite is enabled, inline code blocks can be highlighted by prefixing them with a shebang-like sequence, i.e. #! , directly followed by the language short name . Example : The `#!python range()` function is used to generate a sequence of numbers. Result : The range () function is used to generate a sequence of numbers. Adding keyboard keys \u00b6 When Keys is enabled, keyboard keys can be rendered with a simple syntax. Consult the Python Markdown Extensions documentation to learn about all available key codes. Example : ++ctrl+alt+del++ Result : Ctrl + Alt + Del Embedding external files \u00b6 Also known as transcludes or file transclusion in MultiMarkdown . When Snippets is enabled, content from other files can be embedded, which is especially useful to reference and embed the contents of source files directly into your project documentation. Example : ``` --8<--\u200b \".browserslistrc\" ``` Result : last 4 years Note that Snippets is not limited to code blocks, but can be used anywhere from a document to move repeating content to separate files, which is also explained in the official documentation . Customization \u00b6 Custom syntax theme \u00b6 Source \u00b7 Difficulty: easy If Pygments is used, Material for MkDocs provides the styles for code blocks , which are built with a custom and well-balanced palette that works equally well for both color schemes : --md-code-hl-number-color --md-code-hl-special-color --md-code-hl-function-color --md-code-hl-constant-color --md-code-hl-keyword-color --md-code-hl-string-color --md-code-hl-name-color --md-code-hl-operator-color --md-code-hl-punctuation-color --md-code-hl-comment-color --md-code-hl-generic-color --md-code-hl-variable-color Code block foreground, background and line highlight colors are defined via: --md-code-fg-color --md-code-bg-color --md-code-hl-color Let's say you want to change the color of \"strings\" . While there are several types of string tokens , Material for MkDocs assigns a single color to most of them. Create an additional stylesheet , and add: : root > * { --md-code-hl-string-color : #0FF1CE ; } If you want to tweak a specific type of string, i.e. `backticks` , you can lookup the specific class name in the syntax theme definition , and override it as part of your additional stylesheet: . highlight . sb { color : #0FF1CE ; }","title":"Code blocks"},{"location":"reference/code-blocks/#code-blocks","text":"Code blocks and examples are an essential part of technical project documentation. Material for MkDocs provides different ways to set up syntax highlighting for code blocks, either during build time using Pygments or during runtime using a JavaScript syntax highlighter.","title":"Code blocks"},{"location":"reference/code-blocks/#configuration","text":"","title":"Configuration"},{"location":"reference/code-blocks/#highlight","text":"Source \u00b7 Extension \u00b7 Supersedes: CodeHilite The Highlight extension, which is part of Python Markdown Extensions , integrates with Material for MkDocs and provides several options for configuring syntax highlighting of code blocks: use_pygments Default: true \u2013 This option allows to control whether highlighting should be carried out during build time by Pygments or runtime with a JavaScript highlighter. Remember to add the necessary additional stylesheets and JavaScript if you want to use the latter: Pygments markdown_extensions : - pymdownx.highlight - pymdownx.superfences JavaScript markdown_extensions : - pymdownx.highlight : use_pygments : false Syntax highlighting with Highlight.js Highlight.js can be integrated by creating an additional JavaScript file initializing the highlighter and including the respective stylesheet and JavaScript from a CDN serving Highlight.js in mkdocs.yml : docs/javascripts/config.js document $ . subscribe (() => { hljs . highlightAll () }) mkdocs.yml extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/highlight.min.js - javascripts/config.js extra_css : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/default.min.css Note that Highlight.js has no affiliation with the Highlight extension. linenums Default: false \u2013 This option will add line numbers to all code blocks. If you wish to add line numbers to some , but not all code blocks, consult the section on adding line numbers later in this document, which also contains some tips on working with line numbers: markdown_extensions : - pymdownx.highlight : linenums : true linenums_style Default: table \u2013 The Highlight extension provides three ways to add line numbers, all of which are supported by Material for MkDocs. While table wraps a code block in a table, inline and pymdownx-inline render line numbers as part of the line itself: markdown_extensions : - pymdownx.highlight : linenums_style : pymdownx-inline Note that inline will put line numbers next to the actual code, which means that they will be included when selecting text with the cursor or copying a code block to the clipboard. Thus, the usage of table or pymdownx-inline is recommended. Material for MkDocs doesn't provide official support for the other options of this extension, so they may be supported but might yield unexpected results. Use them at your own risk.","title":"Highlight"},{"location":"reference/code-blocks/#inlinehilite","text":"Source \u00b7 Extension The InlineHilite extension, which is part of Python Markdown Extensions also integrates with Material for MkDocs and adds support for syntax highlighting of inline code blocks . It's built on top of the Highlight extension and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.inlinehilite See the section on inline code blocks for usage information.","title":"InlineHilite"},{"location":"reference/code-blocks/#keys","text":"Source \u00b7 Extension The Keys extension, which is part of Python Markdown Extensions , allows for inserting keyboard keys , e.g. Ctrl + Alt + Del , and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.keys","title":"Keys"},{"location":"reference/code-blocks/#superfences","text":"The SuperFences extension, which is also part of Python Markdown Extensions , allows for the nesting of code blocks inside other blocks , and is therefore strongly recommended: markdown_extensions : - pymdownx.superfences","title":"SuperFences"},{"location":"reference/code-blocks/#snippets","text":"The Snippets extension, which is also part of Python Markdown Extensions , allows to insert content from other files or other, regular content, and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.snippets","title":"Snippets"},{"location":"reference/code-blocks/#usage","text":"This section discusses how to use different syntax highlighting features with Pygments \u2013 the default highlighter \u2013 so they don't apply when using a JavaScript syntax highlighter.","title":"Usage"},{"location":"reference/code-blocks/#specifying-the-language","text":"Code blocks must be enclosed with two separate lines containing three backticks. To add code highlighting to those blocks, add the language short name directly after the opening block. See the list of available lexers to find the short name for a given language. Example : ``` python import tensorflow as tf ``` Result : import tensorflow as tf","title":"Specifying the language"},{"location":"reference/code-blocks/#adding-annotations","text":"Source \u00b7 Experimental \u00b7 Insiders only Annotations offer a comfortable and friendly way to attach explanations to arbitrary sections of code blocks by adding simple markers within block/inline comments that refer to items of a list following the code block, i.e. (1) , (2) , etc. Material for MkDocs detaches the list from the flow of the document, injects the content of each list item into a tooltip, and links each list marker to the corresponding tooltip. In order to opt-in to annotation support, a slightly different syntax is required \u2013 just add the respective language short code and the .annotate class, after the three backticks. Alternatively, if you want to enable annotations globally, add the following to mkdocs.yml : theme : features : - content.code.annotate Note that annotations can be placed anywhere in a code block where a comment for the language can be placed, which for JavaScript is // (1) and /* (2) */ , for Yaml # (3) , etc. Example : ``` js document$.subscribe(function() { // (1) var tables = document.querySelectorAll(/* (2) */ \"article table\") tables.forEach(function(table) { new Tablesort(table) }) }) ``` 1. ... 2. ... Result : document $ . subscribe ( function () { // (1) var tables = document . querySelectorAll ( /* (2) */ \"article table\" ) tables . forEach ( function ( table ) { new Tablesort ( table ) // (3) }) }) Annotations can contain arbitrary content which is shown when the marker is focussed, including any kind of formatting, links, admonitions, details, and even diagrams: graph LR A[I'm] --> B{a} --> C[diagram]; Tip: You can use Tab to navigate annotations. Annotations can be placed anywhere in a code block were a comment for the underlying language can be placed. Python # (1) JavaScript // (2) /* (2) */ Lua -- (3) We're working on a solution for languages without comments, which will be available shortly. Of course, this can be combined with line numbers , highlighting and all other code block related features. Annotations require syntax highlighting with Pygments \u2013 they're currently not compatible with other JavaScript-based syntax highlighters. Support may be added later on.","title":"Adding annotations"},{"location":"reference/code-blocks/#adding-line-numbers","text":"Line numbers can be added to a code block by using the linenums=\"<start>\" option directly after the short name, whereas <start> represents the starting line number. A code block can start from a line number other than 1 , which allows splitting large code blocks for readability. Example : ``` python linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Adding line numbers"},{"location":"reference/code-blocks/#highlighting-specific-lines","text":"Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language short name. Note that line counts start at 1 , regardless of the starting line number specified as part of linenums . Example : ``` python hl_lines=\"2 3\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Line ranges can also be used for conveniently specifying multiple lines. Example : ``` python hl_lines=\"2-5\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Highlighting specific lines"},{"location":"reference/code-blocks/#highlighting-inline-code-blocks","text":"When InlineHilite is enabled, inline code blocks can be highlighted by prefixing them with a shebang-like sequence, i.e. #! , directly followed by the language short name . Example : The `#!python range()` function is used to generate a sequence of numbers. Result : The range () function is used to generate a sequence of numbers.","title":"Highlighting inline code blocks"},{"location":"reference/code-blocks/#adding-keyboard-keys","text":"When Keys is enabled, keyboard keys can be rendered with a simple syntax. Consult the Python Markdown Extensions documentation to learn about all available key codes. Example : ++ctrl+alt+del++ Result : Ctrl + Alt + Del","title":"Adding keyboard keys"},{"location":"reference/code-blocks/#embedding-external-files","text":"Also known as transcludes or file transclusion in MultiMarkdown . When Snippets is enabled, content from other files can be embedded, which is especially useful to reference and embed the contents of source files directly into your project documentation. Example : ``` --8<--\u200b \".browserslistrc\" ``` Result : last 4 years Note that Snippets is not limited to code blocks, but can be used anywhere from a document to move repeating content to separate files, which is also explained in the official documentation .","title":"Embedding external files"},{"location":"reference/code-blocks/#customization","text":"","title":"Customization"},{"location":"reference/code-blocks/#custom-syntax-theme","text":"Source \u00b7 Difficulty: easy If Pygments is used, Material for MkDocs provides the styles for code blocks , which are built with a custom and well-balanced palette that works equally well for both color schemes : --md-code-hl-number-color --md-code-hl-special-color --md-code-hl-function-color --md-code-hl-constant-color --md-code-hl-keyword-color --md-code-hl-string-color --md-code-hl-name-color --md-code-hl-operator-color --md-code-hl-punctuation-color --md-code-hl-comment-color --md-code-hl-generic-color --md-code-hl-variable-color Code block foreground, background and line highlight colors are defined via: --md-code-fg-color --md-code-bg-color --md-code-hl-color Let's say you want to change the color of \"strings\" . While there are several types of string tokens , Material for MkDocs assigns a single color to most of them. Create an additional stylesheet , and add: : root > * { --md-code-hl-string-color : #0FF1CE ; } If you want to tweak a specific type of string, i.e. `backticks` , you can lookup the specific class name in the syntax theme definition , and override it as part of your additional stylesheet: . highlight . sb { color : #0FF1CE ; }","title":"Custom syntax theme"},{"location":"reference/content-tabs/","text":"Content tabs \u00b6 Sometimes, it's desirable to group alternative content under different tabs, e.g. when describing how to access an API from different languages or environments. Material for MkDocs allows for beautiful and functional tabs, grouping code blocks and other content. Configuration \u00b6 Tabbed \u00b6 Source \u00b7 Extension The Tabbed extension, which is part of Python Markdown Extensions , integrates with Material for MkDocs and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.tabbed SuperFences \u00b6 The SuperFences extension, which is also part of Python Markdown Extensions , allows for the nesting of code and content blocks inside tabs , and is therefore strongly recommended: markdown_extensions : - pymdownx.superfences Usage \u00b6 Grouping code blocks \u00b6 Code blocks are one of the primary targets to be grouped, and can be considered a special case of content tabs, as tabs with a single code block are always rendered without horizontal spacing. Example : === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` === \"C++\" ``` c++ #include <iostream> int main(void) { std::cout << \"Hello world!\" << std::endl; return 0; } ``` Result : C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Grouping other content \u00b6 When a content tab contains more than one code block, it is rendered with horizontal spacing. Vertical spacing is never added, but can be achieved by nesting tabs in other blocks. Example : === \"Unordered list\" * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci === \"Ordered list\" 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Unordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Ordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Linking content tabs \u00b6 Source \u00b7 Experimental \u00b7 Insiders only When linking is enabled, all content tabs on a page will be linked and show the same active tab when the user clicks on a label. Add the following lines to mkdocs.yml : theme : features : - content.tabs.link Content tabs are linked based on their label, not offset. This means that all tabs with the same label will be activated when a user clicks a content tab regardless of order inside a container. Furthermore, this feature is fully integrated with instant loading and persisted across page loads. With linking Without linking Embedded content \u00b6 When SuperFences is enabled, content tabs can contain arbitrary nested content, including further content tabs, and can be nested in other blocks like admonitions , details or blockquotes: Example : !!! example === \"Unordered List\" _Example_ : ``` markdown * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci ``` _Result_: * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci === \"Ordered List\" _Example_: ``` markdown 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci ``` _Result_ : 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Example Unordered List Example : * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Ordered List Example : 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci","title":"Content tabs"},{"location":"reference/content-tabs/#content-tabs","text":"Sometimes, it's desirable to group alternative content under different tabs, e.g. when describing how to access an API from different languages or environments. Material for MkDocs allows for beautiful and functional tabs, grouping code blocks and other content.","title":"Content tabs"},{"location":"reference/content-tabs/#configuration","text":"","title":"Configuration"},{"location":"reference/content-tabs/#tabbed","text":"Source \u00b7 Extension The Tabbed extension, which is part of Python Markdown Extensions , integrates with Material for MkDocs and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.tabbed","title":"Tabbed"},{"location":"reference/content-tabs/#superfences","text":"The SuperFences extension, which is also part of Python Markdown Extensions , allows for the nesting of code and content blocks inside tabs , and is therefore strongly recommended: markdown_extensions : - pymdownx.superfences","title":"SuperFences"},{"location":"reference/content-tabs/#usage","text":"","title":"Usage"},{"location":"reference/content-tabs/#grouping-code-blocks","text":"Code blocks are one of the primary targets to be grouped, and can be considered a special case of content tabs, as tabs with a single code block are always rendered without horizontal spacing. Example : === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` === \"C++\" ``` c++ #include <iostream> int main(void) { std::cout << \"Hello world!\" << std::endl; return 0; } ``` Result : C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Grouping code blocks"},{"location":"reference/content-tabs/#grouping-other-content","text":"When a content tab contains more than one code block, it is rendered with horizontal spacing. Vertical spacing is never added, but can be achieved by nesting tabs in other blocks. Example : === \"Unordered list\" * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci === \"Ordered list\" 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Unordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Ordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci","title":"Grouping other content"},{"location":"reference/content-tabs/#linking-content-tabs","text":"Source \u00b7 Experimental \u00b7 Insiders only When linking is enabled, all content tabs on a page will be linked and show the same active tab when the user clicks on a label. Add the following lines to mkdocs.yml : theme : features : - content.tabs.link Content tabs are linked based on their label, not offset. This means that all tabs with the same label will be activated when a user clicks a content tab regardless of order inside a container. Furthermore, this feature is fully integrated with instant loading and persisted across page loads. With linking Without linking","title":"Linking content tabs"},{"location":"reference/content-tabs/#embedded-content","text":"When SuperFences is enabled, content tabs can contain arbitrary nested content, including further content tabs, and can be nested in other blocks like admonitions , details or blockquotes: Example : !!! example === \"Unordered List\" _Example_ : ``` markdown * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci ``` _Result_: * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci === \"Ordered List\" _Example_: ``` markdown 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci ``` _Result_ : 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Example Unordered List Example : * Sed sagittis eleifend rutrum * Donec vitae suscipit est * Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Ordered List Example : 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci","title":"Embedded content"},{"location":"reference/data-tables/","text":"Data tables \u00b6 Material for MkDocs defines default styles for data tables \u2013 an excellent way of rendering tabular data in project documentation. Furthermore, customizations like sortable tables can be achieved with a third-party library and some additional JavaScript . Configuration \u00b6 None. Usage \u00b6 Using data tables \u00b6 Data tables can be used at any position in your project documentation and can contain arbitrary Markdown, including inline code blocks, as well as icons and emojis . Example : | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Result : Method Description GET Fetch resource PUT Update resource DELETE Delete resource Column alignment \u00b6 If you want to align a specific column to the left , center or right , you can use the regular Markdown syntax placing : characters at the beginning and/or end of the divider. Left Example : | Method | Description | | :---------- | :----------------------------------- | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Result : Method Description GET Fetch resource PUT Update resource DELETE Delete resource Center Example : | Method | Description | | :---------: | :----------------------------------: | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Result : Method Description GET Fetch resource PUT Update resource DELETE Delete resource Right Example : | Method | Description | | ----------: | -----------------------------------: | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Result : Method Description GET Fetch resource PUT Update resource DELETE Delete resource Customization \u00b6 Sortable tables \u00b6 If you want to make data tables sortable, you can add tablesort , which is natively integrated with Material for MkDocs and will also work with instant loading via additional JavaScript : docs/javascripts/tables.js document $ . subscribe ( function () { var tables = document . querySelectorAll ( \"article table\" ) tables . forEach ( function ( table ) { new Tablesort ( table ) }) }) mkdocs.yml extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/tablesort/5.2.1/tablesort.min.js - javascripts/tables.js Note that tablesort provides alternative comparison implementations like numbers, dates, filesizes and month names. See the official documentation for more information. Example : | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Result : Method Description GET Fetch resource PUT Update resource DELETE Delete resource var tables = document.querySelectorAll(\"article table\") new Tablesort(tables.item(tables.length - 1));","title":"Data tables"},{"location":"reference/data-tables/#data-tables","text":"Material for MkDocs defines default styles for data tables \u2013 an excellent way of rendering tabular data in project documentation. Furthermore, customizations like sortable tables can be achieved with a third-party library and some additional JavaScript .","title":"Data tables"},{"location":"reference/data-tables/#configuration","text":"None.","title":"Configuration"},{"location":"reference/data-tables/#usage","text":"","title":"Usage"},{"location":"reference/data-tables/#using-data-tables","text":"Data tables can be used at any position in your project documentation and can contain arbitrary Markdown, including inline code blocks, as well as icons and emojis . Example : | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Result : Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"Using data tables"},{"location":"reference/data-tables/#column-alignment","text":"If you want to align a specific column to the left , center or right , you can use the regular Markdown syntax placing : characters at the beginning and/or end of the divider. Left Example : | Method | Description | | :---------- | :----------------------------------- | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Result : Method Description GET Fetch resource PUT Update resource DELETE Delete resource Center Example : | Method | Description | | :---------: | :----------------------------------: | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Result : Method Description GET Fetch resource PUT Update resource DELETE Delete resource Right Example : | Method | Description | | ----------: | -----------------------------------: | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Result : Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"Column alignment"},{"location":"reference/data-tables/#customization","text":"","title":"Customization"},{"location":"reference/data-tables/#sortable-tables","text":"If you want to make data tables sortable, you can add tablesort , which is natively integrated with Material for MkDocs and will also work with instant loading via additional JavaScript : docs/javascripts/tables.js document $ . subscribe ( function () { var tables = document . querySelectorAll ( \"article table\" ) tables . forEach ( function ( table ) { new Tablesort ( table ) }) }) mkdocs.yml extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/tablesort/5.2.1/tablesort.min.js - javascripts/tables.js Note that tablesort provides alternative comparison implementations like numbers, dates, filesizes and month names. See the official documentation for more information. Example : | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Result : Method Description GET Fetch resource PUT Update resource DELETE Delete resource var tables = document.querySelectorAll(\"article table\") new Tablesort(tables.item(tables.length - 1));","title":"Sortable tables"},{"location":"reference/diagrams/","text":"Diagrams \u00b6 Diagrams help to communicate complex relationships and interconnections between different technical components, and are a great addition to project documentation. Material for MkDocs integrates with Mermaid.js , a very popular and flexible solution for drawing diagrams. Configuration \u00b6 SuperFences \u00b6 Source \u00b7 Experimental \u00b7 Insiders only The SuperFences extension, which is part of Python Markdown Extensions , allows for adding custom fences , which can be used to render Mermaid.js diagrams with zero effort: markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_code_format No further configuration is necessary. Material for MkDocs will automatically load and initialize the Mermaid.js runtime when a page includes a fenced mermaid block . Furthermore: Works with instant loading without any additional effort Diagrams automatically use fonts and colors defined in mkdocs.yml 1 Fonts and colors can be customized with additional stylesheets Support for both, light and dark color schemes While it's also possible to integrate Mermaid.js using existing third-party plugins 2 , the new native integration is recommended as it ensures interoperability with all Material for MkDocs features. Usage \u00b6 Mermaid diagrams are written as code blocks with the help of the SuperFences extension. They must be enclosed with two separate lines containing three backticks. Using flowcharts \u00b6 Flowcharts are diagrams that represent workflows or processes. The steps are rendered as nodes of various kinds and are connected by edges, describing the necessary order of steps. Example : ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` Result : graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; Using sequence diagrams \u00b6 Sequence diagrams describe a specific scenario as sequential interactions between multiple objects or actors, including the messages that are exchanged between those actors. Example : ``` mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` Result : sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Using state diagrams \u00b6 State diagrams are a great tool to describe the behavior of a system, decomposing it into a finite number of states, and transitions between those states. Example : ``` mermaid stateDiagram-v2 [*] --> Active state Active { [*] --> NumLockOff NumLockOff --> NumLockOn : EvNumLockPressed NumLockOn --> NumLockOff : EvNumLockPressed -- [*] --> CapsLockOff CapsLockOff --> CapsLockOn : EvCapsLockPressed CapsLockOn --> CapsLockOff : EvCapsLockPressed -- [*] --> ScrollLockOff ScrollLockOff --> ScrollLockOn : EvScrollLockPressed ScrollLockOn --> ScrollLockOff : EvScrollLockPressed } ``` Result : stateDiagram-v2 [*] --> Active state Active { [*] --> NumLockOff NumLockOff --> NumLockOn : EvNumLockPressed NumLockOn --> NumLockOff : EvNumLockPressed -- [*] --> CapsLockOff CapsLockOff --> CapsLockOn : EvCapsLockPressed CapsLockOn --> CapsLockOff : EvCapsLockPressed -- [*] --> ScrollLockOff ScrollLockOff --> ScrollLockOn : EvScrollLockPressed ScrollLockOn --> ScrollLockOff : EvScrollLockPressed } Using class diagrams \u00b6 Class diagrams are central to object oriented programing, describing the structure of a system by modelling entities as classes and relationships between them. Example : ``` mermaid classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } ``` Result : classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } Using entity-relationship diagrams \u00b6 An entity-relationship diagram is composed of entity types and specifies relationships that exist between entities. It describes inter-related things in a specific domain of knowledge. Example : ``` mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` Result : erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses While all Mermaid.js features should work out-of-the-box, Material for MkDocs will currently adjust the fonts and colors for flow charts, sequence diagrams, class diagams, state diagrams and entity relationship diagrams. \u21a9 If you don't want to use the native integration, mkdocs-mermaid2-plugin might be a good alternative. However, note that this plugin cannot be used in conjunction with the mkdocs-minify-plugin and doesn't adapt to dark mode. \u21a9","title":"Diagrams"},{"location":"reference/diagrams/#diagrams","text":"Diagrams help to communicate complex relationships and interconnections between different technical components, and are a great addition to project documentation. Material for MkDocs integrates with Mermaid.js , a very popular and flexible solution for drawing diagrams.","title":"Diagrams"},{"location":"reference/diagrams/#configuration","text":"","title":"Configuration"},{"location":"reference/diagrams/#superfences","text":"Source \u00b7 Experimental \u00b7 Insiders only The SuperFences extension, which is part of Python Markdown Extensions , allows for adding custom fences , which can be used to render Mermaid.js diagrams with zero effort: markdown_extensions : - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_code_format No further configuration is necessary. Material for MkDocs will automatically load and initialize the Mermaid.js runtime when a page includes a fenced mermaid block . Furthermore: Works with instant loading without any additional effort Diagrams automatically use fonts and colors defined in mkdocs.yml 1 Fonts and colors can be customized with additional stylesheets Support for both, light and dark color schemes While it's also possible to integrate Mermaid.js using existing third-party plugins 2 , the new native integration is recommended as it ensures interoperability with all Material for MkDocs features.","title":"SuperFences"},{"location":"reference/diagrams/#usage","text":"Mermaid diagrams are written as code blocks with the help of the SuperFences extension. They must be enclosed with two separate lines containing three backticks.","title":"Usage"},{"location":"reference/diagrams/#using-flowcharts","text":"Flowcharts are diagrams that represent workflows or processes. The steps are rendered as nodes of various kinds and are connected by edges, describing the necessary order of steps. Example : ``` mermaid graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; ``` Result : graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!];","title":"Using flowcharts"},{"location":"reference/diagrams/#using-sequence-diagrams","text":"Sequence diagrams describe a specific scenario as sequential interactions between multiple objects or actors, including the messages that are exchanged between those actors. Example : ``` mermaid sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! ``` Result : sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!","title":"Using sequence diagrams"},{"location":"reference/diagrams/#using-state-diagrams","text":"State diagrams are a great tool to describe the behavior of a system, decomposing it into a finite number of states, and transitions between those states. Example : ``` mermaid stateDiagram-v2 [*] --> Active state Active { [*] --> NumLockOff NumLockOff --> NumLockOn : EvNumLockPressed NumLockOn --> NumLockOff : EvNumLockPressed -- [*] --> CapsLockOff CapsLockOff --> CapsLockOn : EvCapsLockPressed CapsLockOn --> CapsLockOff : EvCapsLockPressed -- [*] --> ScrollLockOff ScrollLockOff --> ScrollLockOn : EvScrollLockPressed ScrollLockOn --> ScrollLockOff : EvScrollLockPressed } ``` Result : stateDiagram-v2 [*] --> Active state Active { [*] --> NumLockOff NumLockOff --> NumLockOn : EvNumLockPressed NumLockOn --> NumLockOff : EvNumLockPressed -- [*] --> CapsLockOff CapsLockOff --> CapsLockOn : EvCapsLockPressed CapsLockOn --> CapsLockOff : EvCapsLockPressed -- [*] --> ScrollLockOff ScrollLockOff --> ScrollLockOn : EvScrollLockPressed ScrollLockOn --> ScrollLockOff : EvScrollLockPressed }","title":"Using state diagrams"},{"location":"reference/diagrams/#using-class-diagrams","text":"Class diagrams are central to object oriented programing, describing the structure of a system by modelling entities as classes and relationships between them. Example : ``` mermaid classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() } ``` Result : classDiagram Person <|-- Student Person <|-- Professor Person : +String name Person : +String phoneNumber Person : +String emailAddress Person: +purchaseParkingPass() Address \"1\" <-- \"0..1\" Person:lives at class Student{ +int studentNumber +int averageMark +isEligibleToEnrol() +getSeminarsTaken() } class Professor{ +int salary } class Address{ +String street +String city +String state +int postalCode +String country -validate() +outputAsLabel() }","title":"Using class diagrams"},{"location":"reference/diagrams/#using-entity-relationship-diagrams","text":"An entity-relationship diagram is composed of entity types and specifies relationships that exist between entities. It describes inter-related things in a specific domain of knowledge. Example : ``` mermaid erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ``` Result : erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses While all Mermaid.js features should work out-of-the-box, Material for MkDocs will currently adjust the fonts and colors for flow charts, sequence diagrams, class diagams, state diagrams and entity relationship diagrams. \u21a9 If you don't want to use the native integration, mkdocs-mermaid2-plugin might be a good alternative. However, note that this plugin cannot be used in conjunction with the mkdocs-minify-plugin and doesn't adapt to dark mode. \u21a9","title":"Using entity-relationship diagrams"},{"location":"reference/footnotes/","text":"Footnotes \u00b6 Footnotes are a great way to add references to supplemental or additional information for a specific section of a document without interrupting the document flow. Material for MkDocs provides the ability to insert inline footnotes and render them at the bottom of the page. Configuration \u00b6 Footnotes \u00b6 Source \u00b7 Extension The Footnotes extension, which is part of the standard Markdown library, adds the ability to add inline footnotes to a document and can be enabled via mkdocs.yml : markdown_extensions : - footnotes Usage \u00b6 Adding footnote references \u00b6 A footnote reference must be enclosed in square brackets and must start with a caret ^ , directly followed by an arbitrary identifier, which is similar to the standard Markdown link syntax. Example : Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Result : Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Adding footnote content \u00b6 The footnote content must be declared with the same identifier as the reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink to the footnote reference is automatically added. on a single line \u00b6 Short statements can be written on the same line. Example : [ ^1 ]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Result : Jump to footnote at the bottom of the page on multiple lines \u00b6 Paragraphs can be written on the next line and must be indented by four spaces. Example : [ ^2 ]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Jump to footnote at the bottom of the page Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Footnotes"},{"location":"reference/footnotes/#footnotes","text":"Footnotes are a great way to add references to supplemental or additional information for a specific section of a document without interrupting the document flow. Material for MkDocs provides the ability to insert inline footnotes and render them at the bottom of the page.","title":"Footnotes"},{"location":"reference/footnotes/#configuration","text":"","title":"Configuration"},{"location":"reference/footnotes/#footnotes_1","text":"Source \u00b7 Extension The Footnotes extension, which is part of the standard Markdown library, adds the ability to add inline footnotes to a document and can be enabled via mkdocs.yml : markdown_extensions : - footnotes","title":"Footnotes"},{"location":"reference/footnotes/#usage","text":"","title":"Usage"},{"location":"reference/footnotes/#adding-footnote-references","text":"A footnote reference must be enclosed in square brackets and must start with a caret ^ , directly followed by an arbitrary identifier, which is similar to the standard Markdown link syntax. Example : Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Result : Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2","title":"Adding footnote references"},{"location":"reference/footnotes/#adding-footnote-content","text":"The footnote content must be declared with the same identifier as the reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink to the footnote reference is automatically added.","title":"Adding footnote content"},{"location":"reference/footnotes/#on-a-single-line","text":"Short statements can be written on the same line. Example : [ ^1 ]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Result : Jump to footnote at the bottom of the page","title":"on a single line"},{"location":"reference/footnotes/#on-multiple-lines","text":"Paragraphs can be written on the next line and must be indented by four spaces. Example : [ ^2 ]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Jump to footnote at the bottom of the page Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"on multiple lines"},{"location":"reference/formatting/","text":"Formatting \u00b6 Material for MkDocs provides support for several HTML elements that can be used to highlight sections of a document or apply specific formatting. Additionally, Critic Markup is supported, adding the ability to display suggested changes for a document. Configuration \u00b6 Critic \u00b6 Source \u00b7 Extension The Critic extension, which is part of Python Markdown Extensions , allows for the usage of Critic Markup to highlight changes in a document, and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.critic The following options are supported: mode Default: view \u2013 This option defines how the markup should be parsed, i.e. whether to just view all suggest changes, or alternatively accept or reject them: View changes markdown_extensions : - pymdownx.critic : mode : view Accept changes markdown_extensions : - pymdownx.critic : mode : accept Reject changes markdown_extensions : - pymdownx.critic : mode : reject BetterEm \u00b6 The BetterEm extension, which is part of Python Markdown Extensions , improves the handling of Markup to emphasize text (e.g. bold and italic ), and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.betterem : smart_enable : all Caret, Mark & Tilde \u00b6 The Caret , Mark and Tilde extensions, which are part of Python Markdown Extensions , allow for the highlighting of text , as well as handling sub- and superscripts : markdown_extensions : - pymdownx.caret - pymdownx.mark - pymdownx.tilde SmartSymbols \u00b6 The SmartSymbols extension, which is also part of Python Markdown Extensions , converts special characters into their corresponding symbols , and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.smartsymbols See the official documentation for a list of supported symbols. Usage \u00b6 Highlighting changes \u00b6 When Critic is enabled, Critic Markup can be used, which adds the ability to highlight suggested changes , as well as add inline comments to a document: Example : Text can be {--deleted--} and replacement text {++added++}. This can also be combined into {~~one~>a single~~} operation. {==Highlighting==} is also possible {>>and comments can be added inline<<}. {== Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. ==} Result : Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. Highlighting text \u00b6 When the Caret, Mark & Tilde extensions are enabled, text can be highlighted with a nicer syntax than using the corresponding mark , ins and del HTML tags: Example : - ==This was marked== - ^^This was inserted^^ - ~~This was deleted~~ Result : This was marked This was inserted This was deleted Sub- and superscripts \u00b6 When the Caret & Tilde extensions are enabled, text can be sub- and superscripted with a nicer syntax than using the corresponding sub and sup HTML tags: Example : - H~2~0 - A^T^A Result : H 2 0 A T A","title":"Formatting"},{"location":"reference/formatting/#formatting","text":"Material for MkDocs provides support for several HTML elements that can be used to highlight sections of a document or apply specific formatting. Additionally, Critic Markup is supported, adding the ability to display suggested changes for a document.","title":"Formatting"},{"location":"reference/formatting/#configuration","text":"","title":"Configuration"},{"location":"reference/formatting/#critic","text":"Source \u00b7 Extension The Critic extension, which is part of Python Markdown Extensions , allows for the usage of Critic Markup to highlight changes in a document, and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.critic The following options are supported: mode Default: view \u2013 This option defines how the markup should be parsed, i.e. whether to just view all suggest changes, or alternatively accept or reject them: View changes markdown_extensions : - pymdownx.critic : mode : view Accept changes markdown_extensions : - pymdownx.critic : mode : accept Reject changes markdown_extensions : - pymdownx.critic : mode : reject","title":"Critic"},{"location":"reference/formatting/#betterem","text":"The BetterEm extension, which is part of Python Markdown Extensions , improves the handling of Markup to emphasize text (e.g. bold and italic ), and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.betterem : smart_enable : all","title":"BetterEm"},{"location":"reference/formatting/#caret-mark-tilde","text":"The Caret , Mark and Tilde extensions, which are part of Python Markdown Extensions , allow for the highlighting of text , as well as handling sub- and superscripts : markdown_extensions : - pymdownx.caret - pymdownx.mark - pymdownx.tilde","title":"Caret, Mark &amp; Tilde"},{"location":"reference/formatting/#smartsymbols","text":"The SmartSymbols extension, which is also part of Python Markdown Extensions , converts special characters into their corresponding symbols , and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.smartsymbols See the official documentation for a list of supported symbols.","title":"SmartSymbols"},{"location":"reference/formatting/#usage","text":"","title":"Usage"},{"location":"reference/formatting/#highlighting-changes","text":"When Critic is enabled, Critic Markup can be used, which adds the ability to highlight suggested changes , as well as add inline comments to a document: Example : Text can be {--deleted--} and replacement text {++added++}. This can also be combined into {~~one~>a single~~} operation. {==Highlighting==} is also possible {>>and comments can be added inline<<}. {== Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. ==} Result : Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.","title":"Highlighting changes"},{"location":"reference/formatting/#highlighting-text","text":"When the Caret, Mark & Tilde extensions are enabled, text can be highlighted with a nicer syntax than using the corresponding mark , ins and del HTML tags: Example : - ==This was marked== - ^^This was inserted^^ - ~~This was deleted~~ Result : This was marked This was inserted This was deleted","title":"Highlighting text"},{"location":"reference/formatting/#sub-and-superscripts","text":"When the Caret & Tilde extensions are enabled, text can be sub- and superscripted with a nicer syntax than using the corresponding sub and sup HTML tags: Example : - H~2~0 - A^T^A Result : H 2 0 A T A","title":"Sub- and superscripts"},{"location":"reference/icons-emojis/","text":"Icons + Emojis \u00b6 One of the best features of Material for MkDocs is the possibility to use more than 8.000 icons and thousands of emojis in your project documentation with practically zero additional effort. Furthermore, custom icons can be added and used in mkdocs.yml , documents and templates. Search \u00b6 Tip: Enter some keywords to find the perfect icon or emoji and click on the shortcode to copy it to your clipboard. Configuration \u00b6 Emoji \u00b6 Source \u00b7 Extension The Emoji extension, which is part of Python Markdown Extensions , adds the ability to integrate emojis and icons in the *.svg file format, which are inlined when building your site : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg The following icon sets are bundled with Material for MkDocs: \u2013 Material Design \u2013 FontAwesome \u2013 Octicons You can also add additional icons . When using emojis, it's recommended to consult the official documentation of Python Markdown Extensions to learn about configuration options. Attribute List \u00b6 The Attribute List extension, which is part of the standard Markdown library, allows to add HTML attributes and CSS classes to Markdown elements , and can be enabled via mkdocs.yml markdown_extensions : - attr_list Usage \u00b6 Using emojis \u00b6 Emojis can be integrated in Markdown by putting the shortcode of the emoji between two colons. If you're using Twemoji (recommended), you can look up the shortcodes at Emojipedia . Example : :smile: Result : Using icons \u00b6 When Emoji is enabled, icons can be used similar to emojis, by referencing a valid path to any icon bundled with the theme, which are located in the .icons directory, and replacing / with - : Example : - :material-account-circle: \u2013 `.icons/material/account-circle.svg` - :fontawesome-regular-laugh-wink: \u2013 `.icons/fontawesome/regular/laugh-wink.svg` - :octicons-repo-push-24: \u2013 `.icons/octicons/repo-push-24.svg` Result : \u2013 .icons/material/account-circle.svg \u2013 .icons/fontawesome/regular/laugh-wink.svg \u2013 .icons/octicons/repo-push-24.svg with colors \u00b6 When the Attribute List extension is enabled, custom CSS classes and attributes can be added to icons by suffixing the icon with a special syntax. While HTML and CSS allow to use inline styles , it's always best to add an additional stylesheet and put styles into dedicated CSS classes: . medium { color : #00AB6C ; } . twitter { color : #1DA1F2 ; } . facebook { color : #4267B2 ; } Then, simply add the CSS class to the icon. .medium { color: #00AB6C; } .twitter { color: #1DA1F2; } .facebook { color: #4267B2; } Example : - :fontawesome-brands-medium:{ .medium } \u2013 Medium - :fontawesome-brands-twitter:{ .twitter } \u2013 Twitter - :fontawesome-brands-facebook:{ .facebook } \u2013 Facebook Result : \u2013 Medium \u2013 Twitter \u2013 Facebook with animations \u00b6 Similar to adding colors , it's just as easy to add CSS animations to icons by using an additional stylesheet , defining a @ keyframes rule and adding the dedicated CSS class to the icon: @ keyframes heart { 0 %, 40 %, 80 %, 100 % { transform : scale ( 1 ); } 20 %, 60 % { transform : scale ( 1.15 ); } } . heart { animation : heart 1000 ms infinite ; } Then, simply add the CSS class to the icon. Example : :octicons-heart-fill-24:{ .heart } Result : Customization \u00b6 Using icons in templates \u00b6 When you're extending the theme with partials or blocks, you can simply reference any icon that's bundled with the theme with Jinja's include function and wrap it with the twemoji class: < span class = \"twemoji\" > {% include \".icons/fontawesome/brands/twitter.svg\" %} </ span > This is exactly what Material for MkDocs does in its templates.","title":"Icons + Emojis"},{"location":"reference/icons-emojis/#icons-emojis","text":"One of the best features of Material for MkDocs is the possibility to use more than 8.000 icons and thousands of emojis in your project documentation with practically zero additional effort. Furthermore, custom icons can be added and used in mkdocs.yml , documents and templates.","title":"Icons + Emojis"},{"location":"reference/icons-emojis/#search","text":"Tip: Enter some keywords to find the perfect icon or emoji and click on the shortcode to copy it to your clipboard.","title":"Search"},{"location":"reference/icons-emojis/#configuration","text":"","title":"Configuration"},{"location":"reference/icons-emojis/#emoji","text":"Source \u00b7 Extension The Emoji extension, which is part of Python Markdown Extensions , adds the ability to integrate emojis and icons in the *.svg file format, which are inlined when building your site : markdown_extensions : - pymdownx.emoji : emoji_index : !!python/name:materialx.emoji.twemoji emoji_generator : !!python/name:materialx.emoji.to_svg The following icon sets are bundled with Material for MkDocs: \u2013 Material Design \u2013 FontAwesome \u2013 Octicons You can also add additional icons . When using emojis, it's recommended to consult the official documentation of Python Markdown Extensions to learn about configuration options.","title":"Emoji"},{"location":"reference/icons-emojis/#attribute-list","text":"The Attribute List extension, which is part of the standard Markdown library, allows to add HTML attributes and CSS classes to Markdown elements , and can be enabled via mkdocs.yml markdown_extensions : - attr_list","title":"Attribute List"},{"location":"reference/icons-emojis/#usage","text":"","title":"Usage"},{"location":"reference/icons-emojis/#using-emojis","text":"Emojis can be integrated in Markdown by putting the shortcode of the emoji between two colons. If you're using Twemoji (recommended), you can look up the shortcodes at Emojipedia . Example : :smile: Result :","title":"Using emojis"},{"location":"reference/icons-emojis/#using-icons","text":"When Emoji is enabled, icons can be used similar to emojis, by referencing a valid path to any icon bundled with the theme, which are located in the .icons directory, and replacing / with - : Example : - :material-account-circle: \u2013 `.icons/material/account-circle.svg` - :fontawesome-regular-laugh-wink: \u2013 `.icons/fontawesome/regular/laugh-wink.svg` - :octicons-repo-push-24: \u2013 `.icons/octicons/repo-push-24.svg` Result : \u2013 .icons/material/account-circle.svg \u2013 .icons/fontawesome/regular/laugh-wink.svg \u2013 .icons/octicons/repo-push-24.svg","title":"Using icons"},{"location":"reference/icons-emojis/#with-colors","text":"When the Attribute List extension is enabled, custom CSS classes and attributes can be added to icons by suffixing the icon with a special syntax. While HTML and CSS allow to use inline styles , it's always best to add an additional stylesheet and put styles into dedicated CSS classes: . medium { color : #00AB6C ; } . twitter { color : #1DA1F2 ; } . facebook { color : #4267B2 ; } Then, simply add the CSS class to the icon. .medium { color: #00AB6C; } .twitter { color: #1DA1F2; } .facebook { color: #4267B2; } Example : - :fontawesome-brands-medium:{ .medium } \u2013 Medium - :fontawesome-brands-twitter:{ .twitter } \u2013 Twitter - :fontawesome-brands-facebook:{ .facebook } \u2013 Facebook Result : \u2013 Medium \u2013 Twitter \u2013 Facebook","title":"with colors"},{"location":"reference/icons-emojis/#with-animations","text":"Similar to adding colors , it's just as easy to add CSS animations to icons by using an additional stylesheet , defining a @ keyframes rule and adding the dedicated CSS class to the icon: @ keyframes heart { 0 %, 40 %, 80 %, 100 % { transform : scale ( 1 ); } 20 %, 60 % { transform : scale ( 1.15 ); } } . heart { animation : heart 1000 ms infinite ; } Then, simply add the CSS class to the icon. Example : :octicons-heart-fill-24:{ .heart } Result :","title":"with animations"},{"location":"reference/icons-emojis/#customization","text":"","title":"Customization"},{"location":"reference/icons-emojis/#using-icons-in-templates","text":"When you're extending the theme with partials or blocks, you can simply reference any icon that's bundled with the theme with Jinja's include function and wrap it with the twemoji class: < span class = \"twemoji\" > {% include \".icons/fontawesome/brands/twitter.svg\" %} </ span > This is exactly what Material for MkDocs does in its templates.","title":"Using icons in templates"},{"location":"reference/images/","text":"Images \u00b6 While images are first-class citizens of Markdown and part of the core syntax, it can be difficult to work with them. Material for MkDocs makes working with images more comfortable by providing styles for alignment and image captions. Configuration \u00b6 Attribute List \u00b6 The Attribute List extension, which is part of the standard Markdown library, allows to add HTML attributes and CSS classes to Markdown elements , and can be enabled via mkdocs.yml markdown_extensions : - attr_list Usage \u00b6 Image alignment \u00b6 When the Attribute List extension is enabled, images can be aligned by adding the respective alignment directions via the align attribute, i.e. align=left or align=right Left Example : ![ Placeholder ]( https://dummyimage.com/600x400/eee/aaa ){ align=left } Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Right Example : ![ Placeholder ]( https://dummyimage.com/600x400/eee/aaa ){ align=right } Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. If there's insufficient space to render the text next to the image, the image will stretch to the full width of the viewport, e.g. on mobile viewports. Image captions \u00b6 Sadly, the Markdown syntax doesn't provide native support for image captions, but it's always possible to resort to HTML. Using figure and figcaption , captions can be added to images. Example : < figure > < img src = \"https://dummyimage.com/600x400/eee/aaa\" width = \"300\" /> < figcaption > Image caption </ figcaption > </ figure > Result : Image caption Image lazy-loading \u00b6 Modern browsers provide native support for lazy-loading images through the loading attribute, which degrades to eager-loading in browsers without support. As with image alignment , if the Attribute List extension is enabled, images can be lazy-loaded by adding loading=lazy . Example : ![ Placeholder ]( https://dummyimage.com/600x400/eee/aaa ){ loading=lazy } Result :","title":"Images"},{"location":"reference/images/#images","text":"While images are first-class citizens of Markdown and part of the core syntax, it can be difficult to work with them. Material for MkDocs makes working with images more comfortable by providing styles for alignment and image captions.","title":"Images"},{"location":"reference/images/#configuration","text":"","title":"Configuration"},{"location":"reference/images/#attribute-list","text":"The Attribute List extension, which is part of the standard Markdown library, allows to add HTML attributes and CSS classes to Markdown elements , and can be enabled via mkdocs.yml markdown_extensions : - attr_list","title":"Attribute List"},{"location":"reference/images/#usage","text":"","title":"Usage"},{"location":"reference/images/#image-alignment","text":"When the Attribute List extension is enabled, images can be aligned by adding the respective alignment directions via the align attribute, i.e. align=left or align=right Left Example : ![ Placeholder ]( https://dummyimage.com/600x400/eee/aaa ){ align=left } Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Right Example : ![ Placeholder ]( https://dummyimage.com/600x400/eee/aaa ){ align=right } Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. If there's insufficient space to render the text next to the image, the image will stretch to the full width of the viewport, e.g. on mobile viewports.","title":"Image alignment"},{"location":"reference/images/#image-captions","text":"Sadly, the Markdown syntax doesn't provide native support for image captions, but it's always possible to resort to HTML. Using figure and figcaption , captions can be added to images. Example : < figure > < img src = \"https://dummyimage.com/600x400/eee/aaa\" width = \"300\" /> < figcaption > Image caption </ figcaption > </ figure > Result : Image caption","title":"Image captions"},{"location":"reference/images/#image-lazy-loading","text":"Modern browsers provide native support for lazy-loading images through the loading attribute, which degrades to eager-loading in browsers without support. As with image alignment , if the Attribute List extension is enabled, images can be lazy-loaded by adding loading=lazy . Example : ![ Placeholder ]( https://dummyimage.com/600x400/eee/aaa ){ loading=lazy } Result :","title":"Image lazy-loading"},{"location":"reference/lists/","text":"Lists \u00b6 Material for MkDocs supports several flavors of lists that cater to different use cases, including unordered lists and ordered lists , which are supported through standard Markdown, as well as definition lists and task lists , which are supported through extensions. Configuration \u00b6 Definition List \u00b6 Source \u00b7 Extension The Definition List extension, which is part of the standard Markdown library, adds the ability to add definitions lists to a document and can be enabled via mkdocs.yml : markdown_extensions : - def_list Tasklist \u00b6 Source \u00b7 Extension The Tasklist extension, which is part of Python Markdown Extensions , adds support for lists with styled checkboxes, and provides several options for configuring the style: custom_checkbox Default: false \u00b7 This option toggles the rendering style of checkboxes, replacing native checkbox styles with beautiful icons, and is therefore strongly recommended : markdown_extensions : - pymdownx.tasklist : custom_checkbox : true clickable_checkbox Default: false \u00b7 This option toggles whether checkboxes are clickable. As the state is not persisted, the use of this option is rather discouraged from a user experience perspective: markdown_extensions : - pymdownx.tasklist : clickable_checkbox : true Usage \u00b6 Using unordered lists \u00b6 An unordered list can be written by prefixing a line with a - , * or + list marker, all of which can be used interchangeably. Furthermore, all flavors of lists can be nested inside each other. Example : - Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. * Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. * Nam vulputate tincidunt fringilla. * Nullam dignissim ultrices urna non auctor. Result : Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Using ordered lists \u00b6 An ordered list must start with a number immediately followed by a dot. The numbers do not need to be consecutive and can be all set to 1. , as they will be re-numbered when rendered. Example : 1. Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. 1. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. 2. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. 1. Mauris dictum mi lacus 2. Ut sit amet placerat ante 3. Suspendisse ac eros arcu Result : Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu Using definition lists \u00b6 Definition lists are a ideal for describing arbitrary key-value pairs, e.g. the parameters of functions or modules, as used within this documentation to describe extension or plugin parameters. Example : `Lorem ipsum dolor sit amet` : Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. `Cras arcu libero` : Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Result : Lorem ipsum dolor sit amet Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Cras arcu libero Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Using tasklists \u00b6 When the Tasklist extension is enabled, unordered list items can be prefixed with [ ] to render an unchecked or [x] to render a checked checkbox. Example : - [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit - [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [ ] Praesent sed risus massa - [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"Lists"},{"location":"reference/lists/#lists","text":"Material for MkDocs supports several flavors of lists that cater to different use cases, including unordered lists and ordered lists , which are supported through standard Markdown, as well as definition lists and task lists , which are supported through extensions.","title":"Lists"},{"location":"reference/lists/#configuration","text":"","title":"Configuration"},{"location":"reference/lists/#definition-list","text":"Source \u00b7 Extension The Definition List extension, which is part of the standard Markdown library, adds the ability to add definitions lists to a document and can be enabled via mkdocs.yml : markdown_extensions : - def_list","title":"Definition List"},{"location":"reference/lists/#tasklist","text":"Source \u00b7 Extension The Tasklist extension, which is part of Python Markdown Extensions , adds support for lists with styled checkboxes, and provides several options for configuring the style: custom_checkbox Default: false \u00b7 This option toggles the rendering style of checkboxes, replacing native checkbox styles with beautiful icons, and is therefore strongly recommended : markdown_extensions : - pymdownx.tasklist : custom_checkbox : true clickable_checkbox Default: false \u00b7 This option toggles whether checkboxes are clickable. As the state is not persisted, the use of this option is rather discouraged from a user experience perspective: markdown_extensions : - pymdownx.tasklist : clickable_checkbox : true","title":"Tasklist"},{"location":"reference/lists/#usage","text":"","title":"Usage"},{"location":"reference/lists/#using-unordered-lists","text":"An unordered list can be written by prefixing a line with a - , * or + list marker, all of which can be used interchangeably. Furthermore, all flavors of lists can be nested inside each other. Example : - Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. * Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. * Nam vulputate tincidunt fringilla. * Nullam dignissim ultrices urna non auctor. Result : Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.","title":"Using unordered lists"},{"location":"reference/lists/#using-ordered-lists","text":"An ordered list must start with a number immediately followed by a dot. The numbers do not need to be consecutive and can be all set to 1. , as they will be re-numbered when rendered. Example : 1. Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. 1. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. 2. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. 1. Mauris dictum mi lacus 2. Ut sit amet placerat ante 3. Suspendisse ac eros arcu Result : Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu","title":"Using ordered lists"},{"location":"reference/lists/#using-definition-lists","text":"Definition lists are a ideal for describing arbitrary key-value pairs, e.g. the parameters of functions or modules, as used within this documentation to describe extension or plugin parameters. Example : `Lorem ipsum dolor sit amet` : Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. `Cras arcu libero` : Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Result : Lorem ipsum dolor sit amet Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Cras arcu libero Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.","title":"Using definition lists"},{"location":"reference/lists/#using-tasklists","text":"When the Tasklist extension is enabled, unordered list items can be prefixed with [ ] to render an unchecked or [x] to render a checked checkbox. Example : - [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit - [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [ ] Praesent sed risus massa - [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"Using tasklists"},{"location":"reference/mathjax/","text":"MathJax \u00b6 MathJax is a beautiful and accessible way to display mathematical content in the browser, allows for writing formulas in different notations, including LaTeX , MathML and AsciiMath , and can be easily integrated with Material for MkDocs. Configuration \u00b6 Arithmatex \u00b6 Source \u00b7 Extension The Arithmatex extension, which is part of of Python Markdown Extensions , allows the rendering of block and inline block equations, and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.arithmatex : generic : true Besides enabling the extension in mkdocs.yml , a MathJax configuration and the JavaScript runtime need to be included, which can be done with additional JavaScript : docs/javascripts/config.js window . MathJax = { tex : { inlineMath : [[ \"\\\\(\" , \"\\\\)\" ]], displayMath : [[ \"\\\\[\" , \"\\\\]\" ]], processEscapes : true , processEnvironments : true }, options : { ignoreHtmlClass : \".*|\" , processHtmlClass : \"arithmatex\" } }; document $ . subscribe (() => { MathJax . typesetPromise () }) mkdocs.yml extra_javascript : - javascripts/config.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js MathJax can be configured in many different ways, for which Material for MkDocs might not provide native support. See the official documentation for more information. Using MathJax with instant loading There's no additional effort necessary to integrate MathJax 3 with instant loading \u2013 it's expected to work straight away. However, a previous version of this document explained how to integrate Material for MkDocs with MathJax 2 , which doesn't exhibit this behavior. It's therefore highly recommended to switch to MathJax 3 . window.MathJax = { tex: { inlineMath: [[\"\\\\(\", \"\\\\)\"]], displayMath: [[\"\\\\[\", \"\\\\]\"]], processEscapes: true, processEnvironments: true }, options: { ignoreHtmlClass: \".*|\", processHtmlClass: \"arithmatex\" } }; Usage \u00b6 Using block syntax \u00b6 Blocks must be enclosed in $$ ... $$ or \\[ ... \\] on separate lines: Example : $$ \\operatorname {ker} f = \\{ g \\in G:f ( g )= e_{H} \\} { \\mbox {.}} $$ Result : \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] Using inline block syntax \u00b6 Inline blocks must be enclosed in $ ... $ or \\( ... \\) : Example : The homomorphism $ f $ is injective if and only if its kernel is only the singleton set $ e_G $ , because otherwise $ \\exists a,b \\in G $ with $ a \\neq b $ such that $ f ( a )= f ( b ) $ . Result : The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) .","title":"MathJax"},{"location":"reference/mathjax/#mathjax","text":"MathJax is a beautiful and accessible way to display mathematical content in the browser, allows for writing formulas in different notations, including LaTeX , MathML and AsciiMath , and can be easily integrated with Material for MkDocs.","title":"MathJax"},{"location":"reference/mathjax/#configuration","text":"","title":"Configuration"},{"location":"reference/mathjax/#arithmatex","text":"Source \u00b7 Extension The Arithmatex extension, which is part of of Python Markdown Extensions , allows the rendering of block and inline block equations, and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.arithmatex : generic : true Besides enabling the extension in mkdocs.yml , a MathJax configuration and the JavaScript runtime need to be included, which can be done with additional JavaScript : docs/javascripts/config.js window . MathJax = { tex : { inlineMath : [[ \"\\\\(\" , \"\\\\)\" ]], displayMath : [[ \"\\\\[\" , \"\\\\]\" ]], processEscapes : true , processEnvironments : true }, options : { ignoreHtmlClass : \".*|\" , processHtmlClass : \"arithmatex\" } }; document $ . subscribe (() => { MathJax . typesetPromise () }) mkdocs.yml extra_javascript : - javascripts/config.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js MathJax can be configured in many different ways, for which Material for MkDocs might not provide native support. See the official documentation for more information. Using MathJax with instant loading There's no additional effort necessary to integrate MathJax 3 with instant loading \u2013 it's expected to work straight away. However, a previous version of this document explained how to integrate Material for MkDocs with MathJax 2 , which doesn't exhibit this behavior. It's therefore highly recommended to switch to MathJax 3 . window.MathJax = { tex: { inlineMath: [[\"\\\\(\", \"\\\\)\"]], displayMath: [[\"\\\\[\", \"\\\\]\"]], processEscapes: true, processEnvironments: true }, options: { ignoreHtmlClass: \".*|\", processHtmlClass: \"arithmatex\" } };","title":"Arithmatex"},{"location":"reference/mathjax/#usage","text":"","title":"Usage"},{"location":"reference/mathjax/#using-block-syntax","text":"Blocks must be enclosed in $$ ... $$ or \\[ ... \\] on separate lines: Example : $$ \\operatorname {ker} f = \\{ g \\in G:f ( g )= e_{H} \\} { \\mbox {.}} $$ Result : \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]","title":"Using block syntax"},{"location":"reference/mathjax/#using-inline-block-syntax","text":"Inline blocks must be enclosed in $ ... $ or \\( ... \\) : Example : The homomorphism $ f $ is injective if and only if its kernel is only the singleton set $ e_G $ , because otherwise $ \\exists a,b \\in G $ with $ a \\neq b $ such that $ f ( a )= f ( b ) $ . Result : The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) .","title":"Using inline block syntax"},{"location":"reference/meta-tags/","text":"Meta tags \u00b6 In HTML, meta tags allow to provide additional metadata for a document, e.g. page titles and descriptions, additional assets to be loaded, and Open Graph data. While arbitrary metadata can always be added via customization , some common meta tags can be configured. Configuration \u00b6 Metadata \u00b6 The Metadata extension, which is part of the standard Markdown library, adds the ability to add front matter to a document and can be enabled via mkdocs.yml : markdown_extensions : - meta Front matter is written as a series of key-value pairs at the beginning of the Markdown document, delimited by a blank line which ends the YAML context. Usage \u00b6 Setting the page title \u00b6 If the Metadata extension is enabled, the page title can be overridden on a per-document basis with custom front matter: --- title: Lorem ipsum dolor sit amet --- # Document title ... This will set the title tag inside the document head for the current page to the provided value. Note that the site title is appended using a dash as a separator, which is the default behavior. Setting the page description \u00b6 If the Metadata extension is enabled, the page description can also be overridden on a per-document basis with custom front matter: --- description: Nullam urna elit, malesuada eget finibus ut, ac tortor. --- # Document title ... This will set the meta tag containing the site description inside the document head for the current page to the provided value. Adding a web app manifest \u00b6 A web app manifest is a simple JSON file that specifies how your web application should behave when installed on the user's mobile device or desktop, which can be set via mkdocs.yml : extra : manifest : manifest.webmanifest Customization \u00b6 Custom meta tags \u00b6 on all pages \u00b6 In order to add custom meta tags to your document, you can extend the theme and simply override the extrahead block , e.g. to add indexing policies for search engines: {% block extrahead %} < meta property = \"robots\" content = \"noindex, nofollow\" /> {% endblock %} on a single page \u00b6 If you want to set a meta tag on a single page, or want to set different values for different pages, you can use the page.meta object inside your template override, e.g.: {% block extrahead %} {% if page and page.meta and page.meta.robots %} < meta property = \"robots\" content = \"{{ page.meta.robots }}\" /> {% else %} < meta property = \"robots\" content = \"index, follow\" /> {% endif %} {% endblock %} You can now use robots exactly like title and description to set values. Note that in this case, the template defines an else branch, which would set a default if none was given. Social meta tags \u00b6 Some further examples, including Open Graph and Twitter Cards : Open Graph {% block extrahead %} {% set title = config.site_name %} {% if page and page.meta and page.meta.title %} {% set title = title ~ \" - \" ~ page.meta.title %} {% elif page and page.title and not page.is_homepage %} {% set title = title ~ \" - \" ~ page.title | striptags %} {% endif %} < meta property = \"og:type\" content = \"website\" /> < meta property = \"og:title\" content = \"{{ title }}\" /> < meta property = \"og:description\" content = \"{{ config.site_description }}\" /> < meta property = \"og:url\" content = \"{{ page.canonical_url }}\" /> < meta property = \"og:image\" content = \"<url>\" /> < meta property = \"og:image:type\" content = \"image/png\" /> < meta property = \"og:image:width\" content = \"1200\" /> < meta property = \"og:image:height\" content = \"630\" /> {% endblock %} Twitter Cards {% block extrahead %} {% set title = config.site_name %} {% if page and page.meta and page.meta.title %} {% set title = title ~ \" - \" ~ page.meta.title %} {% elif page and page.title and not page.is_homepage %} {% set title = title ~ \" - \" ~ page.title | striptags %} {% endif %} < meta name = \"twitter:card\" content = \"summary_large_image\" /> < meta name = \"twitter:site\" content = \"<username>\" /> < meta name = \"twitter:creator\" content = \"<username>\" /> < meta name = \"twitter:title\" content = \"{{ title }}\" /> < meta name = \"twitter:description\" content = \"{{ config.site_description }}\" /> < meta name = \"twitter:image\" content = \"<url>\" /> {% endblock %} Automatically generated social cards If you don't want to bother with meta tags and social cards yourself, you can let the built-in social cards plugin do the work for you, which generates beautiful image previews for social media automatically during the build.","title":"Meta tags"},{"location":"reference/meta-tags/#meta-tags","text":"In HTML, meta tags allow to provide additional metadata for a document, e.g. page titles and descriptions, additional assets to be loaded, and Open Graph data. While arbitrary metadata can always be added via customization , some common meta tags can be configured.","title":"Meta tags"},{"location":"reference/meta-tags/#configuration","text":"","title":"Configuration"},{"location":"reference/meta-tags/#metadata","text":"The Metadata extension, which is part of the standard Markdown library, adds the ability to add front matter to a document and can be enabled via mkdocs.yml : markdown_extensions : - meta Front matter is written as a series of key-value pairs at the beginning of the Markdown document, delimited by a blank line which ends the YAML context.","title":"Metadata"},{"location":"reference/meta-tags/#usage","text":"","title":"Usage"},{"location":"reference/meta-tags/#setting-the-page-title","text":"If the Metadata extension is enabled, the page title can be overridden on a per-document basis with custom front matter: --- title: Lorem ipsum dolor sit amet --- # Document title ... This will set the title tag inside the document head for the current page to the provided value. Note that the site title is appended using a dash as a separator, which is the default behavior.","title":"Setting the page title"},{"location":"reference/meta-tags/#setting-the-page-description","text":"If the Metadata extension is enabled, the page description can also be overridden on a per-document basis with custom front matter: --- description: Nullam urna elit, malesuada eget finibus ut, ac tortor. --- # Document title ... This will set the meta tag containing the site description inside the document head for the current page to the provided value.","title":"Setting the page description"},{"location":"reference/meta-tags/#adding-a-web-app-manifest","text":"A web app manifest is a simple JSON file that specifies how your web application should behave when installed on the user's mobile device or desktop, which can be set via mkdocs.yml : extra : manifest : manifest.webmanifest","title":"Adding a web app manifest"},{"location":"reference/meta-tags/#customization","text":"","title":"Customization"},{"location":"reference/meta-tags/#custom-meta-tags","text":"","title":"Custom meta tags"},{"location":"reference/meta-tags/#on-all-pages","text":"In order to add custom meta tags to your document, you can extend the theme and simply override the extrahead block , e.g. to add indexing policies for search engines: {% block extrahead %} < meta property = \"robots\" content = \"noindex, nofollow\" /> {% endblock %}","title":"on all pages"},{"location":"reference/meta-tags/#on-a-single-page","text":"If you want to set a meta tag on a single page, or want to set different values for different pages, you can use the page.meta object inside your template override, e.g.: {% block extrahead %} {% if page and page.meta and page.meta.robots %} < meta property = \"robots\" content = \"{{ page.meta.robots }}\" /> {% else %} < meta property = \"robots\" content = \"index, follow\" /> {% endif %} {% endblock %} You can now use robots exactly like title and description to set values. Note that in this case, the template defines an else branch, which would set a default if none was given.","title":"on a single page"},{"location":"reference/meta-tags/#social-meta-tags","text":"Some further examples, including Open Graph and Twitter Cards : Open Graph {% block extrahead %} {% set title = config.site_name %} {% if page and page.meta and page.meta.title %} {% set title = title ~ \" - \" ~ page.meta.title %} {% elif page and page.title and not page.is_homepage %} {% set title = title ~ \" - \" ~ page.title | striptags %} {% endif %} < meta property = \"og:type\" content = \"website\" /> < meta property = \"og:title\" content = \"{{ title }}\" /> < meta property = \"og:description\" content = \"{{ config.site_description }}\" /> < meta property = \"og:url\" content = \"{{ page.canonical_url }}\" /> < meta property = \"og:image\" content = \"<url>\" /> < meta property = \"og:image:type\" content = \"image/png\" /> < meta property = \"og:image:width\" content = \"1200\" /> < meta property = \"og:image:height\" content = \"630\" /> {% endblock %} Twitter Cards {% block extrahead %} {% set title = config.site_name %} {% if page and page.meta and page.meta.title %} {% set title = title ~ \" - \" ~ page.meta.title %} {% elif page and page.title and not page.is_homepage %} {% set title = title ~ \" - \" ~ page.title | striptags %} {% endif %} < meta name = \"twitter:card\" content = \"summary_large_image\" /> < meta name = \"twitter:site\" content = \"<username>\" /> < meta name = \"twitter:creator\" content = \"<username>\" /> < meta name = \"twitter:title\" content = \"{{ title }}\" /> < meta name = \"twitter:description\" content = \"{{ config.site_description }}\" /> < meta name = \"twitter:image\" content = \"<url>\" /> {% endblock %} Automatically generated social cards If you don't want to bother with meta tags and social cards yourself, you can let the built-in social cards plugin do the work for you, which generates beautiful image previews for social media automatically during the build.","title":"Social meta tags"},{"location":"reference/variables/","text":"Variables \u00b6 Macros and variables are powerful tools to parametrize Markdown files, as they allow to perform Jinja templating directly from Markdown. This is especially useful to include technical data from other files and add central variables via mkdocs.yml . Configuration \u00b6 Macros \u00b6 The macros plugin adds support to reference variables and call macros and supports Jinja templating directly from Markdown. It can be installed with pip : pip install mkdocs-macros-plugin Then, add the following to mkdocs.yml : plugins : - macros Usage \u00b6 Using predefined variables \u00b6 A set of predefined variables is enabled by default and can be used from Markdown, including data from mkdocs.yml . More specifically, predefined variables fall into the following categories: config.* : configuration parameters from mkdocs.yml page.* : metadata and content of current page navigation.* : list of all pages and sections environment.* : underlying operating system git.* : git-related information, if available Example : Welcome to {{ config.site_name }}! Result : Welcome to Material for MkDocs! A list of all predefined variables can be printed with: {{ macros_info() }} Using custom variables \u00b6 All data defined under extra in mkdocs.yml is automatically exposed as a variable and can be used from the template. This enables centralized parameter storage and management. Example : docs/page.md The unit price is {{ unit.price }} mkdocs.yml extra : unit : price : 12.50 Result : The unit price is 12.50. Using variables in snippets \u00b6 The macros plugin can be used to allow variables in snippets, which is not possible with the Snippets extension alone. Add the snippets location to the plugin configuration in mkdocs.yml : plugins : - search - macros : include_dir : snippets In your Markdown file, include snippets with Jinja's include function: {% include \"definitions.md\" %} Example : snippets/definitions.md The unit price is {{ page.meta.unit.price }} docs/page-1.md --- unit: price: 12.50 --- {% include \"definitions.md\" %} docs/page-2.md --- unit: price: 25.00 --- {% include \"definitions.md\" %} Customization \u00b6 Custom macros \u00b6 The macros plugin allows to define custom macros, which can then be used from Markdown files. See the official documentation for more information how to define custom macros.","title":"Variables"},{"location":"reference/variables/#variables","text":"Macros and variables are powerful tools to parametrize Markdown files, as they allow to perform Jinja templating directly from Markdown. This is especially useful to include technical data from other files and add central variables via mkdocs.yml .","title":"Variables"},{"location":"reference/variables/#configuration","text":"","title":"Configuration"},{"location":"reference/variables/#macros","text":"The macros plugin adds support to reference variables and call macros and supports Jinja templating directly from Markdown. It can be installed with pip : pip install mkdocs-macros-plugin Then, add the following to mkdocs.yml : plugins : - macros","title":"Macros"},{"location":"reference/variables/#usage","text":"","title":"Usage"},{"location":"reference/variables/#using-predefined-variables","text":"A set of predefined variables is enabled by default and can be used from Markdown, including data from mkdocs.yml . More specifically, predefined variables fall into the following categories: config.* : configuration parameters from mkdocs.yml page.* : metadata and content of current page navigation.* : list of all pages and sections environment.* : underlying operating system git.* : git-related information, if available Example : Welcome to {{ config.site_name }}! Result : Welcome to Material for MkDocs! A list of all predefined variables can be printed with: {{ macros_info() }}","title":"Using predefined variables"},{"location":"reference/variables/#using-custom-variables","text":"All data defined under extra in mkdocs.yml is automatically exposed as a variable and can be used from the template. This enables centralized parameter storage and management. Example : docs/page.md The unit price is {{ unit.price }} mkdocs.yml extra : unit : price : 12.50 Result : The unit price is 12.50.","title":"Using custom variables"},{"location":"reference/variables/#using-variables-in-snippets","text":"The macros plugin can be used to allow variables in snippets, which is not possible with the Snippets extension alone. Add the snippets location to the plugin configuration in mkdocs.yml : plugins : - search - macros : include_dir : snippets In your Markdown file, include snippets with Jinja's include function: {% include \"definitions.md\" %} Example : snippets/definitions.md The unit price is {{ page.meta.unit.price }} docs/page-1.md --- unit: price: 12.50 --- {% include \"definitions.md\" %} docs/page-2.md --- unit: price: 25.00 --- {% include \"definitions.md\" %}","title":"Using variables in snippets"},{"location":"reference/variables/#customization","text":"","title":"Customization"},{"location":"reference/variables/#custom-macros","text":"The macros plugin allows to define custom macros, which can then be used from Markdown files. See the official documentation for more information how to define custom macros.","title":"Custom macros"}]}